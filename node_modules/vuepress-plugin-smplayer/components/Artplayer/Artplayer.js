import { defineComponent, h, onBeforeUnmount, onMounted } from "vue";
import { deepmerge as merge } from "deepmerge-ts";
import { useSize } from "../../utils/size.js";
import * as mse from "../../utils/mse.js";
// @ts-ignore
import { artplayer } from "@temp/SmplayerOptions.json";
const ARTPLAYER = artplayer;
export default defineComponent({
    props: {
        src: Object,
        url: String,
        player: Function,
        pluginDanmuKu: Object,
        width: {
            type: String,
            default: ARTPLAYER.width,
            required: false,
        },
        height: {
            type: [String, Number],
            default: ARTPLAYER.height,
            required: false,
        },
        ratio: {
            type: [String, Number],
            default: ARTPLAYER.ratio,
        },
    },
    setup(props) {
        const option = {
            ...merge(ARTPLAYER, props),
        };
        let src = option.src || {};
        src.url ?? (src.url = props.url);
        const { el, width, height } = useSize(props, 0);
        let artplayer;
        const initArtPlayer = async () => {
            const { default: art } = await import("artplayer/dist/artplayer.js");
            src.container = el.value;
            src.customType = src.customType || {};
            src.type = src.type || mse.checkType(src.url);
            switch (src.type) {
                case "m3u8":
                case "hls":
                    src.customType[src.type] = mse.m3u8;
                    break;
                case "flv":
                    src.customType[src.type] = mse.flv;
                    break;
                case "mpd":
                case "dash":
                    src.customType[src.type] = mse.dash;
                    break;
            }
            if (option.pluginDanmuKu) {
                const { default: artplayerPluginDanmuku } = await import("artplayer-plugin-danmuku");
                src.plugins ?? (src.plugins = []);
                // @ts-ignore
                src.plugins?.push(artplayerPluginDanmuku(option.pluginDanmuKu));
            }
            artplayer = new art(src);
            if (props.player) {
                props.player(artplayer);
            }
        };
        const destroyArtPlayer = () => {
            artplayer.destroy();
        };
        onMounted(() => {
            initArtPlayer();
        });
        onBeforeUnmount(() => {
            destroyArtPlayer();
        });
        return () => [
            h("div", {
                ref: el,
                style: {
                    width: width.value,
                    height: height.value,
                },
            }),
        ];
    },
});
