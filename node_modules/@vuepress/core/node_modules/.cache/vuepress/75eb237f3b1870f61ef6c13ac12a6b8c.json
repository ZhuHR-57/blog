{"remainingRequest":"F:\\Blog\\Blog_Home_New\\node_modules\\babel-loader\\lib\\index.js??ref--3-1!F:\\Blog\\Blog_Home_New\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!F:\\Blog\\Blog_Home_New\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\Blog\\Blog_Home_New\\node_modules\\vuepress-theme-vdoing\\components\\Home.vue?vue&type=script&lang=js&","dependencies":[{"path":"F:\\Blog\\Blog_Home_New\\node_modules\\vuepress-theme-vdoing\\components\\Home.vue","mtime":1685413351991},{"path":"F:\\Blog\\Blog_Home_New\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1673497485656},{"path":"F:\\Blog\\Blog_Home_New\\node_modules\\babel-loader\\lib\\index.js","mtime":1673497485408},{"path":"F:\\Blog\\Blog_Home_New\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1673497485656},{"path":"F:\\Blog\\Blog_Home_New\\node_modules\\vue-loader\\lib\\index.js","mtime":1673497490939}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}