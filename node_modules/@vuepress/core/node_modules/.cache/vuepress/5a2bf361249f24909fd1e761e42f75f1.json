{"remainingRequest":"F:\\Blog\\Blog_Home_New\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!F:\\Blog\\Blog_Home_New\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!F:\\Blog\\Blog_Home_New\\node_modules\\vue-loader\\lib\\index.js??ref--1-1!F:\\Blog\\Blog_Home_New\\node_modules\\@vuepress\\markdown-loader\\index.js??ref--1-2!F:\\Blog\\Blog_Home_New\\docs\\04.分享\\04.English\\01.Grammar.md?vue&type=template&id=0081a6c0&","dependencies":[{"path":"F:\\Blog\\Blog_Home_New\\docs\\04.分享\\04.English\\01.Grammar.md","mtime":1697693196681},{"path":"F:\\Blog\\Blog_Home_New\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1673497485656},{"path":"F:\\Blog\\Blog_Home_New\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1673497490939},{"path":"F:\\Blog\\Blog_Home_New\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1673497485656},{"path":"F:\\Blog\\Blog_Home_New\\node_modules\\vue-loader\\lib\\index.js","mtime":1673497490939},{"path":"F:\\Blog\\Blog_Home_New\\node_modules\\@vuepress\\markdown-loader\\index.js","mtime":1673497484626}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}