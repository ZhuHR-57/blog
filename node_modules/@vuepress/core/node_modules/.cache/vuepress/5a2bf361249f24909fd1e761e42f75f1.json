{"remainingRequest":"F:\\Blog\\Blog_Home_New\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!F:\\Blog\\Blog_Home_New\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!F:\\Blog\\Blog_Home_New\\node_modules\\vue-loader\\lib\\index.js??ref--1-1!F:\\Blog\\Blog_Home_New\\node_modules\\@vuepress\\markdown-loader\\index.js??ref--1-2!F:\\Blog\\Blog_Home_New\\docs\\04.分享\\04.English\\01.Grammar.md?vue&type=template&id=0081a6c0&","dependencies":[{"path":"F:\\Blog\\Blog_Home_New\\docs\\04.分享\\04.English\\01.Grammar.md","mtime":1699592681304},{"path":"F:\\Blog\\Blog_Home_New\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1673497485656},{"path":"F:\\Blog\\Blog_Home_New\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1673497490939},{"path":"F:\\Blog\\Blog_Home_New\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1673497485656},{"path":"F:\\Blog\\Blog_Home_New\\node_modules\\vue-loader\\lib\\index.js","mtime":1673497490939},{"path":"F:\\Blog\\Blog_Home_New\\node_modules\\@vuepress\\markdown-loader\\index.js","mtime":1673497484626}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:var render = function () {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c(
    "ContentSlotsDistributor",
    { attrs: { "slot-key": _vm.$parent.slotKey } },
    [
      _c("div", { staticClass: "custom-block tip" }, [
        _c("p", { staticClass: "custom-block-title" }, [_vm._v("提示")]),
        _vm._v(" "),
        _c("p", [_vm._v("资料来源:")]),
        _vm._v(" "),
        _c("ol", [
          _c("li", [
            _vm._v(
              "https://learnenglish.britishcouncil.org/grammar/a1-a2-grammar"
            ),
          ]),
          _vm._v(" "),
          _c("li", [
            _vm._v(
              "https://learnenglish.britishcouncil.org/grammar/b1-b2-grammar"
            ),
          ]),
          _vm._v(" "),
          _c("li", [
            _vm._v(
              "https://learnenglish.britishcouncil.org/grammar/c1-grammar"
            ),
          ]),
        ]),
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "a1-a2-grammar" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#a1-a2-grammar" } },
          [_vm._v("#")]
        ),
        _vm._v(" （A1-A2）Grammar"),
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "adjectives-and-prepositions" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#adjectives-and-prepositions" },
          },
          [_vm._v("#")]
        ),
        _vm._v(" 1️⃣ Adjectives and prepositions"),
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "with-at" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#with-at" } }, [
          _vm._v("#"),
        ]),
        _vm._v(" With "),
        _c("em", [_vm._v("at")]),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("We use "),
        _c("em", [_vm._v("at")]),
        _vm._v(" with adjectives like "),
        _c("em", [_vm._v("good")]),
        _vm._v("/"),
        _c("em", [_vm._v("bad")]),
        _vm._v("/"),
        _c("em", [_vm._v("amazing")]),
        _vm._v("/"),
        _c("em", [_vm._v("brilliant")]),
        _vm._v("/"),
        _c("em", [_vm._v("terrible")]),
        _vm._v(", etc. to talk about skills and abilities."),
      ]),
      _vm._v(" "),
      _c("blockquote", [
        _c("p", [
          _c("em", [
            _vm._v("He's really "),
            _c("strong", [_vm._v("good at")]),
            _vm._v(" English."),
            _c("br"),
            _vm._v("\nShe's "),
            _c("strong", [_vm._v("amazing at")]),
            _vm._v(" the piano."),
            _c("br"),
            _vm._v("\nThey're "),
            _c("strong", [_vm._v("terrible at")]),
            _vm._v(" organising anything."),
            _c("br"),
            _vm._v("\nI'm not very "),
            _c("strong", [_vm._v("good at")]),
            _vm._v(" drawing."),
          ]),
        ]),
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "with-about" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#with-about" } },
          [_vm._v("#")]
        ),
        _vm._v(" With "),
        _c("em", [_vm._v("about")]),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("We often use "),
        _c("em", [_vm._v("about")]),
        _vm._v(" with adjectives of feelings like "),
        _c("em", [_vm._v("angry")]),
        _vm._v("/"),
        _c("em", [_vm._v("excited")]),
        _vm._v("/"),
        _c("em", [_vm._v("happy")]),
        _vm._v("/"),
        _c("em", [_vm._v("nervous")]),
        _vm._v("/"),
        _c("em", [_vm._v("sad")]),
        _vm._v("/"),
        _c("em", [_vm._v("stressed")]),
        _vm._v("/"),
        _c("em", [_vm._v("worried")]),
        _vm._v(", etc. to explain what is causing that feeling."),
      ]),
      _vm._v(" "),
      _c("blockquote", [
        _c("p", [
          _c("em", [
            _vm._v("I'm "),
            _c("strong", [_vm._v("angry about")]),
            _vm._v(" the decision."),
            _c("br"),
            _vm._v("\nHe's "),
            _c("strong", [_vm._v("nervous about")]),
            _vm._v(" the presentation."),
            _c("br"),
            _vm._v("\nShe's "),
            _c("strong", [_vm._v("excited about")]),
            _vm._v(" the new job."),
            _c("br"),
            _vm._v("\nThey were "),
            _c("strong", [_vm._v("worried about")]),
            _vm._v(" the exam."),
          ]),
        ]),
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "with-of" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#with-of" } }, [
          _vm._v("#"),
        ]),
        _vm._v(" With "),
        _c("em", [_vm._v("of")]),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("However, sometimes we use "),
        _c("em", [_vm._v("of")]),
        _vm._v(" with feelings."),
      ]),
      _vm._v(" "),
      _c("blockquote", [
        _c("p", [
          _c("em", [
            _vm._v("She was "),
            _c("strong", [_vm._v("afraid of")]),
            _vm._v(" telling her mum."),
            _c("br"),
            _vm._v("\nI'm "),
            _c("strong", [_vm._v("frightened of")]),
            _vm._v(" having an accident."),
            _c("br"),
            _vm._v("\nHe's "),
            _c("strong", [_vm._v("scared of")]),
            _vm._v(" flying."),
            _c("br"),
            _vm._v("\nYou should be "),
            _c("strong", [_vm._v("proud of")]),
            _vm._v(" your progress."),
          ]),
        ]),
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "with-to" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#with-to" } }, [
          _vm._v("#"),
        ]),
        _vm._v(" With "),
        _c("em", [_vm._v("to")]),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("We can use "),
        _c("em", [_vm._v("to")]),
        _vm._v(" to show the connection between people or things."),
      ]),
      _vm._v(" "),
      _c("blockquote", [
        _c("p", [
          _c("em", [
            _vm._v("He's "),
            _c("strong", [_vm._v("married to")]),
            _vm._v(" the director."),
            _c("br"),
            _vm._v("\nI'm "),
            _c("strong", [_vm._v("addicted to")]),
            _vm._v(" my phone."),
            _c("br"),
            _vm._v("\nI'm "),
            _c("strong", [_vm._v("allergic to")]),
            _vm._v(" nuts."),
            _c("br"),
            _vm._v("\nIt's "),
            _c("strong", [_vm._v("similar to")]),
            _vm._v(" the old one."),
          ]),
        ]),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("We can also use "),
        _c("em", [_vm._v("to")]),
        _vm._v(" to talk about someone's behaviour towards someone else."),
      ]),
      _vm._v(" "),
      _c("blockquote", [
        _c("p", [
          _c("em", [
            _vm._v("They were really "),
            _c("strong", [_vm._v("friendly to")]),
            _vm._v(" me."),
            _c("br"),
            _vm._v("\nWas he "),
            _c("strong", [_vm._v("nice to")]),
            _vm._v(" you?"),
            _c("br"),
            _vm._v("\nHe is always "),
            _c("strong", [_vm._v("polite to")]),
            _vm._v(" everyone."),
            _c("br"),
            _vm._v("\nShe was very "),
            _c("strong", [_vm._v("rude to")]),
            _vm._v(" the waitress."),
          ]),
        ]),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("Here are some other useful adjectives with prepositions."),
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "with-for" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#with-for" } },
          [_vm._v("#")]
        ),
        _vm._v(" With "),
        _c("em", [_vm._v("for")]),
      ]),
      _vm._v(" "),
      _c("blockquote", [
        _c("p", [
          _c("em", [
            _vm._v("Exercise is "),
            _c("strong", [_vm._v("good for")]),
            _vm._v(" you."),
            _c("br"),
            _vm._v("\nStress is "),
            _c("strong", [_vm._v("bad for")]),
            _vm._v(" you."),
            _c("br"),
            _vm._v("\nThe town is "),
            _c("strong", [_vm._v("famous for")]),
            _vm._v(" its cheese."),
            _c("br"),
            _vm._v("\nI'm "),
            _c("strong", [_vm._v("responsible for")]),
            _vm._v(" the financial side of the business."),
          ]),
        ]),
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "with-in" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#with-in" } }, [
          _vm._v("#"),
        ]),
        _vm._v(" With "),
        _c("em", [_vm._v("in")]),
      ]),
      _vm._v(" "),
      _c("blockquote", [
        _c("p", [
          _c("em", [
            _vm._v("She's "),
            _c("strong", [_vm._v("interested in")]),
            _vm._v(" the project."),
            _c("br"),
            _vm._v("\nThey want someone who's "),
            _c("strong", [_vm._v("experienced in")]),
            _vm._v(" design."),
            _c("br"),
            _vm._v("\nI didn't want to get "),
            _c("strong", [_vm._v("involved in")]),
            _vm._v(" the argument."),
          ]),
        ]),
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "adjectives-ending-in-ed-and-ing" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#adjectives-ending-in-ed-and-ing" },
          },
          [_vm._v("#")]
        ),
        _vm._v(" 2️⃣ Adjectives ending in '-ed' and '-ing'"),
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("'-ed' mean that any life feel, like: My cat feel execting."),
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("'-ing' mean that describing objective let people feel"),
        ]),
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "articles-a-an-the" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#articles-a-an-the" },
          },
          [_vm._v("#")]
        ),
        _vm._v(" 3️⃣&4️⃣. Articles: 'a', 'an', 'the'"),
      ]),
      _vm._v(" "),
      _c("p", [_c("code", [_vm._v("mistake")])]),
      _vm._v(" "),
      _c("ol", [
        _c("li", [
          _vm._v("Is there "),
          _c("strong", [_vm._v("a")]),
          _vm._v(" university where you live?"),
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("I can take the children to school today.")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "She was born in Japan, but she went to  university in the Bahamas. Because she was a student."
          ),
        ]),
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "jobs" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#jobs" } }, [
          _vm._v("#"),
        ]),
        _vm._v(" Jobs"),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("When we say what people's jobs are, we usually use "),
        _c("em", [_vm._v("a")]),
        _vm._v("/"),
        _c("em", [_vm._v("an")]),
        _vm._v("."),
      ]),
      _vm._v(" "),
      _c("blockquote", [
        _c("p", [
          _c("em", [
            _vm._v("He's "),
            _c("strong", [_vm._v("an")]),
            _vm._v(" architect."),
            _c("br"),
            _vm._v("\nShe's "),
            _c("strong", [_vm._v("a")]),
            _vm._v(" scientist."),
            _c("br"),
            _vm._v("\nMy grandmother was "),
            _c("strong", [_vm._v("a")]),
            _vm._v(" teacher."),
          ]),
        ]),
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "common-phrases" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#common-phrases" } },
          [_vm._v("#")]
        ),
        _vm._v(" Common phrases"),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("We don't usually use an article in expressions with "),
        _c("em", [_vm._v("bed")]),
        _vm._v(", "),
        _c("em", [_vm._v("work")]),
        _vm._v(" and "),
        _c("em", [_vm._v("home")]),
        _vm._v("."),
      ]),
      _vm._v(" "),
      _c("blockquote", [
        _c("p", [
          _c("em", [
            _vm._v("go to bed / be in bed"),
            _c("br"),
            _vm._v("\ngo to work / be at work / start work / finish work"),
            _c("br"),
            _vm._v("\ngo home / be at home / get home / stay at home"),
          ]),
        ]),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("We also don't normally use an article in expressions with "),
        _c("em", [_vm._v("school")]),
        _vm._v(", "),
        _c("em", [_vm._v("university")]),
        _vm._v(", "),
        _c("em", [_vm._v("prison")]),
        _vm._v(" and "),
        _c("em", [_vm._v("hospital")]),
        _vm._v("."),
      ]),
      _vm._v(" "),
      _c("blockquote", [
        _c("p", [
          _c("em", [
            _vm._v("start school / go to school / be at school"),
            _c("br"),
            _vm._v("\ngo to university / be at university"),
            _c("br"),
            _vm._v("\nbe sent to prison / go to prison / be in prison"),
            _c("br"),
            _vm._v("\ngo to hospital / be in hospital"),
          ]),
        ]),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("But we usually use "),
        _c("em", [_vm._v("the")]),
        _vm._v(
          " if someone is just visiting the place, and not there as a student/prisoner/patient, etc."
        ),
      ]),
      _vm._v(" "),
      _c("blockquote", [
        _c("p", [
          _c("em", [
            _vm._v("My son has started "),
            _c("strong", [_vm._v("school")]),
            _vm._v(" now. I went to "),
            _c("strong", [_vm._v("the school")]),
            _vm._v(" to meet his teacher."),
            _c("br"),
            _vm._v("\nI went to "),
            _c("strong", [_vm._v("the prison")]),
            _vm._v(" a lot when I was a social worker."),
            _c("br"),
            _vm._v("\nI'm at "),
            _c("strong", [_vm._v("the hospital")]),
            _vm._v(". My sister has just had a baby."),
          ]),
        ]),
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "place-names" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#place-names" } },
          [_vm._v("#")]
        ),
        _vm._v(" Place names"),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "We don't normally use an article for continents, most countries, cities, towns, lakes, mountains or universities. So, we say:"
        ),
      ]),
      _vm._v(" "),
      _c("blockquote", [
        _c("p", [
          _c("em", [
            _vm._v("Africa, Asia, Europe"),
            _c("br"),
            _vm._v("\nIndia, Ghana, Peru, Denmark"),
            _c("br"),
            _vm._v("\nAddis Ababa, Hanoi, New York, Moscow"),
            _c("br"),
            _vm._v("\nLake Victoria, Lake Superior, Lake Tanganyika"),
            _c("br"),
            _vm._v("\nMount Everest, Mount Kilimanjaro, Mount Elbrus"),
            _c("br"),
            _vm._v(
              "\nCardiff University, Harvard University, Manchester University"
            ),
          ]),
        ]),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("Some countries are different. Country names with "),
        _c("em", [_vm._v("United")]),
        _vm._v(" have "),
        _c("em", [_vm._v("the")]),
        _vm._v(
          ". There are other countries which are exceptions too. So, we say:"
        ),
      ]),
      _vm._v(" "),
      _c("blockquote", [
        _c("p", [
          _c("em", [
            _vm._v(
              "the United Arab Emirates, the United Kingdom, the United States of America"
            ),
            _c("br"),
            _vm._v("\nthe Bahamas, the Gambia"),
          ]),
        ]),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("Seas and oceans, mountain ranges and rivers have "),
        _c("em", [_vm._v("the")]),
        _vm._v(":"),
      ]),
      _vm._v(" "),
      _c("blockquote", [
        _c("p", [
          _c("em", [
            _vm._v("the Atlantic, the Pacific, the Mediterranean"),
            _c("br"),
            _vm._v("\nthe Andes, the Himalayas, the Alps"),
            _c("br"),
            _vm._v("\nthe Nile, the Amazon, the Yangtze"),
          ]),
        ]),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("Universities with "),
        _c("em", [_vm._v("of")]),
        _vm._v(" in the title also have "),
        _c("em", [_vm._v("the")]),
        _vm._v(":"),
      ]),
      _vm._v(" "),
      _c("blockquote", [
        _c("p", [
          _c("em", [
            _vm._v(
              "the University of Cape Town, the University of Delhi, the University of Tokyo"
            ),
          ]),
        ]),
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "comparative-adjectives" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#comparative-adjectives" },
          },
          [_vm._v("#")]
        ),
        _vm._v(" 5️⃣ Comparative adjectives"),
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "custom-block note" }, [
        _c("p", { staticClass: "custom-block-title" }, [_vm._v("mistake")]),
        _vm._v(" "),
        _c("ol", [
          _c("li", [
            _vm._v("I like to go to work early because the bus is "),
            _c("strong", [_vm._v("more crowded")]),
            _vm._v(" after 8."),
          ]),
        ]),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("Exception: You can either add "),
        _c("em", [_vm._v("-er")]),
        _vm._v("/"),
        _c("em", [_vm._v("-r")]),
        _vm._v(" or use "),
        _c("em", [_vm._v("more")]),
        _vm._v(" with some two-syllable adjectives, such as "),
        _c("em", [_vm._v("common")]),
        _vm._v(", "),
        _c("em", [_vm._v("cruel")]),
        _vm._v(", "),
        _c("em", [_vm._v("gentle")]),
        _vm._v(", "),
        _c("em", [_vm._v("handsome")]),
        _vm._v(", "),
        _c("em", [_vm._v("likely")]),
        _vm._v(", "),
        _c("em", [_vm._v("narrow")]),
        _vm._v(", "),
        _c("em", [_vm._v("pleasant")]),
        _vm._v(", "),
        _c("em", [_vm._v("polite")]),
        _vm._v(", "),
        _c("em", [_vm._v("simple")]),
        _vm._v(" and "),
        _c("em", [_vm._v("stupid")]),
        _vm._v("."),
      ]),
      _vm._v(" "),
      _c("blockquote", [
        _c("p", [
          _c("em", [_vm._v("I think life in the countryside is")]),
          _vm._v(" *"),
          _c("strong", [_vm._v("simpler*")]),
          _vm._v(" "),
          _c("em", [_vm._v("than in the city.")]),
          _c("br"),
          _vm._v(" "),
          _c("em", [_vm._v("It's")]),
          _vm._v(" *"),
          _c("strong", [_vm._v("more simple*")]),
          _vm._v(" "),
          _c("em", [
            _vm._v("to live in the city because everything you need is there."),
          ]),
        ]),
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "infinitive-of-purpose" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#infinitive-of-purpose" },
          },
          [_vm._v("#")]
        ),
        _vm._v(" 6️⃣ Infinitive of purpose"),
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "custom-block note" }, [
        _c("p", { staticClass: "custom-block-title" }, [_vm._v("mistake")]),
        _vm._v(" "),
        _c("ol", [
          _c("li", [
            _vm._v("He needs a new computer "),
            _c("strong", [_vm._v("to edit")]),
            _vm._v(" video."),
          ]),
        ]),
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "countable-and-uncountable" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#countable-and-uncountable" },
          },
          [_vm._v("#")]
        ),
        _vm._v(" 7️⃣ countable and uncountable"),
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "custom-block note" }, [
        _c("p", { staticClass: "custom-block-title" }, [_vm._v("mistake")]),
        _vm._v(" "),
        _c("ol", [
          _c("li", [
            _vm._v("We have "),
            _c("strong", [_vm._v("a  lot of")]),
            _vm._v(" chairs but we don't have "),
            _c("strong", [_vm._v("any")]),
            _vm._v(" tables."),
          ]),
          _vm._v(" "),
          _c("li", [
            _vm._v("There isn't "),
            _c("strong", [_vm._v("any")]),
            _vm._v(" toothpaste."),
          ]),
          _vm._v(" "),
          _c("li", [
            _vm._v("I bought "),
            _c("strong", [_vm._v("some")]),
            _vm._v(" new shoes"),
          ]),
          _vm._v(" "),
          _c("li", [
            _vm._v("We've got "),
            _c("strong", [_vm._v("some")]),
            _vm._v(" chicken."),
          ]),
          _vm._v(" "),
          _c("li", [
            _vm._v("How "),
            _c("strong", [_vm._v("many")]),
            _vm._v(" people"),
          ]),
          _vm._v(" "),
          _c("li", [
            _vm._v("Do you want "),
            _c("strong", [_vm._v("some/any")]),
            _vm._v(" chocolate"),
          ]),
        ]),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("uncountable nouns:  "),
        _c("strong", [_vm._v("furniture advice")]),
        _vm._v(" "),
        _c("strong", [_vm._v("luggage bread")]),
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "question" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#question" } },
          [_vm._v("#")]
        ),
        _vm._v(" question"),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("In questions we use "),
        _c("em", [_vm._v("a")]),
        _vm._v("/"),
        _c("em", [_vm._v("an")]),
        _vm._v(", "),
        _c("em", [_vm._v("any")]),
        _vm._v(" or "),
        _c("em", [_vm._v("how many")]),
        _vm._v(" with "),
        _c("strong", [_vm._v("countable")]),
        _vm._v(" nouns."),
      ]),
      _vm._v(" "),
      _c("blockquote", [
        _c("p", [
          _c("em", [
            _vm._v("Is there "),
            _c("strong", [_vm._v("an")]),
            _vm._v(" email address to write to?"),
            _c("br"),
            _vm._v("\nAre there "),
            _c("strong", [_vm._v("any")]),
            _vm._v(" chairs?"),
            _c("br"),
            _vm._v(" "),
            _c("strong", [_vm._v("How many")]),
            _vm._v(" chairs are there?"),
          ]),
        ]),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("And we use "),
        _c("em", [_vm._v("any")]),
        _vm._v(" or "),
        _c("em", [_vm._v("how much")]),
        _vm._v(" with "),
        _c("strong", [_vm._v("uncountable")]),
        _vm._v(" nouns."),
      ]),
      _vm._v(" "),
      _c("blockquote", [
        _c("p", [
          _c("em", [
            _vm._v("Is there "),
            _c("strong", [_vm._v("any")]),
            _vm._v(" sugar?"),
            _c("br"),
            _vm._v(" "),
            _c("strong", [_vm._v("How much")]),
            _vm._v(" orange juice is there?"),
          ]),
        ]),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("But when we are "),
        _c("strong", [_vm._v("offering")]),
        _vm._v(" something or "),
        _c("strong", [_vm._v("asking")]),
        _vm._v(" for something, we normally use "),
        _c("em", [_vm._v("some")]),
        _vm._v("."),
      ]),
      _vm._v(" "),
      _c("blockquote", [
        _c("p", [
          _c("em", [
            _vm._v("Do you want "),
            _c("strong", [_vm._v("some")]),
            _vm._v(" chocolate?"),
            _c("br"),
            _vm._v("\nCan we have "),
            _c("strong", [_vm._v("some")]),
            _vm._v(" more chairs, please?"),
          ]),
        ]),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("We also use "),
        _c("em", [_vm._v("some")]),
        _vm._v(" in a question when we think the answer will be '"),
        _c("strong", [_vm._v("yes")]),
        _vm._v("'."),
      ]),
      _vm._v(" "),
      _c("blockquote", [
        _c("p", [
          _c("em", [
            _vm._v("Have you got "),
            _c("strong", [_vm._v("some")]),
            _vm._v(" new glasses?"),
          ]),
        ]),
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "other-expressions-of-quantity" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#other-expressions-of-quantity" },
          },
          [_vm._v("#")]
        ),
        _vm._v(" Other expressions of quantity"),
      ]),
      _vm._v(" "),
      _c("p", [
        _c("em", [_vm._v("A lot of")]),
        _vm._v(" (or "),
        _c("em", [_vm._v("lots of")]),
        _vm._v(") can be used with both countable and uncountable nouns."),
      ]),
      _vm._v(" "),
      _c("blockquote", [
        _c("p", [
          _c("em", [
            _vm._v("There are "),
            _c("strong", [_vm._v("lots of")]),
            _vm._v(" apples on the trees."),
            _c("br"),
            _vm._v("\nThere is "),
            _c("strong", [_vm._v("a lot of")]),
            _vm._v(" snow on the road"),
          ]),
          _vm._v("."),
        ]),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("Notice that we don't usually use "),
        _c("em", [_vm._v("many")]),
        _vm._v(" or "),
        _c("em", [_vm._v("much")]),
        _vm._v(" in "),
        _c("strong", [_vm._v("positive")]),
        _vm._v(" sentences. We use "),
        _c("em", [_vm._v("a lot of")]),
        _vm._v(" instead."),
      ]),
      _vm._v(" "),
      _c("blockquote", [
        _c("p", [
          _c("em", [
            _vm._v("They have "),
            _c("strong", [_vm._v("a lot of")]),
            _vm._v(" money."),
          ]),
        ]),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("However, in "),
        _c("strong", [_vm._v("negative")]),
        _vm._v(" sentences we use "),
        _c("em", [_vm._v("not many")]),
        _vm._v(" with countable nouns and "),
        _c("em", [_vm._v("not much")]),
        _vm._v(" with uncountable nouns."),
      ]),
      _vm._v(" "),
      _c("blockquote", [
        _c("p", [
          _c("em", [
            _vm._v("There are a lot of carrots but there are"),
            _c("strong", [_vm._v("n't many")]),
            _vm._v(" potatoes."),
            _c("br"),
            _vm._v("\nThere's lots of juice but there is"),
            _c("strong", [_vm._v("n't much")]),
            _vm._v(" water."),
          ]),
        ]),
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "past-continuous-and-past-simple" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#past-continuous-and-past-simple" },
          },
          [_vm._v("#")]
        ),
        _vm._v(" 8️⃣ Past continuous and past simple"),
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "custom-block note" }, [
        _c("p", { staticClass: "custom-block-title" }, [_vm._v("mistake")]),
        _vm._v(" "),
        _c("ol", [
          _c("li", [
            _vm._v("I "),
            _c("strong", [_vm._v("started")]),
            _vm._v(" my new job yesterday."),
          ]),
          _vm._v(" "),
          _c("li", [
            _vm._v("They "),
            _c("strong", [_vm._v("were already closing")]),
            _vm._v(
              " the shop when I got there, so I couldn't go in and buy anything."
            ),
          ]),
          _vm._v(" "),
          _c("li", [
            _vm._v("This time last year I "),
            _c("strong", [_vm._v("was studying")]),
            _vm._v(" at university."),
          ]),
          _vm._v(" "),
          _c("li", [
            _vm._v("At 6 p.m. yesterday it "),
            _c("strong", [_vm._v("was already getting")]),
            _vm._v(" dark."),
          ]),
          _vm._v(" "),
          _c("li", [
            _vm._v("I saw you driving down Green Street yesterday! Where "),
            _c("strong", [_vm._v("were you going")]),
            _vm._v(" ?"),
          ]),
          _vm._v(" "),
          _c("li", [_vm._v("When we saw the crime, we called the police.")]),
        ]),
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "past-continuous" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#past-continuous" } },
          [_vm._v("#")]
        ),
        _vm._v(" past continuous"),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("The past continuous shows us that the action "),
        _c("strong", [_vm._v("was already")]),
        _vm._v(" in progress at a certain time in the past."),
      ]),
      _vm._v(" "),
      _c("blockquote", [
        _c("p", [
          _c("em", [
            _vm._v("What were you doing at 8 p.m. last night? I was studying."),
          ]),
        ]),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("This means that I started studying b"),
        _c("strong", [_vm._v("efore 8 p.m. and I continued")]),
        _vm._v(" after 8 p.m."),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("The past continuous can also show that an activity was in "),
        _c("strong", [_vm._v("progress for some time")]),
        _vm._v(", not just for a moment."),
      ]),
      _vm._v(" "),
      _c("blockquote", [
        _c("p", [
          _c("em", [_vm._v("We were cleaning the house all morning.")]),
        ]),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("We make the past continuous with "),
        _c("em", [_vm._v("was")]),
        _vm._v(" or "),
        _c("em", [_vm._v("were")]),
        _vm._v(" and the -"),
        _c("em", [_vm._v("ing")]),
        _vm._v(" form of the verb."),
      ]),
      _vm._v(" "),
      _c("blockquote", [
        _c("p", [
          _c("em", [
            _vm._v("She couldn't come to the party. She was working."),
            _c("br"),
            _vm._v("\nThree years ago, we were living in my home town."),
            _c("br"),
            _vm._v(
              "\nI tried to give him some advice, but he wasn't listening."
            ),
            _c("br"),
            _vm._v("\nWhat were you doing this time last year?"),
          ]),
        ]),
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "past-continuous-and-past-simple-2" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#past-continuous-and-past-simple-2" },
          },
          [_vm._v("#")]
        ),
        _vm._v(" Past continuous and past simple"),
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _c("p", [
            _vm._v(
              "The past simple shows us that an action was in the past, not in the present."
            ),
          ]),
        ]),
        _vm._v(" "),
        _c("li", [
          _c("p", [
            _vm._v(
              "The past continuous shows us that the action was already in progress at a certain time in the past."
            ),
          ]),
        ]),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("When we use these two tenses together, it shows us that the "),
        _c("strong", [_vm._v("past simple")]),
        _vm._v(" action happened "),
        _c("strong", [_vm._v("in the middle of")]),
        _vm._v(" the past continuous action, while it was in progress."),
      ]),
      _vm._v(" "),
      _c("blockquote", [
        _c("p", [
          _c("em", [_vm._v("While I was studying, I suddenly felt sleepy.")]),
        ]),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("We often use these tenses to show an action "),
        _c("strong", [_vm._v("interrupting another action.")]),
      ]),
      _vm._v(" "),
      _c("blockquote", [
        _c("p", [
          _c("em", [
            _vm._v("I broke my leg when I was skiing."),
            _c("br"),
            _vm._v("\nAs I was going to work, I saw an old friend."),
            _c("br"),
            _vm._v("\nWe were watching television when the power went off."),
          ]),
        ]),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Can you see a difference in the meaning of these two sentences?"
        ),
      ]),
      _vm._v(" "),
      _c("blockquote", [
        _c("p", [
          _c("em", [
            _vm._v("When the guests arrived, Jane was cooking dinner."),
            _c("br"),
            _vm._v("\nWhen the guests arrived, Jane cooked dinner."),
          ]),
        ]),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "In the first one, Jane started cooking dinner before the guests arrived. We know that because it uses the past continuous. In the second sentence, the guests arrived first "
        ),
        _c("strong", [_vm._v("and then")]),
        _vm._v(" Jane started cooking."),
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "possessive-s" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#possessive-s" } },
          [_vm._v("#")]
        ),
        _vm._v(" 9️⃣ Possessive 's"),
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "custom-block note" }, [
        _c("p", { staticClass: "custom-block-title" }, [_vm._v("mistake")]),
        _vm._v(" "),
        _c("ol", [
          _c("li", [
            _vm._v("Sara's "),
            _c("strong", [_vm._v("parents'")]),
            _vm._v(" house is in Sydney. They live near the beach."),
          ]),
          _vm._v(" "),
          _c("li", [
            _vm._v("My best "),
            _c("strong", [_vm._v("friend's")]),
            _vm._v(
              " apartment is really expensive. I don't know how he can afford it."
            ),
          ]),
        ]),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("We often use possessive "),
        _c("em", [_vm._v("'s")]),
        _vm._v(" or "),
        _c("em", [_vm._v("s'")]),
        _vm._v(" when we talk about family and friends."),
      ]),
      _vm._v(" "),
      _c("blockquote", [
        _c("p", [
          _c("em", [_vm._v("Grandma and Grandpa are my mum")]),
          _vm._v("*'s** parents."),
          _c("br"),
          _vm._v("\nMaria**'s** best friend is Juanita."),
          _c("br"),
          _vm._v("\nMy cousin"),
          _c("strong", [_vm._v("s'")]),
          _vm._v(" birthdays are both in January.*"),
        ]),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("It is possible to use more than one possessive in a phrase."),
      ]),
      _vm._v(" "),
      _c("blockquote", [
        _c("p", [
          _c("em", [_vm._v("We had lunch at my friend")]),
          _vm._v("*'s** father'"),
          _c("strong", [_vm._v("s")]),
          _vm._v(" house.*"),
        ]),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("If a name or noun ends in "),
        _c("em", [_vm._v("s")]),
        _vm._v(", we can add either "),
        _c("em", [_vm._v("'")]),
        _vm._v(" or "),
        _c("em", [_vm._v("'s")]),
        _vm._v(". The pronunciation can be "),
        _c("em", [_vm._v("/zɪz/")]),
        _vm._v(" or "),
        _c("em", [_vm._v("/sɪz/")]),
        _vm._v("."),
      ]),
      _vm._v(" "),
      _c("blockquote", [
        _c("p", [
          _c("em", [_vm._v("Is that James")]),
          _vm._v("*'** bag?"),
          _c("br"),
          _vm._v("\nThat's my boss**'s** office.*"),
        ]),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("If the thing belongs to "),
        _c("strong", [_vm._v("more than one person")]),
        _vm._v(", we usually add "),
        _c("em", [_vm._v("'")]),
        _vm._v(" after the "),
        _c("em", [_vm._v("s")]),
        _vm._v(" of the plural noun."),
      ]),
      _vm._v(" "),
      _c("blockquote", [
        _c("p", [
          _c("em", [
            _vm._v("Our friend"),
            _c("strong", [_vm._v("s'")]),
            _vm._v(" house is in the mountains. They moved there last year."),
            _c("br"),
            _vm._v("\nMy grandparent"),
            _c("strong", [_vm._v("s'")]),
            _vm._v(" dog is called Bertie."),
            _c("br"),
            _vm._v("\nThe twin"),
            _c("strong", [_vm._v("s'")]),
            _vm._v(" school is closed today."),
          ]),
        ]),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("If the plural noun is irregular and doesn't end in "),
        _c("em", [_vm._v("s")]),
        _vm._v(", we add "),
        _c("em", [_vm._v("'s")]),
        _vm._v("."),
      ]),
      _vm._v(" "),
      _c("blockquote", [
        _c("p", [
          _c("em", [_vm._v("This is our children")]),
          _vm._v("*'s** school."),
          _c("br"),
          _vm._v("\nThe women**'s** clothes are on the second floor."),
          _c("br"),
          _vm._v("\nA lot of people**'s** eyes are brown.*"),
        ]),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "If something belongs to more than one person, and we give a list of names, the "
        ),
        _c("em", [_vm._v("'s")]),
        _vm._v(" comes after the last name in the list."),
      ]),
      _vm._v(" "),
      _c("blockquote", [
        _c("p", [
          _c("em", [_vm._v("Liam is Anne and Gary")]),
          _vm._v("*'s** son.*"),
        ]),
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "prepositions-of-place-in-on-at" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#prepositions-of-place-in-on-at" },
          },
          [_vm._v("#")]
        ),
        _vm._v(" 1️⃣0️⃣ Prepositions of place – 'in', 'on', 'at'"),
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "custom-block note" }, [
        _c("p", { staticClass: "custom-block-title" }, [_vm._v("Mistake")]),
        _vm._v(" "),
        _c("ol", [
          _c("li", [
            _vm._v("Buckingham Palace is "),
            _c("strong", [_vm._v("in")]),
            _vm._v(" London."),
          ]),
          _vm._v(" "),
          _c("li", [
            _vm._v("They have lots of pictures "),
            _c("strong", [_vm._v("on")]),
            _vm._v(" their fridge."),
          ]),
          _vm._v(" "),
          _c("li", [
            _vm._v("Last summer we stayed in a cabin "),
            _c("strong", [_vm._v("on")]),
            _vm._v(" a lake."),
          ]),
          _vm._v(" "),
          _c("li", [
            _vm._v("My office is "),
            _c("strong", [_vm._v("on")]),
            _vm._v(" the 20th floor, so I take the lift."),
          ]),
        ]),
      ]),
      _vm._v(" "),
      _c("p", [
        _c("code", [_vm._v("in")]),
        _vm._v("  inside a bigger space AND physical locations"),
      ]),
      _vm._v(" "),
      _c("p", [
        _c("em", [
          _c("strong", [_vm._v("in")]),
          _vm._v(" the world"),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("in")]),
          _vm._v(" water / the sea / a river / a lake / a pool"),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("in")]),
          _vm._v(" the mountains / the countryside / a valley / the forest"),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("in")]),
          _vm._v(" a car / a taxi"),
        ]),
      ]),
      _vm._v(" "),
      _c("p", [_c("code", [_vm._v("on")])]),
      _vm._v(" "),
      _c("ol", [
        _c("li", [
          _c("p", [
            _c("em", [_vm._v("on")]),
            _vm._v(" for some types of public transport"),
          ]),
        ]),
        _vm._v(" "),
        _c("li", [
          _c("p", [
            _vm._v("We also use "),
            _c("em", [_vm._v("on")]),
            _vm._v(
              " for lines (including rivers, borders, streets, etc.) and islands."
            ),
          ]),
        ]),
      ]),
      _vm._v(" "),
      _c("blockquote", [
        _c("p", [
          _c("em", [
            _vm._v("London is "),
            _c("strong", [_vm._v("on")]),
            _vm._v(" the River Thames."),
            _c("br"),
            _vm._v("\nThe Pyrenees are "),
            _c("strong", [_vm._v("on")]),
            _vm._v(" the border of Spain and France."),
            _c("br"),
            _vm._v("\nThere's a market "),
            _c("strong", [_vm._v("on")]),
            _vm._v(" James Street."),
            _c("br"),
            _vm._v("\nI'd love to live "),
            _c("strong", [_vm._v("on")]),
            _vm._v(" the Isle of Wight."),
          ]),
        ]),
      ]),
      _vm._v(" "),
      _c("p", [_c("code", [_vm._v("at")])]),
      _vm._v(" "),
      _c("ol", [
        _c("li", [
          _c("p", [
            _c("em", [_vm._v("at")]),
            _vm._v(" for addresses or exact positions"),
          ]),
        ]),
        _vm._v(" "),
        _c("li", [_c("p", [_vm._v("specific activity")])]),
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "prepositions-of-time-at-in-on" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#prepositions-of-time-at-in-on" },
          },
          [_vm._v("#")]
        ),
        _vm._v(" 1️⃣1️⃣ Prepositions of time: 'at', 'in', 'on'"),
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "custom-block note" }, [
        _c("p", { staticClass: "custom-block-title" }, [_vm._v("Mistake")]),
        _vm._v(" "),
        _c("ol", [
          _c("li", [
            _vm._v("My father was born  "),
            _c("code", [_vm._v("in")]),
            _vm._v("  the 20th century."),
          ]),
          _vm._v(" "),
          _c("li", [
            _vm._v("We all try to eat together at the table  "),
            _c("code", [_vm._v("at")]),
            _vm._v("  dinner time"),
          ]),
          _vm._v(" "),
          _c("li", [
            _vm._v("I often have to work  "),
            _c("code", [_vm._v("at")]),
            _vm._v("  the weekends."),
          ]),
          _vm._v(" "),
          _c("li", [
            _vm._v("My friend Peter and I speak  "),
            _c("code", [_vm._v("on")]),
            _vm._v("  the third Thursday of every month."),
          ]),
        ]),
      ]),
      _vm._v(" "),
      _c("p", [
        _c("code", [_vm._v("in")]),
        _vm._v("  the night = a specific time during the night"),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("e.g. She's a nurse and she works "),
        _c("strong", [_vm._v("at night")]),
        _vm._v("."),
      ]),
      _vm._v(" "),
      _c("p", [
        _c("code", [_vm._v("at")]),
        _vm._v("  night = all of the night"),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("e.g. The baby often wakes up "),
        _c("strong", [_vm._v("in the night")]),
        _vm._v("."),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("We use "),
        _c("em", [_vm._v("at")]),
        _vm._v(" with Christmas and other holidays that last several days."),
      ]),
      _vm._v(" "),
      _c("blockquote", [
        _c("p", [
          _vm._v("The weather is very cold here  "),
          _c("code", [_vm._v("at Christmas")]),
          _vm._v(" ."),
        ]),
        _vm._v(" "),
        _c("p", [
          _c("code", [_vm._v("At Chinese New Year")]),
          _vm._v(" , many people go home to their families."),
        ]),
      ]),
      _vm._v(" "),
      _c("p", [_c("code", [_vm._v("in")])]),
      _vm._v(" "),
      _c("p", [
        _vm._v("We usually use "),
        _c("em", [_vm._v("in")]),
        _vm._v(
          " with parts of the day and longer periods of time such as months, seasons and years."
        ),
      ]),
      _vm._v(" "),
      _c("p", [_c("code", [_vm._v("on")])]),
      _vm._v(" "),
      _c("p", [
        _vm._v("We usually use "),
        _c("em", [_vm._v("on")]),
        _vm._v(" with days and dates."),
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "present-simple" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#present-simple" } },
          [_vm._v("#")]
        ),
        _vm._v(" 1️⃣2️⃣ Present simple"),
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "custom-block note" }, [
        _c("p", { staticClass: "custom-block-title" }, [_vm._v("mistake")]),
        _vm._v(" "),
        _c("ol", [
          _c("li", [
            _vm._v("She work"),
            _c("strong", [_vm._v("s")]),
            _vm._v(" Incorrect in a hospital."),
          ]),
          _vm._v(" "),
          _c("li", [
            _c("strong", [_vm._v("Do")]),
            _vm._v(" Incorrect you drink Correct tea?"),
          ]),
          _vm._v(" "),
          _c("li", [
            _vm._v("Where "),
            _c("strong", [_vm._v("does")]),
            _vm._v(" Incorrect your friend "),
            _c("strong", [_vm._v("live")]),
          ]),
          _vm._v(" "),
          _c("li", [
            _vm._v("They "),
            _c("strong", [_vm._v("don't go")]),
            _vm._v(" Incorrect to the cinema very often."),
          ]),
          _vm._v(" "),
          _c("li", [
            _vm._v("What is "),
            _c("strong", [_vm._v("do")]),
            _vm._v(" you wears "),
            _c("strong", [_vm._v("wear")]),
            _vm._v(" for work?"),
          ]),
          _vm._v(" "),
          _c("li", [
            _c("strong", [_vm._v("Do")]),
            _vm._v(" we have Correct time for a coffee?"),
          ]),
        ]),
      ]),
      _vm._v(" "),
      _c("ol", [
        _c("li", [_c("p", [_vm._v("do regularly")])]),
        _vm._v(" "),
        _c("li", [_c("p", [_vm._v("generally true")])]),
        _vm._v(" "),
        _c("li", [
          _c("p", [
            _vm._v("add "),
            _c("em", [_vm._v("s")]),
            _vm._v(" or "),
            _c("em", [_vm._v("es")]),
            _vm._v(" for "),
            _c("em", [_vm._v("he")]),
            _vm._v(", "),
            _c("em", [_vm._v("she")]),
            _vm._v(" and "),
            _c("em", [_vm._v("it")]),
            _vm._v("."),
          ]),
        ]),
        _vm._v(" "),
        _c("li", [
          _c("p", [
            _vm._v("The "),
            _c("em", [_vm._v("he")]),
            _vm._v(", "),
            _c("em", [_vm._v("she")]),
            _vm._v(" and "),
            _c("em", [_vm._v("it")]),
            _vm._v(" forms for "),
            _c("em", [_vm._v("have")]),
            _vm._v(", "),
            _c("em", [_vm._v("do")]),
            _vm._v(" and "),
            _c("em", [_vm._v("go")]),
            _vm._v(" are irregular."),
          ]),
        ]),
      ]),
      _vm._v(" "),
      _c("blockquote", [
        _c("p", [
          _c("em", [_vm._v("He")]),
          _vm._v(" has "),
          _c("em", [
            _vm._v("a flat in the city centre."),
            _c("br"),
            _vm._v("\nShe"),
          ]),
          _vm._v(" does "),
          _c("em", [_vm._v("yoga on Tuesdays.")]),
          _c("br"),
          _vm._v(" "),
          _c("em", [_vm._v("My dog")]),
          _vm._v(" goes "),
          _c("em", [_vm._v("for a walk every morning.")]),
        ]),
      ]),
      _vm._v(" "),
      _c("ol", { attrs: { start: "5" } }, [
        _c("li", [
          _vm._v("For the negative, we use "),
          _c("em", [_vm._v("don't")]),
          _vm._v(" or "),
          _c("em", [_vm._v("doesn't")]),
          _vm._v("."),
        ]),
      ]),
      _vm._v(" "),
      _c("blockquote", [
        _c("p", [
          _c("em", [_vm._v("We")]),
          _vm._v(" don't eat "),
          _c("em", [_vm._v("meat."), _c("br"), _vm._v("\nShe")]),
          _vm._v(" doesn't have "),
          _c("em", [_vm._v("a lot of free time.")]),
        ]),
      ]),
      _vm._v(" "),
      _c("ol", { attrs: { start: "6" } }, [
        _c("li", [
          _vm._v("For questions, we use "),
          _c("em", [_vm._v("do")]),
          _vm._v(" or "),
          _c("em", [_vm._v("does.")]),
        ]),
      ]),
      _vm._v(" "),
      _c("blockquote", [
        _c("p", [
          _vm._v("Do you "),
          _c("em", [_vm._v("watch a lot of films?")]),
          _c("br"),
          _vm._v("\nDoes he "),
          _c("em", [_vm._v("speak English?")]),
        ]),
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "present-simple-have-got" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#present-simple-have-got" },
          },
          [_vm._v("#")]
        ),
        _vm._v(" 1️⃣3️⃣ Present simple: 'have got'"),
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "custom-block note" }, [
        _c("p", { staticClass: "custom-block-title" }, [_vm._v("MISTAKE")]),
        _vm._v(" "),
        _c("ol", [
          _c("li", [
            _vm._v("How many cousins "),
            _c("em", [_c("strong", [_vm._v("have you got")])]),
            _vm._v("?"),
          ]),
          _vm._v(" "),
          _c("li", [
            _c("strong", [_vm._v("Has")]),
            _vm._v(" he fo a new phone?"),
          ]),
          _vm._v(" "),
          _c("li", [
            _vm._v("My grandfather "),
            _c("em", [_c("strong", [_vm._v("'s")])]),
            _vm._v(" got a white beard."),
          ]),
        ]),
      ]),
      _vm._v(" "),
      _c("ol", [
        _c("li", [
          _c("p", [
            _c("em", [_vm._v("I/you/we/they")]),
            _vm._v(" + "),
            _c("em", [_vm._v("have got")]),
          ]),
        ]),
        _vm._v(" "),
        _c("li", [
          _c("p", [
            _c("em", [_vm._v("he/she/it")]),
            _vm._v(" + "),
            _c("em", [_vm._v("has got")]),
          ]),
        ]),
        _vm._v(" "),
        _c("li", [
          _c("p", [
            _c("em", [_vm._v("have got")]),
            _vm._v(" more in speaking and "),
            _c("em", [_vm._v("have")]),
            _vm._v(" more in writing"),
          ]),
        ]),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("We can use "),
        _c("em", [_vm._v("have/has got")]),
        _vm._v(" to talk about appearance, "),
        _c("strong", [_vm._v("family and friends or possessions")]),
        _vm._v(". We often contract the verb, especially when we're speaking."),
      ]),
      _vm._v(" "),
      _c("blockquote", [
        _c("p", [
          _c("em", [
            _vm._v("I "),
            _c("strong", [_vm._v("have got")]),
            _vm._v(" brown hair. = I"),
          ]),
          _vm._v("*'ve got** brown hair."),
          _c("br"),
          _vm._v("\nMy sister "),
          _c("strong", [_vm._v("has got")]),
          _vm._v(" long hair. = My sister**'s got** long hair."),
          _c("br"),
          _vm._v("\nHe "),
          _c("strong", [_vm._v("has not got")]),
          _vm._v(" many friends. = He "),
          _c("strong", [_vm._v("hasn't got")]),
          _vm._v(" many friends."),
          _c("br"),
          _vm._v("\nThey "),
          _c("strong", [_vm._v("have got")]),
          _vm._v(" a new car. = They**'ve got** a new car.*"),
        ]),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("We can also use "),
        _c("em", [_vm._v("have/has got")]),
        _vm._v(" for timetabled "),
        _c("strong", [_vm._v("events, illnesses or abstract things")]),
        _vm._v("."),
      ]),
      _vm._v(" "),
      _c("blockquote", [
        _c("p", [
          _c("em", [_vm._v("They")]),
          _vm._v("*'ve got** basketball practice this evening."),
          _c("br"),
          _vm._v("\nHe**'s got** a terrible cold."),
          _c("br"),
          _vm._v("\nI**'ve got** a good idea!*"),
        ]),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("🅰️ "),
        _c("em", [_vm._v("Have/has got")]),
        _vm._v(" is only used in the present tense. For the past, use "),
        _c("em", [_vm._v("had")]),
        _vm._v(" without "),
        _c("em", [_vm._v("got")]),
        _vm._v("."),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("问问题时："),
        _c("em", [_vm._v("have/has")]),
        _vm._v(" + subject + "),
        _c("em", [_vm._v("got")]),
        _vm._v("."),
      ]),
      _vm._v(" "),
      _c("blockquote", [
        _c("p", [
          _c("em", [
            _c("strong", [_vm._v("Have you got")]),
            _vm._v(" a big house?"),
            _c("br"),
            _vm._v("\nHow many rooms "),
            _c("strong", [_vm._v("has it got")]),
            _vm._v("?"),
          ]),
        ]),
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("回答问题时： short answers.")]),
      _vm._v(" "),
      _c("blockquote", [
        _c("p", [
          _c("em", [
            _vm._v("Have you got a new job? "),
            _c("strong", [_vm._v("No, I haven't.")]),
            _c("br"),
            _vm._v("\nHas she got a meeting this morning? "),
            _c("strong", [_vm._v("Yes, she has.")]),
          ]),
        ]),
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "custom-block tip" }, [
        _c("p", { staticClass: "custom-block-title" }, [_vm._v("提示")]),
        _vm._v(" "),
        _c("p", [_vm._v("He**'s** 这里的's 是 has 的简写")]),
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "present-simple-to-be" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#present-simple-to-be" },
          },
          [_vm._v("#")]
        ),
        _vm._v(" 1️⃣4️⃣ Present simple: 'to be'"),
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "custom-block note" }, [
        _c("p", { staticClass: "custom-block-title" }, [_vm._v("MISTAKE")]),
        _vm._v(" "),
        _c("ol", [
          _c("li", [
            _c("strong", [_vm._v("Is your")]),
            _vm._v(" job interesting"),
          ]),
          _vm._v(" "),
          _c("li", [_c("strong", [_vm._v("Is")]), _vm._v(" that a good book")]),
        ]),
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("⚠️ She is not = She's")]),
      _vm._v(" "),
      _c("ol", [
        _c("li", [
          _c("em", [_vm._v("She")]),
          _vm._v(" "),
          _c("em", [
            _c("strong", [_vm._v("is not*")]),
            _vm._v(" "),
            _c("em", [_vm._v("a student. = She's not*")]),
          ]),
          _vm._v(" "),
          _c("em", [_vm._v("a student. = She")]),
          _vm._v(" *"),
          _c("strong", [_vm._v("isn't*")]),
          _vm._v(" "),
          _c("em", [_vm._v("a student.")]),
        ]),
        _vm._v(" "),
        _c("li", [
          _c("em", [_vm._v("Money")]),
          _vm._v(" "),
          _c("em", [
            _c("strong", [_vm._v("is not*")]),
            _vm._v(" "),
            _c("em", [_vm._v("important. = Money's not*")]),
          ]),
          _vm._v(" "),
          _c("em", [_vm._v("important. = Money")]),
          _vm._v(" *"),
          _c("strong", [_vm._v("isn't*")]),
          _vm._v(" "),
          _c("em", [_vm._v("important.")]),
        ]),
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "quantifiers-few-a-few-little-and-a-bit-of" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#quantifiers-few-a-few-little-and-a-bit-of" },
          },
          [_vm._v("#")]
        ),
        _vm._v(" 1️⃣5️⃣ Quantifiers: 'few', 'a few', 'little' and 'a bit of'"),
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "custom-block tip" }, [
        _c("p", { staticClass: "custom-block-title" }, [_vm._v("提示")]),
        _vm._v(" "),
        _c("ol", [
          _c("li", [
            _c("em", [_vm._v("a bit of")]),
            _vm._v(" or "),
            _c("em", [_vm._v("a little")]),
            _vm._v(" with uncountable nouns"),
          ]),
        ]),
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "question-forms" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#question-forms" } },
          [_vm._v("#")]
        ),
        _vm._v(" 1️⃣6️⃣ Question forms"),
      ]),
      _vm._v(" "),
      _c("p", [_c("code", [_vm._v("list or exists")])]),
      _vm._v(" "),
      _c("ol", [
        _c("li", [
          _c("p", [
            _vm._v("We use "),
            _c("em", [_vm._v("there is")]),
            _vm._v(" to say that something "),
            _c("strong", [_vm._v("exists or is in a place")]),
            _vm._v("."),
          ]),
        ]),
        _vm._v(" "),
        _c("li", [
          _c("p", [
            _vm._v("speaking informally and "),
            _c("strong", [_vm._v("make a list")]),
            _vm._v(" of things, we often use "),
            _c("em", [_vm._v("there is")]),
          ]),
        ]),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("*"),
        _c("strong", [_vm._v("There is*")]),
        _vm._v(" "),
        _c("em", [_vm._v("a bridge in the park.")]),
      ]),
      _vm._v(" "),
      _c("p", [
        _c("em", [
          _vm._v("There's a café, a supermarket and a bus stop on my street."),
        ]),
      ]),
      _vm._v(" "),
      _c("p", [_c("code", [_vm._v("negative")])]),
      _vm._v(" "),
      _c("p", [
        _c("em", [_vm._v("there isn't")]),
        _vm._v(" or "),
        _c("em", [_vm._v("there's not")]),
        _vm._v(" (= "),
        _c("em", [_vm._v("there is not")]),
        _vm._v(")"),
      ]),
      _vm._v(" "),
      _c("p", [
        _c("em", [_vm._v("there aren't")]),
        _vm._v(" (= "),
        _c("em", [_vm._v("there are not")]),
        _vm._v(")"),
      ]),
      _vm._v(" "),
      _c("p", [_c("code", [_vm._v("singular or plural")])]),
      _vm._v(" "),
      _c("p", [
        _c("em", [_vm._v("there isn't a")]),
        _vm._v(" + singular noun, "),
        _c("em", [_vm._v("there isn't any")]),
        _vm._v(" + uncountable noun"),
      ]),
      _vm._v(" "),
      _c("p", [
        _c("em", [_vm._v("there aren't any")]),
        _vm._v(" + plural noun."),
      ]),
      _vm._v(" "),
      _c("p", [
        _c("em", [_vm._v("there is no")]),
        _vm._v(" + uncountable noun and "),
        _c("em", [_vm._v("there are no")]),
        _vm._v(" + plural"),
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "custom-block tip" }, [
        _c("p", { staticClass: "custom-block-title" }, [_vm._v("提示")]),
        _vm._v(" "),
        _c("ol", [
          _c("li", [_vm._v("没有 there're 简写")]),
          _vm._v(" "),
          _c("li", [
            _vm._v("There isn't any  "),
            _c("code", [_vm._v("any")]),
            _vm._v("  需要表示否定才会出现"),
          ]),
          _vm._v(" "),
          _c("li", [_vm._v("There's no 肯定就可以出现")]),
        ]),
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "verbs-followed-by-ing-or-infinitive" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#verbs-followed-by-ing-or-infinitive" },
          },
          [_vm._v("#")]
        ),
        _vm._v(" 1️⃣7️⃣ Verbs followed by '-ing' or infinitive"),
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "custom-block note" }, [
        _c("p", { staticClass: "custom-block-title" }, [_vm._v("MISTAKE")]),
        _vm._v(" "),
        _c("ol", [
          _c("li", [
            _vm._v("If you feel ill, avoid "),
            _c("strong", [_vm._v("doing")]),
            _vm._v(" any hard exercise."),
          ]),
          _vm._v(" "),
          _c("li", [
            _vm._v("I would like "),
            _c("strong", [_vm._v("to")]),
            _vm._v(" a reservation, please."),
          ]),
          _vm._v(" "),
          _c("li", [
            _vm._v("I suggest "),
            _c("strong", [_vm._v("visiting")]),
            _vm._v(" the museums while you're in London."),
          ]),
          _vm._v(" "),
          _c("li", [
            _vm._v("Do you mind "),
            _c("strong", [_vm._v("waiting")]),
            _vm._v(" for me a few minutes?"),
          ]),
          _vm._v(" "),
          _c("li", [
            _vm._v("I'm learning "),
            _c("strong", [_vm._v("to drive")]),
            _vm._v(" at the moment."),
          ]),
          _vm._v(" "),
          _c("li", [
            _vm._v("I'd like "),
            _c("strong", [_vm._v("to come")]),
            _vm._v(" to the party."),
          ]),
          _vm._v(" "),
          _c("li", [
            _vm._v("Now I've changed jobs, I miss "),
            _c("strong", [_vm._v("seeing")]),
            _vm._v(" my old colleagues."),
          ]),
        ]),
      ]),
      _vm._v(" "),
      _c("p", [_c("code", [_vm._v("-ing")])]),
      _vm._v(" "),
      _c("p", [
        _vm._v("When "),
        _c("em", [_vm._v("enjoy")]),
        _vm._v(", "),
        _c("em", [_vm._v("admit")]),
        _vm._v(" and "),
        _c("em", [_vm._v("mind")]),
        _vm._v(" are followed by another verb, it must be in the -"),
        _c("em", [_vm._v("ing")]),
        _vm._v(" form."),
      ]),
      _vm._v(" "),
      _c("blockquote", [
        _c("p", [
          _c("em", [
            _vm._v("I enjoy "),
            _c("strong", [_vm._v("travelling")]),
            _vm._v("."),
            _c("br"),
            _vm._v("\nHe admitted "),
            _c("strong", [_vm._v("stealing")]),
            _vm._v(" the necklace."),
            _c("br"),
            _vm._v("\nI don't mind "),
            _c("strong", [_vm._v("waiting")]),
            _vm._v(" if you're busy."),
          ]),
        ]),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("Other verbs in this group include "),
        _c("em", [_vm._v("avoid")]),
        _vm._v(", "),
        _c("em", [_vm._v("can't help")]),
        _vm._v(", "),
        _c("em", [_vm._v("consider")]),
        _vm._v(", "),
        _c("em", [_vm._v("dislike")]),
        _vm._v(", "),
        _c("em", [_vm._v("feel like")]),
        _vm._v(", "),
        _c("em", [_vm._v("finish")]),
        _vm._v(", "),
        _c("em", [_vm._v("give up")]),
        _vm._v(", "),
        _c("em", [_vm._v("miss")]),
        _vm._v(", "),
        _c("em", [_vm._v("practise")]),
        _vm._v(" and "),
        _c("em", [_vm._v("suggest")]),
        _vm._v("."),
      ]),
      _vm._v(" "),
      _c("p", [
        _c("em", [_vm._v("Like")]),
        _vm._v(" and "),
        _c("em", [_vm._v("love")]),
        _vm._v(" can be followed by the -"),
        _c("em", [_vm._v("ing")]),
        _vm._v(" form and the "),
        _c("em", [_vm._v("to")]),
        _vm._v(" + infinitive form. They are both correct."),
      ]),
      _vm._v(" "),
      _c("p", [_c("code", [_vm._v("to do")])]),
      _vm._v(" "),
      _c("p", [
        _vm._v("When "),
        _c("em", [_vm._v("want")]),
        _vm._v(", "),
        _c("em", [_vm._v("learn")]),
        _vm._v(" and "),
        _c("em", [_vm._v("offer")]),
        _vm._v(" are followed by another verb, it must be in the "),
        _c("em", [_vm._v("to")]),
        _vm._v(" + infinitive form."),
      ]),
      _vm._v(" "),
      _c("blockquote", [
        _c("p", [
          _c("em", [
            _vm._v("I want "),
            _c("strong", [_vm._v("to speak")]),
            _vm._v(" to the manager."),
            _c("br"),
            _vm._v("\nShe's learning "),
            _c("strong", [_vm._v("to play")]),
            _vm._v(" the piano."),
            _c("br"),
            _vm._v("\nHe offered "),
            _c("strong", [_vm._v("to help")]),
            _vm._v(" us wash up."),
          ]),
        ]),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("Other verbs in this group include "),
        _c("em", [_vm._v("afford")]),
        _vm._v(", "),
        _c("em", [_vm._v("agree")]),
        _vm._v(", "),
        _c("em", [_vm._v("ask")]),
        _vm._v(", "),
        _c("em", [_vm._v("choose")]),
        _vm._v(", "),
        _c("em", [_vm._v("decide")]),
        _vm._v(", "),
        _c("em", [_vm._v("expect")]),
        _vm._v(", "),
        _c("em", [_vm._v("hope")]),
        _vm._v(", "),
        _c("em", [_vm._v("plan")]),
        _vm._v(", "),
        _c("em", [_vm._v("prepare")]),
        _vm._v(", "),
        _c("em", [_vm._v("promise")]),
        _vm._v(", "),
        _c("em", [_vm._v("refuse")]),
        _vm._v(" and "),
        _c("em", [_vm._v("would like")]),
        _vm._v("."),
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "test" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#test" } }, [
          _vm._v("#"),
        ]),
        _vm._v(" TEST"),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("No "),
        _c("strong", [_vm._v("wonder")]),
        _vm._v(
          " Hannah is happy when you think how many prizes she has won recently."
        ),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("When you come to my house, "),
        _c("strong", [_vm._v("bring")]),
        _vm._v(" your camera with you."),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("Would you like some ice in your drink or not?  "),
        _c("strong", [_vm._v("I don't mind.")]),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("Do you know my brother Charlie?  "),
        _c("strong", [_vm._v("I don't think I do.")]),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("How long are you here for? "),
        _c("strong", [_vm._v("Till tomorrow.")]),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("There's someone at the door.  "),
        _c("strong", [_vm._v("Well, go and answer it then.")]),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("Shall we go out for pizza tonight? "),
        _c("strong", [_vm._v("I'm too tired.")]),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("Who gave you this book, Lucy? "),
        _c("strong", [_vm._v("I bought it.")]),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("I hope it doesn't rain. "),
        _c("strong", [_vm._v("So do I.")]),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("I'd like two tickets for tomorrow night. "),
        _c("strong", [_vm._v("I'll just check for you.")]),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("The company needs to "),
        _c("strong", [_vm._v("decide once")]),
        _vm._v("（一劳永逸） and for all what its position is on this point."),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("The singer ended the concert "),
        _c("strong", [_vm._v("with")]),
        _vm._v(" her most popular song."),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("Would you mind "),
        _c("strong", [_vm._v("giving")]),
        _vm._v(" these plates a "),
        _c("strong", [_vm._v("wipe")]),
        _vm._v(" (湿巾) before putting them in the cupboard?"),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("I was looking forward "),
        _c("strong", [_vm._v("to eating")]),
        _vm._v(" at the new restaurant, but it was closed."),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("It was only ten days ago "),
        _c("strong", [_vm._v("that")]),
        _vm._v(" she started her new job."),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("The shop didn't have the shoes I wanted, but they've "),
        _c("strong", [_vm._v("ordered")]),
        _vm._v(" a pair specially for me."),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("Have you got time to discuss your work now or are you "),
        _c("strong", [_vm._v("about")]),
        _vm._v(" to leave?"),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("She came to live here "),
        _c("strong", [_vm._v("almost")]),
        _vm._v(" a month ago."),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("can "),
        _c("strong", [_vm._v("unfasten")]),
        _vm._v(" your seat belts"),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("I'd rather you "),
        _c("strong", [_vm._v("explained")]),
        _vm._v(" to her why we can't go."),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("When I realised I had dropped my gloves, I decided to "),
        _c("strong", [_vm._v("retrace")]),
        _vm._v(" my steps."),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("Anne's house is somewhere in the "),
        _c("strong", [_vm._v("vicinity")]),
        _vm._v(" of the railway station."),
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "b1-b2-grammar-36" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#b1-b2-grammar-36" },
          },
          [_vm._v("#")]
        ),
        _vm._v(" (B1-B2) Grammar 36"),
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "adjectives-gradable-and-non-gradable" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#adjectives-gradable-and-non-gradable" },
          },
          [_vm._v("#")]
        ),
        _vm._v(" 1️⃣ Adjectives: gradable and non-gradable"),
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "custom-block note" }, [
        _c("p", { staticClass: "custom-block-title" }, [_vm._v("MISTAKE")]),
        _vm._v(" "),
        _c("ol", [
          _c("li", [
            _vm._v("I'm "),
            _c("em", [_c("strong", [_vm._v("very")])]),
            _vm._v(" late. I'm so sorry!"),
          ]),
          _vm._v(" "),
          _c("li", [
            _vm._v("The pasta was "),
            _c("em", [_vm._v("very")]),
            _vm._v(" tasty."),
          ]),
          _vm._v(" "),
          _c("li", [
            _vm._v("These shoes are "),
            _c("em", [_vm._v("a bit of")]),
            _vm._v(" small."),
          ]),
          _vm._v(" "),
          _c("li", [
            _vm._v("In real life, it was "),
            _c("em", [_vm._v("really")]),
            _vm._v(" tiny."),
          ]),
        ]),
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "gradable" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#gradable" } },
          [_vm._v("#")]
        ),
        _vm._v(" "),
        _c("code", [_vm._v("Gradable")]),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Here is a list of some common gradable adjectives and some modifiers that we can use with them."
        ),
      ]),
      _vm._v(" "),
      _c("table", [
        _c("thead", [
          _c("tr", [
            _c("th", [_c("strong", [_vm._v("Modifiers")])]),
            _vm._v(" "),
            _c("th", [_c("em", [_vm._v("a little/a bit")]), _vm._v(" →")]),
            _vm._v(" "),
            _c("th", [_c("em", [_vm._v("pretty/quite")]), _vm._v(" →")]),
            _vm._v(" "),
            _c("th", [_c("em", [_vm._v("really/very")]), _vm._v(" →")]),
            _vm._v(" "),
            _c("th", [_c("em", [_vm._v("extremely")])]),
          ]),
        ]),
        _vm._v(" "),
        _c("tbody", [
          _c("tr", [
            _c("td", [_c("strong", [_vm._v("Adjectives")])]),
            _vm._v(" "),
            _c("td", [
              _c("em", [_vm._v("angry")]),
              _vm._v(", "),
              _c("em", [_vm._v("big")]),
              _vm._v(", "),
              _c("em", [_vm._v("boring")]),
              _vm._v(", "),
              _c("em", [_vm._v("cheap, cold")]),
              _vm._v(", "),
              _c("em", [_vm._v("expensive")]),
              _vm._v(", "),
              _c("em", [_vm._v("frightening, funny")]),
              _vm._v(", "),
              _c("em", [_vm._v("hot")]),
              _vm._v(", "),
              _c("em", [_vm._v("interesting")]),
              _vm._v(", "),
              _c("em", [_vm._v("old")]),
              _vm._v(", "),
              _c("em", [_vm._v("pretty")]),
              _vm._v(", "),
              _c("em", [_vm._v("small")]),
              _vm._v(", "),
              _c("em", [_vm._v("tasty")]),
              _vm._v(", "),
              _c("em", [_vm._v("tired")]),
              _vm._v(", etc."),
            ]),
            _vm._v(" "),
            _c("td"),
            _vm._v(" "),
            _c("td"),
            _vm._v(" "),
            _c("td"),
          ]),
        ]),
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "non-gradable" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#non-gradable" } },
          [_vm._v("#")]
        ),
        _vm._v(" "),
        _c("code", [_vm._v("Non-gradable")]),
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("These adjectives describe absolute qualities.")]),
      _vm._v(" "),
      _c("table", [
        _c("thead", [
          _c("tr", [
            _c("th", [_c("strong", [_vm._v("Modifiers")])]),
            _vm._v(" "),
            _c("th", [_c("em", [_vm._v("absolutely/totally/completely")])]),
          ]),
        ]),
        _vm._v(" "),
        _c("tbody", [
          _c("tr", [
            _c("td", [_c("strong", [_vm._v("Adjectives")])]),
            _vm._v(" "),
            _c("td", [
              _c("em", [_vm._v("acceptable")]),
              _vm._v(", "),
              _c("em", [_vm._v("dead")]),
              _vm._v(", "),
              _c("em", [_vm._v("destroyed")]),
              _vm._v(", "),
              _c("em", [_vm._v("finished")]),
              _vm._v(", "),
              _c("em", [_vm._v("free")]),
              _vm._v(", "),
              _c("em", [_vm._v("impossible")]),
              _vm._v(", "),
              _c("em", [_vm._v("necessary")]),
              _vm._v(", "),
              _c("em", [_vm._v("perfect")]),
              _vm._v(", "),
              _c("em", [_vm._v("ruined")]),
              _vm._v(", "),
              _c("em", [_vm._v("unacceptable")]),
              _vm._v(", etc."),
            ]),
          ]),
        ]),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("Adjectives like "),
        _c("em", [_vm._v("amazing")]),
        _vm._v(", "),
        _c("em", [_vm._v("awful")]),
        _vm._v(" and "),
        _c("em", [_vm._v("boiling")]),
        _vm._v(
          " are also non-gradable. They already contain the idea of 'very' in their definitions."
        ),
      ]),
      _vm._v(" "),
      _c("table", [
        _c("thead", [
          _c("tr", [
            _c("th", [_c("strong", [_vm._v("Modifiers")])]),
            _vm._v(" "),
            _c("th", [_c("em", [_vm._v("absolutely/really")])]),
          ]),
        ]),
        _vm._v(" "),
        _c("tbody", [
          _c("tr", [
            _c("td", [_c("strong", [_vm._v("Adjectives")])]),
            _vm._v(" "),
            _c("td", [
              _c("em", [_vm._v("amazing, ancient")]),
              _vm._v(", "),
              _c("em", [_vm._v("awful")]),
              _vm._v(", "),
              _c("em", [_vm._v("boiling")]),
              _vm._v(", "),
              _c("em", [_vm._v("delicious")]),
              _vm._v(", "),
              _c("em", [_vm._v("enormous, excellent")]),
              _vm._v(", "),
              _c("em", [_vm._v("exhausted")]),
              _vm._v(", "),
              _c("em", [_vm._v("fascinating")]),
              _vm._v(", "),
              _c("em", [_vm._v("freezing")]),
              _vm._v(", "),
              _c("em", [_vm._v("gorgeous")]),
              _vm._v(", "),
              _c("em", [_vm._v("terrible")]),
              _vm._v(", "),
              _c("em", [_vm._v("terrifying")]),
              _vm._v(", "),
              _c("em", [_vm._v("tiny")]),
              _vm._v(", etc."),
            ]),
          ]),
        ]),
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "british-english-and-american-english" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#british-english-and-american-english" },
          },
          [_vm._v("#")]
        ),
        _vm._v(" 2️⃣ British English and American English"),
      ]),
      _vm._v(" "),
      _c("table", [
        _c("thead", [
          _c("tr", [
            _c("th", [_vm._v("British English")]),
            _vm._v(" "),
            _c("th", [_vm._v("American English")]),
          ]),
        ]),
        _vm._v(" "),
        _c("tbody", [
          _c("tr", [
            _c("td", [
              _c("em", [
                _vm._v("He isn't hungry. "),
                _c("br"),
                _vm._v("He has already had lunch.  "),
                _c("br"),
                _vm._v("Have you done your homework yet? "),
                _c("br"),
                _vm._v("Yes, I've just finished it."),
              ]),
            ]),
            _vm._v(" "),
            _c("td", [
              _c("em", [
                _vm._v("He isn't hungry. "),
                _c("br"),
                _vm._v("He already had lunch. "),
                _c("br"),
                _vm._v("Did you do your homework yet? "),
                _c("br"),
                _vm._v("Yes, I just finished it."),
              ]),
            ]),
          ]),
        ]),
      ]),
      _vm._v(" "),
      _c("table", [
        _c("thead", [
          _c("tr", [
            _c("th", [_vm._v("British English")]),
            _vm._v(" "),
            _c("th", [_vm._v("American English")]),
          ]),
        ]),
        _vm._v(" "),
        _c("tbody", [
          _c("tr", [
            _c("td", [
              _c("em", [
                _vm._v("It's hot in here. "),
                _c("br"),
                _vm._v("Shall I open the window? "),
                _c("br"),
                _vm._v("Shall we meet in the café at 5? "),
                _c("br"),
                _vm._v("Shall we try that again?"),
              ]),
            ]),
            _vm._v(" "),
            _c("td", [
              _c("em", [
                _vm._v("It's hot in here. Can I open the window? "),
                _c("br"),
                _vm._v("Do you want to meet in the café at 5? "),
                _c("br"),
                _vm._v("How about we try that again?"),
              ]),
            ]),
          ]),
        ]),
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "contractions" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#contractions" } },
          [_vm._v("#")]
        ),
        _vm._v(" 3️⃣ Contractions"),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "We use an apostrophe to show where there are missing letters in contractions."
        ),
      ]),
      _vm._v(" "),
      _c("blockquote", [
        _c("p", [
          _c("em", [_vm._v("It's raining.")]),
          _vm._v(" (It's = It is)"),
          _c("br"),
          _vm._v(" "),
          _c("em", [_vm._v("Don't worry, it won't rain.")]),
          _vm._v(" (Don't = Do not; won't = will not)"),
          _c("br"),
          _vm._v(" "),
          _c("em", [_vm._v("She can't drive because she's broken her leg.")]),
          _vm._v(" (can't = cannot; she's = she has)"),
          _c("br"),
          _vm._v(" "),
          _c("em", [_vm._v("I'd like a coffee, please.")]),
          _vm._v(" (I'd = I would)"),
          _c("br"),
          _vm._v(" "),
          _c("em", [_vm._v("You'll be fine.")]),
          _vm._v(" (You'll = You will)"),
        ]),
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "conditionals-third-and-mixed" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#conditionals-third-and-mixed" },
          },
          [_vm._v("#")]
        ),
        _vm._v(" ⚠️ 4️⃣  Conditionals: third and mixed"),
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "custom-block note" }, [
        _c("p", { staticClass: "custom-block-title" }, [_vm._v("PANIC")]),
        _vm._v(" "),
        _c("ol", [
          _c("li", [
            _vm._v("If my grandmother "),
            _c("strong", [_vm._v("were")]),
            _vm._v(" alive, she would have loved to see me graduate."),
          ]),
          _vm._v(" "),
          _c("li", [
            _vm._v("If you hadn't seen the car, it "),
            _c("strong", [_vm._v("would have hit")]),
            _vm._v(" us back there."),
          ]),
          _vm._v(" "),
          _c("li", [
            _vm._v("We "),
            _c("strong", [_vm._v("wouldn't be")]),
            _vm._v(" late if you hadn't taken such a long time getting ready."),
          ]),
          _vm._v(" "),
          _c("li", [
            _vm._v("If I "),
            _c("strong", [_vm._v("hadn't eaten")]),
            _vm._v(" so much cheese last night, I wouldn't feel terrible now."),
          ]),
          _vm._v(" "),
          _c("li", [
            _vm._v("I "),
            _c("strong", [_vm._v("would have bought")]),
            _vm._v(" a cake this morning if I'd known you were coming."),
          ]),
          _vm._v(" "),
          _c("li", [
            _vm._v("If he "),
            _c("strong", [_vm._v("had scored")]),
            _vm._v(" the penalty, we would have won Saturday's game."),
          ]),
          _vm._v(" "),
          _c("li", [
            _vm._v("You don't need to print your ticket as long as "),
            _c("strong", [_vm._v("you have")]),
            _vm._v(" the email."),
          ]),
        ]),
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "zero-conditionals" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#zero-conditionals" },
          },
          [_vm._v("#")]
        ),
        _vm._v(" "),
        _c("strong", [_vm._v("Zero Conditionals")]),
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "custom-block tip" }, [
        _c("p", { staticClass: "custom-block-title" }, [_vm._v("提示")]),
        _vm._v(" "),
        _c("p", [_vm._v("第 0 条件句用于表示一般性的事实，例如 法律与规则。")]),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "If I drink too much coffee, I can't sleep at night. 如果我咖啡喝多了，晚上就睡不着。"
        ),
        _c("br"),
        _vm._v("\nIce melts if you heat it. 冰会融化如果你加热它。"),
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "first-conditionals" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#first-conditionals" },
          },
          [_vm._v("#")]
        ),
        _vm._v(" "),
        _c("strong", [_vm._v("First Conditionals")]),
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "custom-block tip" }, [
        _c("p", { staticClass: "custom-block-title" }, [_vm._v("提示")]),
        _vm._v(" "),
        _c("p", [_vm._v("第一条件句用于表示 我们认为真实或可能的未来情况。")]),
        _vm._v(" "),
        _c("p", [_vm._v("主将从现")]),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "If it doesn't rain tomorrow, we'll go to the beach. 如果明天不下雨，我们就去海滩。"
        ),
        _c("br"),
        _vm._v(
          "\nArsenal will be top of the league if they win. 阿森纳将处在联赛第一，如果他们赢了。"
        ),
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "second-conditionals" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#second-conditionals" },
          },
          [_vm._v("#")]
        ),
        _vm._v(" "),
        _c("strong", [_vm._v("Second Conditionals")]),
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "custom-block tip" }, [
        _c("p", { staticClass: "custom-block-title" }, [_vm._v("提示")]),
        _vm._v(" "),
        _c("p", [
          _vm._v(
            "第二条件句用于描述一个想象中的现在或将来的情况，这个情况在现实中无法或很难实现。"
          ),
        ]),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "If we had a garden, we could have a cat. 如果我有个花园，我就可以养猫了。（我没有花园）"
        ),
        _c("br"),
        _vm._v(
          "\nIf I won a lot of money, I'd buy a big house in the country. 如果我有钱，我就可以买个大房子。（我没有钱）"
        ),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "The structure is usually: if + past simple >> + would + infinitive."
        ),
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("通常句型：if + 一般过去时 》+would + 动词原形")]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "third-conditional" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#third-conditional" },
          },
          [_vm._v("#")]
        ),
        _vm._v(" "),
        _c("strong", [_vm._v("Third conditional")]),
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "custom-block tip" }, [
        _c("p", { staticClass: "custom-block-title" }, [_vm._v("提示")]),
        _vm._v(" "),
        _c("p", [
          _vm._v(
            "第三条件句用于描述与过去不符的情况。表示想象一个与过去事实不同的情况及其所产生的结果。"
          ),
        ]),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "If I had understood the instructions properly, I would have passed the exam."
        ),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("如果（当时）我清楚的理解那些指令，我就能通过考试了。"),
        _c("br"),
        _vm._v(
          "\nWe wouldn't have got lost if my phone hadn't run out of battery."
        ),
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("如果（当时）我的手机电池没用完，我们就不会迷路了。")]),
      _vm._v(" "),
      _c("p", [
        _vm._v("第三条件句通常句型：if + 过去完成时 》 would have + 过去分词"),
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "混合条件句" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#混合条件句" } },
          [_vm._v("#")]
        ),
        _vm._v(" "),
        _c("strong", [_vm._v("混合条件句")]),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "混合条件句用于表示一个想象中的与过去的变化，对现在造成的影响，或一个现在的变化对过去的影响。"
        ),
      ]),
      _vm._v(" "),
      _c("p", [
        _c("strong", [_vm._v("1.")]),
        _vm._v(" "),
        _c("strong", [_vm._v("过去 / 现在")]),
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("这是一个想象中的过去的变化，对现在事实的影响。")]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "If I hadn't got the job in Tokyo, I wouldn't be with my current partner."
        ),
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("如果我没去东京，我将不会遇到我现在的伴侣。")]),
      _vm._v(" "),
      _c("p", [
        _vm._v("So the structure is: If + past perfect >> would + infinitive."),
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("句型为：if+ 过去完成时 》 would + 动词原形")]),
      _vm._v(" "),
      _c("p", [_c("strong", [_vm._v("2. 现在 / 过去")])]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "这是一个想象中的与现在情况不符的情况，意味着过去也和本来的过去不同。"
        ),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "It's really important. If it wasn't, I wouldn't have called you on your holiday."
        ),
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("这非常重要，如果不是的话，我就不会在你假期找你了。")]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "And the structure is: If + past simple >> would have + past participle."
        ),
      ]),
      _vm._v(" "),
      _c(
        "h3",
        { attrs: { id: "contrasting-ideas-although-despite-and-others" } },
        [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: { href: "#contrasting-ideas-although-despite-and-others" },
            },
            [_vm._v("#")]
          ),
          _vm._v(" 5️⃣ Contrasting ideas: 'although', 'despite' and others"),
        ]
      ),
      _vm._v(" "),
      _c("div", { staticClass: "custom-block note" }, [
        _c("p", { staticClass: "custom-block-title" }, [_vm._v("Important")]),
        _vm._v(" "),
        _c("p", [
          _vm._v("You told me ten times. I still forgot, "),
          _c("strong", [_vm._v("though")]),
          _vm._v("."),
        ]),
      ]),
      _vm._v(" "),
      _c("p", [_c("strong", [_vm._v("Although / Even though + sentence")])]),
      _vm._v(" "),
      _c("p", [
        _vm._v("Although we don't agree, I think she's a brilliant speaker."),
        _c("br"),
        _vm._v(
          "\nEven though we don't agree, I think she's a brilliant speaker."
        ),
      ]),
      _vm._v(" "),
      _c("p", [_c("strong", [_vm._v("In spite of / Despite + phrase")])]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "In spite of the law, people continue to use mobile phones while driving."
        ),
        _c("br"),
        _vm._v(
          "\nDespite the law, people continue to use mobile phones while driving."
        ),
      ]),
      _vm._v(" "),
      _c("p", [_c("strong", [_vm._v("though 句尾")])]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "It's illegal to use mobile phones while driving. People still do it, "
        ),
        _c("strong", [_vm._v("though")]),
        _vm._v("."),
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "different-uses-of-used-to" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#different-uses-of-used-to" },
          },
          [_vm._v("#")]
        ),
        _vm._v(" 6️⃣ Different uses of 'used to'"),
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "custom-block note" }, [
        _c("p", { staticClass: "custom-block-title" }, [_vm._v("MIXTAKE")]),
        _vm._v(" "),
        _c("ol", [
          _c("li", [
            _vm._v("I always hated the cold weather but I "),
            _c("strong", [_vm._v("got used to")]),
            _vm._v(" it when I lived in Russia."),
          ]),
          _vm._v(" "),
          _c("li", [
            _vm._v("We "),
            _c("strong", [_vm._v("didn't use to get")]),
            _vm._v(
              " much positive feedback about our old product, but the new formula is really successful."
            ),
          ]),
        ]),
      ]),
      _vm._v(" "),
      _c("p", [
        _c("code", [_vm._v("used to")]),
        _vm._v(
          "  there was a repeated action or state in the past which has now changed."
        ),
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("uesd to do")]),
      _vm._v(" "),
      _c("p", [
        _c("code", [_vm._v("be used to")]),
        _vm._v("  'be familiar with' or 'be accustomed to'. 熟悉与习惯"),
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("be used to doing / n")]),
      _vm._v(" "),
      _c("p", [
        _c("code", [_vm._v("get used to")]),
        _vm._v("  the process of becoming familiar with something. 熟悉事物的"),
        _c("strong", [_vm._v("过程")]),
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("get used to doing / n")]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "future-continuous-and-future-perfect" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#future-continuous-and-future-perfect" },
          },
          [_vm._v("#")]
        ),
        _vm._v(" 7️⃣😞 Future continuous and future perfect"),
      ]),
      _vm._v(" "),
      _c("p", [_c("code", [_vm._v("Future continuous")])]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("will be in progress at a "),
          _c("strong", [_vm._v("specific time")]),
          _vm._v(" in the future:"),
        ]),
      ]),
      _vm._v(" "),
      _c("blockquote", [
        _c("p", [
          _vm._v(
            "When you come out of school tomorrow, I'll be boarding a plane."
          ),
          _c("br"),
          _vm._v(
            "\nTry to call before 8 o'clock. After that, we'll be watching the match."
          ),
          _c("br"),
          _vm._v(
            "\nYou can visit us during the first week of July. I won't be working then."
          ),
        ]),
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("we see as "),
          _c("strong", [_vm._v("new, different or temporary")]),
          _vm._v(":"),
        ]),
      ]),
      _vm._v(" "),
      _c("blockquote", [
        _c("p", [
          _vm._v(
            "Today we're taking the bus but next week we'll be taking the train."
          ),
          _c("br"),
          _vm._v(
            "\nHe'll be staying with his parents for several months while his father is in recovery."
          ),
          _c("br"),
          _vm._v("\nWill you be starting work earlier with your new job?"),
        ]),
      ]),
      _vm._v(" "),
      _c("p", [_c("code", [_vm._v("Future perfect")])]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("will be completed before a specific time in the future"),
        ]),
      ]),
      _vm._v(" "),
      _c("blockquote", [
        _c("p", [
          _vm._v(
            "The guests are coming at 8 p.m. I'll have finished cooking by then."
          ),
          _c("br"),
          _vm._v("\nOn 9 October we'll have been married for 50 years."),
          _c("br"),
          _vm._v("\nWill you have gone to bed when I get back?"),
        ]),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("We can use phrases like "),
        _c("em", [_vm._v("by")]),
        _vm._v(" or "),
        _c("em", [_vm._v("by the time")]),
        _vm._v(" (meaning 'at some point "),
        _c("strong", [_vm._v("before")]),
        _vm._v("')"),
      ]),
      _vm._v(" "),
      _c("p", [
        _c("em", [_vm._v("in")]),
        _vm._v(
          " or in a day's time / in two months' time / in five years' time etc. (meaning '"
        ),
        _c("strong", [_vm._v("at the end of this period")]),
        _vm._v("')"),
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("at that time")]),
      _vm._v(" "),
      _c("blockquote", [
        _c("p", [
          _c("em", [
            _vm._v("I won't have written all the reports by next week."),
            _c("br"),
            _vm._v("\nBy the time we arrive, the kids will have gone to bed."),
            _c("br"),
            _vm._v(
              "\nI'll have finished in an hour and then we can watch a film."
            ),
            _c("br"),
            _vm._v(
              "\nIn three years' time, I'll have graduated from university."
            ),
          ]),
        ]),
      ]),
      _vm._v(" "),
      _c(
        "h3",
        {
          attrs: { id: "future-forms-will-be-going-to-and-present-continuous" },
        },
        [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: {
                href: "#future-forms-will-be-going-to-and-present-continuous",
              },
            },
            [_vm._v("#")]
          ),
          _vm._v(
            " 8️⃣Future forms: 'will', 'be going to' and present continuous"
          ),
        ]
      ),
      _vm._v(" "),
      _c("div", { staticClass: "custom-block note" }, [
        _c("p", { staticClass: "custom-block-title" }, [_vm._v("MISTAKES")]),
        _vm._v(" "),
        _c("ol", [
          _c("li", [
            _vm._v("I would love to go out with you tomorrow but "),
            _c("strong", [_vm._v("I'm having")]),
            _vm._v(" dinner with James."),
          ]),
          _vm._v(" "),
          _c("li", [
            _vm._v("I've decided that "),
            _c("strong", [_vm._v("I'm going to speak")]),
            _vm._v(" to my boss about the situation."),
          ]),
          _vm._v(" "),
          _c("li", [
            _vm._v("When I get my pay rise, "),
            _c("strong", [_vm._v("I'm going to get")]),
            _vm._v(" a bigger flat."),
          ]),
          _vm._v(" "),
          _c("li", [
            _c("strong", [_vm._v("I'm getting")]),
            _vm._v(" a car! They've accepted my offer today."),
          ]),
          _vm._v(" "),
          _c("li", [
            _vm._v(
              "Shall we cook or go out to eat tonight? B: Let's get takeaway. "
            ),
            _c("strong", [_vm._v("I'll look for")]),
            _vm._v(" the number of the pizza place."),
          ]),
        ]),
      ]),
      _vm._v(" "),
      _c("p", [_c("code", [_vm._v("will")]), _vm._v("  不知道会不会发生")]),
      _vm._v(" "),
      _c("p", [
        _vm._v("We use "),
        _c("em", [_vm._v("will")]),
        _vm._v(" to talk about "),
        _c("strong", [_vm._v("spontaneous 自发的")]),
        _vm._v(" plans decided at the moment of speaking."),
      ]),
      _vm._v(" "),
      _c("blockquote", [
        _c("p", [
          _vm._v("Oops, I forgot to phone Mum! I'll do it after dinner."),
          _c("br"),
          _vm._v(
            "\nI can't decide what to wear tonight. I know! I'll wear my green shirt."
          ),
          _c("br"),
          _vm._v("\nThere's no milk. I'll buy some when I go to the shops."),
        ]),
      ]),
      _vm._v(" "),
      _c("p", [_c("code", [_vm._v("going to")]), _vm._v("  肯定会发生")]),
      _vm._v(" "),
      _c("p", [
        _vm._v("We use "),
        _c("em", [_vm._v("going to")]),
        _vm._v(" to talk about plans decided before the moment of speaking."),
      ]),
      _vm._v(" "),
      _c("blockquote", [
        _c("p", [
          _c("em", [
            _vm._v(
              "I'm going to phone Mum after dinner. I told her I'd call at 8 o'clock."
            ),
          ]),
          _c("br"),
          _vm._v(" "),
          _c("em", [_vm._v("I'm going to wear my black dress tonight.")]),
          _c("br"),
          _vm._v(" "),
          _c("em", [
            _vm._v(
              "I'm going to go to the supermarket after work. What do we need?"
            ),
          ]),
        ]),
      ]),
      _vm._v(" "),
      _c("p", [
        _c("code", [_vm._v("Present continuous")]),
        _vm._v("  计划、安排"),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "when the plan is an arrangement – already confirmed with at least one other person and we know the "
        ),
        _c("strong", [_vm._v("time")]),
        _vm._v(" and "),
        _c("strong", [_vm._v("place")]),
        _vm._v("."),
      ]),
      _vm._v(" "),
      _c("blockquote", [
        _c("p", [
          _c("em", [_vm._v("I'm meeting Jane at 8 o'clock on Saturday.")]),
          _c("br"),
          _vm._v(" "),
          _c("em", [
            _vm._v(
              "We're having a party next Saturday. Would you like to come?"
            ),
          ]),
        ]),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("We often use the present continuous to ask about "),
        _c("strong", [_vm._v("people's future plans")]),
        _vm._v("."),
      ]),
      _vm._v(" "),
      _c("blockquote", [
        _c("p", [
          _c("em", [
            _vm._v("Are you doing anything interesting this weekend?"),
          ]),
        ]),
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "intensifiers-so-and-such" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#intensifiers-so-and-such" },
          },
          [_vm._v("#")]
        ),
        _vm._v(" 9️⃣Intensifiers: 'so' and 'such'"),
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "custom-block note" }, [
        _c("p", { staticClass: "custom-block-title" }, [_vm._v("MISTAKES")]),
        _vm._v(" "),
        _c("ol", [
          _c("li", [
            _vm._v("My cats have got "),
            _c("strong", [_vm._v("such")]),
            _vm._v(" gorgeous 迷人的 eyes"),
          ]),
          _vm._v(" "),
          _c("li", [
            _vm._v("I've never had "),
            _c("strong", [_vm._v("such")]),
            _vm._v(" hard-working students before!"),
          ]),
          _vm._v(" "),
          _c("li", [
            _vm._v("It was "),
            _c("strong", [_vm._v("so")]),
            _vm._v(
              " kind of him to help me that I bought him some flowers to say thank you."
            ),
          ]),
        ]),
      ]),
      _vm._v(" "),
      _c("p", [
        _c("code", [
          _vm._v("so + adjective or adverb or many,much,little ..."),
        ]),
        _vm._v("  后无名词"),
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("He walks so slowly. It's so annoying!")]),
      _vm._v(" "),
      _c("p", [_vm._v("There are so many people here!")]),
      _vm._v(" "),
      _c("p", [_vm._v("I've had so little time to myself this week.")]),
      _vm._v(" "),
      _c("p", [
        _c("code", [_vm._v("such + a noun or adjective with noun")]),
        _vm._v("  后有名词"),
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("You're such an angel!")]),
      _vm._v(" "),
      _c("p", [_vm._v("It's such a hot day today!")]),
      _vm._v(" "),
      _c("p", [
        _vm._v("They're such lovely trousers. Where did you buy them?"),
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "modals-deductions-about-the-past" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#modals-deductions-about-the-past" },
          },
          [_vm._v("#")]
        ),
        _vm._v(" 1️⃣0️⃣ Modals: deductions about the past"),
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "custom-block note" }, [
        _c("p", { staticClass: "custom-block-title" }, [_vm._v("MISTAKE")]),
        _vm._v(" "),
        _c("ol", [
          _c("li", [
            _vm._v("I explained the homework but she did the wrong page. She "),
            _c("strong", [_vm._v("must have")]),
            _vm._v(" misunderstood me."),
          ]),
          _vm._v(" "),
          _c("li", [
            _vm._v("I "),
            _c("strong", [_vm._v("can't have")]),
            _vm._v(
              " left my wallet in the restaurant. I paid for the taxi home afterwards."
            ),
          ]),
          _vm._v(" "),
          _c("li", [
            _vm._v("He "),
            _c("strong", [_vm._v("couldn't have")]),
            _vm._v(" known about it when I saw him. I'm sure he would have "),
            _c("strong", [_vm._v("told")]),
            _vm._v(" me. 他会告诉我的"),
          ]),
          _vm._v(" "),
          _c("li", [
            _vm._v(
              "Sorry, I don't know if she's here or not. She was feeling ill so she "
            ),
            _c("strong", [_vm._v("might have")]),
            _vm._v(" gone home."),
          ]),
        ]),
      ]),
      _vm._v(" "),
      _c("p", [
        _c("code", [_vm._v("must have")]),
        _vm._v("   we feel sure about what happened."),
      ]),
      _vm._v(" "),
      _c("p", [
        _c("code", [_vm._v("might have / may have")]),
        _vm._v("  it's possible that something happened."),
      ]),
      _vm._v(" "),
      _c("p", [
        _c("code", [_vm._v("can't have / couldn't have")]),
        _vm._v("   it's not possible that something happened."),
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "modals-deductions-about-the-present" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#modals-deductions-about-the-present" },
          },
          [_vm._v("#")]
        ),
        _vm._v(" 1️⃣1️⃣ Modals: deductions about the present"),
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "custom-block note" }, [
        _c("p", { staticClass: "custom-block-title" }, [_vm._v("MISTAKE")]),
        _vm._v(" "),
        _c("ol", [
          _c("li", [
            _vm._v("Whose is this coat? It "),
            _c("strong", [_vm._v("can't")]),
            _vm._v(" be Paul's. It's way "),
            _c("strong", [_vm._v("too")]),
            _vm._v(" small for him. 否定"),
          ]),
        ]),
      ]),
      _vm._v(" "),
      _c("p", [_c("code", [_vm._v("must")])]),
      _vm._v(" "),
      _c("p", [
        _c("code", [_vm._v("might, may, could")]),
        _vm._v(" "),
        _c("em", [_vm._v("may")]),
        _vm._v(" is more formal than "),
        _c("em", [_vm._v("might")]),
        _vm._v(" and "),
        _c("em", [_vm._v("could")]),
        _vm._v("."),
      ]),
      _vm._v(" "),
      _c("p", [_c("code", [_vm._v("can't")])]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "modals-permission-and-obligation" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#modals-permission-and-obligation" },
          },
          [_vm._v("#")]
        ),
        _vm._v(" 1️⃣2️⃣ Modals: permission and obligation"),
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "custom-block note" }, [
        _c("p", { staticClass: "custom-block-title" }, [_vm._v("MISTAKE")]),
        _vm._v(" "),
        _c("ol", [
          _c("li", [
            _vm._v("I did this yesterday – I can help you! You "),
            _c("strong", [_vm._v("have to")]),
            _vm._v(
              " fill in the form and attach an up-to-date passport photo."
            ),
          ]),
          _vm._v(" "),
          _c("li", [
            _vm._v("I'd love to come to the cinema but I "),
            _c("strong", [_vm._v("have to")]),
            _vm._v(" hand in this assignment tomorrow."),
          ]),
          _vm._v(" "),
          _c("li", [
            _vm._v("I'll "),
            _c("strong", [_vm._v("have to")]),
            _vm._v(
              " wear the black dress tonight. The invitation said formal clothes. （form outside）"
            ),
          ]),
          _vm._v(" "),
          _c("li", [
            _vm._v("I "),
            _c("strong", [_vm._v("mustn't")]),
            _vm._v(" forget to take my library books "),
            _c("em", [_vm._v("back on the way home")]),
            _vm._v(" 回家的路上."),
          ]),
        ]),
      ]),
      _vm._v(" "),
      _c("p", [_c("code", [_vm._v("Permission")])]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _c("p", [
            _c("strong", [_vm._v("can")]),
            _vm._v(" We often use "),
            _c("em", [_vm._v("can")]),
            _vm._v(" to ask for and give permission."),
          ]),
        ]),
        _vm._v(" "),
        _c("li", [
          _c("p", [
            _c("strong", [_vm._v("could")]),
            _vm._v(" We also use "),
            _c("em", [_vm._v("could")]),
            _vm._v(" to ask for permission (but not to give it). "),
            _c("em", [_vm._v("Could")]),
            _vm._v(" is more formal and polite than "),
            _c("em", [_vm._v("can")]),
            _vm._v("."),
          ]),
        ]),
        _vm._v(" "),
        _c("li", [
          _c("p", [
            _c("strong", [_vm._v("may")]),
            _vm._v(" "),
            _c("em", [_vm._v("May")]),
            _vm._v(" is the most formal way to ask for and give permission."),
          ]),
        ]),
      ]),
      _vm._v(" "),
      _c("p", [_c("code", [_vm._v("Prohibition")])]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _c("p", [_c("strong", [_vm._v("can't")])]),
          _vm._v(" "),
          _c("p", [
            _vm._v("We use "),
            _c("em", [_vm._v("can't")]),
            _vm._v(
              " to talk about something that is against the rules, particularly when we didn't make the rules."
            ),
          ]),
        ]),
        _vm._v(" "),
        _c("li", [
          _c("p", [_c("strong", [_vm._v("must not")])]),
          _vm._v(" "),
          _c("p", [
            _vm._v("We use "),
            _c("em", [_vm._v("must not")]),
            _vm._v(
              " to talk about what is not permitted. It is common on public signs and notices informing people of rules and laws."
            ),
          ]),
        ]),
        _vm._v(" "),
        _c("li", [
          _c("p", [_c("strong", [_vm._v("mustn't")])]),
          _vm._v(" "),
          _c("p", [
            _vm._v("We use "),
            _c("em", [_vm._v("mustn't")]),
            _vm._v(
              " particularly when the prohibition comes from the speaker."
            ),
          ]),
        ]),
      ]),
      _vm._v(" "),
      _c("p", [_c("code", [_vm._v("Obligation")])]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _c("p", [
            _c("strong", [_vm._v("have to")]),
            _vm._v(" from outside the speaker."),
          ]),
        ]),
        _vm._v(" "),
        _c("li", [
          _c("p", [
            _c("strong", [_vm._v("must")]),
            _vm._v(
              " from the speaker (or the authority that wrote the sentence)."
            ),
          ]),
        ]),
        _vm._v(" "),
        _c("li", [
          _c("p", [
            _c("strong", [_vm._v("don't have to")]),
            _vm._v(
              " You can do something if you want to but it's not compulsory"
            ),
          ]),
        ]),
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "modifying-comparatives" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#modifying-comparatives" },
          },
          [_vm._v("#")]
        ),
        _vm._v(" 1️⃣3️⃣ Modifying comparatives"),
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "custom-block note" }, [
        _c("p", { staticClass: "custom-block-title" }, [_vm._v("MISTAKE")]),
        _vm._v(" "),
        _c("ol", [_c("li")]),
      ]),
    ]
  )
}
var staticRenderFns = []
render._withStripped = true

export { render, staticRenderFns }"}]}