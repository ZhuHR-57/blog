{"remainingRequest":"F:\\Blog\\Blog_Home_New\\node_modules\\babel-loader\\lib\\index.js??ref--3-1!F:\\Blog\\Blog_Home_New\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!F:\\Blog\\Blog_Home_New\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\Blog\\Blog_Home_New\\node_modules\\vuepress-theme-vdoing\\layouts\\Layout.vue?vue&type=script&lang=js&","dependencies":[{"path":"F:\\Blog\\Blog_Home_New\\node_modules\\vuepress-theme-vdoing\\layouts\\Layout.vue","mtime":1673497944876},{"path":"F:\\Blog\\Blog_Home_New\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1673497485656},{"path":"F:\\Blog\\Blog_Home_New\\node_modules\\babel-loader\\lib\\index.js","mtime":1673497485408},{"path":"F:\\Blog\\Blog_Home_New\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1673497485656},{"path":"F:\\Blog\\Blog_Home_New\\node_modules\\vue-loader\\lib\\index.js","mtime":1673497490939}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvd2ViLnRpbWVycy5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmNvbmNhdC5qcyI7Ci8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCmltcG9ydCBIb21lIGZyb20gJ0B0aGVtZS9jb21wb25lbnRzL0hvbWUudnVlJzsKaW1wb3J0IE5hdmJhciBmcm9tICdAdGhlbWUvY29tcG9uZW50cy9OYXZiYXIudnVlJzsKaW1wb3J0IFBhZ2UgZnJvbSAnQHRoZW1lL2NvbXBvbmVudHMvUGFnZS52dWUnOwppbXBvcnQgQ2F0ZWdvcmllc1BhZ2UgZnJvbSAnQHRoZW1lL2NvbXBvbmVudHMvQ2F0ZWdvcmllc1BhZ2UudnVlJzsKaW1wb3J0IFRhZ3NQYWdlIGZyb20gJ0B0aGVtZS9jb21wb25lbnRzL1RhZ3NQYWdlLnZ1ZSc7CmltcG9ydCBBcmNoaXZlc1BhZ2UgZnJvbSAnQHRoZW1lL2NvbXBvbmVudHMvQXJjaGl2ZXNQYWdlLnZ1ZSc7CmltcG9ydCBTaWRlYmFyIGZyb20gJ0B0aGVtZS9jb21wb25lbnRzL1NpZGViYXIudnVlJzsKaW1wb3J0IEJ1dHRvbnMgZnJvbSAnQHRoZW1lL2NvbXBvbmVudHMvQnV0dG9ucy52dWUnOwppbXBvcnQgRm9vdGVyIGZyb20gJ0B0aGVtZS9jb21wb25lbnRzL0Zvb3Rlcic7CmltcG9ydCBCb2R5QmdJbWcgZnJvbSAnQHRoZW1lL2NvbXBvbmVudHMvQm9keUJnSW1nJzsKaW1wb3J0IHsgcmVzb2x2ZVNpZGViYXJJdGVtcyB9IGZyb20gJy4uL3V0aWwnOwppbXBvcnQgc3RvcmFnZSBmcm9tICdnb29kLXN0b3JhZ2UnOyAvLyDmnKzlnLDlrZjlgqgKCmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7CnZhciBNT0JJTEVfREVTS1RPUF9CUkVBS1BPSU5UID0gNzE5OyAvLyByZWZlciB0byBjb25maWcuc3R5bAoKdmFyIE5BVkJBUl9IRUlHSFQgPSA1ODsgLy8g5a+86Iiq5qCP6auY5bqmCgpleHBvcnQgZGVmYXVsdCB7CiAgY29tcG9uZW50czogewogICAgSG9tZTogSG9tZSwKICAgIE5hdmJhcjogTmF2YmFyLAogICAgUGFnZTogUGFnZSwKICAgIENhdGVnb3JpZXNQYWdlOiBDYXRlZ29yaWVzUGFnZSwKICAgIFRhZ3NQYWdlOiBUYWdzUGFnZSwKICAgIEFyY2hpdmVzUGFnZTogQXJjaGl2ZXNQYWdlLAogICAgU2lkZWJhcjogU2lkZWJhciwKICAgIEZvb3RlcjogRm9vdGVyLAogICAgQnV0dG9uczogQnV0dG9ucywKICAgIEJvZHlCZ0ltZzogQm9keUJnSW1nCiAgfSwKICBkYXRhOiBmdW5jdGlvbiBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgaGlkZU5hdmJhcjogZmFsc2UsCiAgICAgIGlzU2lkZWJhck9wZW46IHRydWUsCiAgICAgIHNob3dTaWRlYmFyOiBmYWxzZSwKICAgICAgdGhlbWVNb2RlOiAnYXV0bycsCiAgICAgIHNob3dXaW5kb3dMQjogdHJ1ZSwKICAgICAgc2hvd1dpbmRvd1JCOiB0cnVlCiAgICB9OwogIH0sCiAgY29tcHV0ZWQ6IHsKICAgIHNpZGViYXJTbG90VG9wOiBmdW5jdGlvbiBzaWRlYmFyU2xvdFRvcCgpIHsKICAgICAgcmV0dXJuIHRoaXMuZ2V0SHRtbFN0cignc2lkZWJhclQnKTsKICAgIH0sCiAgICBzaWRlYmFyU2xvdEJvdHRvbTogZnVuY3Rpb24gc2lkZWJhclNsb3RCb3R0b20oKSB7CiAgICAgIHJldHVybiB0aGlzLmdldEh0bWxTdHIoJ3NpZGViYXJCJyk7CiAgICB9LAogICAgcGFnZVNsb3RUb3A6IGZ1bmN0aW9uIHBhZ2VTbG90VG9wKCkgewogICAgICByZXR1cm4gdGhpcy5nZXRIdG1sU3RyKCdwYWdlVCcpOwogICAgfSwKICAgIHBhZ2VTbG90Qm90dG9tOiBmdW5jdGlvbiBwYWdlU2xvdEJvdHRvbSgpIHsKICAgICAgcmV0dXJuIHRoaXMuZ2V0SHRtbFN0cigncGFnZUInKTsKICAgIH0sCiAgICB3aW5kb3dMQjogZnVuY3Rpb24gd2luZG93TEIoKSB7CiAgICAgIHJldHVybiB0aGlzLmdldEh0bWxTdHIoJ3dpbmRvd0xCJyk7CiAgICB9LAogICAgd2luZG93UkI6IGZ1bmN0aW9uIHdpbmRvd1JCKCkgewogICAgICByZXR1cm4gdGhpcy5nZXRIdG1sU3RyKCd3aW5kb3dSQicpOwogICAgfSwKICAgIHNob3dSaWdodE1lbnU6IGZ1bmN0aW9uIHNob3dSaWdodE1lbnUoKSB7CiAgICAgIHZhciBoZWFkZXJzID0gdGhpcy4kcGFnZS5oZWFkZXJzOwogICAgICByZXR1cm4gIXRoaXMuJGZyb250bWF0dGVyLmhvbWUgJiYgdGhpcy4kdGhlbWVDb25maWcucmlnaHRNZW51QmFyICE9PSBmYWxzZSAmJiBoZWFkZXJzICYmIGhlYWRlcnMubGVuZ3RoICYmIHRoaXMuJGZyb250bWF0dGVyLnNpZGViYXIgIT09IGZhbHNlOwogICAgfSwKICAgIHNob3VsZFNob3dOYXZiYXI6IGZ1bmN0aW9uIHNob3VsZFNob3dOYXZiYXIoKSB7CiAgICAgIHZhciB0aGVtZUNvbmZpZyA9IHRoaXMuJHNpdGUudGhlbWVDb25maWc7CiAgICAgIHZhciBmcm9udG1hdHRlciA9IHRoaXMuJHBhZ2UuZnJvbnRtYXR0ZXI7CgogICAgICBpZiAoZnJvbnRtYXR0ZXIubmF2YmFyID09PSBmYWxzZSB8fCB0aGVtZUNvbmZpZy5uYXZiYXIgPT09IGZhbHNlKSB7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICB9CgogICAgICByZXR1cm4gdGhpcy4kdGl0bGUgfHwgdGhlbWVDb25maWcubG9nbyB8fCB0aGVtZUNvbmZpZy5yZXBvIHx8IHRoZW1lQ29uZmlnLm5hdiB8fCB0aGlzLiR0aGVtZUxvY2FsZUNvbmZpZy5uYXY7CiAgICB9LAogICAgc2hvdWxkU2hvd1NpZGViYXI6IGZ1bmN0aW9uIHNob3VsZFNob3dTaWRlYmFyKCkgewogICAgICB2YXIgZnJvbnRtYXR0ZXIgPSB0aGlzLiRwYWdlLmZyb250bWF0dGVyOwogICAgICByZXR1cm4gIWZyb250bWF0dGVyLmhvbWUgJiYgZnJvbnRtYXR0ZXIuc2lkZWJhciAhPT0gZmFsc2UgJiYgdGhpcy5zaWRlYmFySXRlbXMubGVuZ3RoICYmIGZyb250bWF0dGVyLnNob3dTaWRlYmFyICE9PSBmYWxzZTsKICAgIH0sCiAgICBzaWRlYmFySXRlbXM6IGZ1bmN0aW9uIHNpZGViYXJJdGVtcygpIHsKICAgICAgcmV0dXJuIHJlc29sdmVTaWRlYmFySXRlbXModGhpcy4kcGFnZSwgdGhpcy4kcGFnZS5yZWd1bGFyUGF0aCwgdGhpcy4kc2l0ZSwgdGhpcy4kbG9jYWxlUGF0aCk7CiAgICB9LAogICAgcGFnZUNsYXNzZXM6IGZ1bmN0aW9uIHBhZ2VDbGFzc2VzKCkgewogICAgICB2YXIgdXNlclBhZ2VDbGFzcyA9IHRoaXMuJHBhZ2UuZnJvbnRtYXR0ZXIucGFnZUNsYXNzOwogICAgICByZXR1cm4gW3sKICAgICAgICAnbm8tbmF2YmFyJzogIXRoaXMuc2hvdWxkU2hvd05hdmJhciwKICAgICAgICAnaGlkZS1uYXZiYXInOiB0aGlzLmhpZGVOYXZiYXIsCiAgICAgICAgLy8g5ZCR5LiL5rua5Yqo6ZqQ6JeP5a+86Iiq5qCPCiAgICAgICAgJ3NpZGViYXItb3Blbic6IHRoaXMuaXNTaWRlYmFyT3BlbiwKICAgICAgICAnbm8tc2lkZWJhcic6ICF0aGlzLnNob3VsZFNob3dTaWRlYmFyLAogICAgICAgICdoYXZlLXJpZ2h0bWVudSc6IHRoaXMuc2hvd1JpZ2h0TWVudSwKICAgICAgICAnaGF2ZS1ib2R5LWltZyc6IHRoaXMuJHRoZW1lQ29uZmlnLmJvZHlCZ0ltZywKICAgICAgICAnb25seS1zaWRlYmFySXRlbSc6IHRoaXMuc2lkZWJhckl0ZW1zLmxlbmd0aCA9PT0gMSAmJiB0aGlzLnNpZGViYXJJdGVtc1swXS50eXBlID09PSAncGFnZScgLy8g5bem5L6n6L655qCP5Y+q5pyJ5LiA6aG55pe2CgogICAgICB9LCB1c2VyUGFnZUNsYXNzXTsKICAgIH0KICB9LAogIGNyZWF0ZWQ6IGZ1bmN0aW9uIGNyZWF0ZWQoKSB7CiAgICB2YXIgc2lkZWJhck9wZW4gPSB0aGlzLiR0aGVtZUNvbmZpZy5zaWRlYmFyT3BlbjsKCiAgICBpZiAoc2lkZWJhck9wZW4gPT09IGZhbHNlKSB7CiAgICAgIHRoaXMuaXNTaWRlYmFyT3BlbiA9IHNpZGViYXJPcGVuOwogICAgfQogIH0sCiAgYmVmb3JlTW91bnQ6IGZ1bmN0aW9uIGJlZm9yZU1vdW50KCkgewogICAgdGhpcy5pc1NpZGViYXJPcGVuT2ZjbGllbnRXaWR0aCgpOwogICAgdmFyIG1vZGUgPSBzdG9yYWdlLmdldCgnbW9kZScpOyAvLyDkuI3mlL7lnKhjcmVhdGVk5piv5Zug5Li6dnVlcHJlc3PkuI3og73lnKhjcmVhdGVk6K6/6Zeu5rWP6KeI5ZmoYXBp77yM5aaCd2luZG93CgogICAgdmFyIGRlZmF1bHRNb2RlID0gdGhpcy4kdGhlbWVDb25maWcuZGVmYXVsdE1vZGU7CgogICAgaWYgKGRlZmF1bHRNb2RlICYmIGRlZmF1bHRNb2RlICE9PSAnYXV0bycgJiYgIW1vZGUpIHsKICAgICAgdGhpcy50aGVtZU1vZGUgPSBkZWZhdWx0TW9kZTsKICAgIH0gZWxzZSBpZiAoIW1vZGUgfHwgbW9kZSA9PT0gJ2F1dG8nIHx8IGRlZmF1bHRNb2RlID09PSAnYXV0bycpIHsKICAgICAgLy8g5b2T5pyq5YiH5o2i6L+H5qih5byP77yM5oiW5qih5byP5aSE5LqOJ+i3n+maj+ezu+e7nyfml7YKICAgICAgdGhpcy5fYXV0b01vZGUoKTsKICAgIH0gZWxzZSB7CiAgICAgIHRoaXMudGhlbWVNb2RlID0gbW9kZTsKICAgIH0KCiAgICB0aGlzLnNldEJvZHlDbGFzcygpOyAvLyDlvJXlhaXlm77moIflupMKCiAgICB2YXIgc29jaWFsID0gdGhpcy4kdGhlbWVDb25maWcuc29jaWFsOwoKICAgIGlmIChzb2NpYWwgJiYgc29jaWFsLmljb25mb250Q3NzRmlsZSkgewogICAgICB2YXIgbGlua0VsbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImxpbmsiKTsKICAgICAgbGlua0VsbS5zZXRBdHRyaWJ1dGUoJ3JlbCcsICdzdHlsZXNoZWV0Jyk7CiAgICAgIGxpbmtFbG0uc2V0QXR0cmlidXRlKCJ0eXBlIiwgInRleHQvY3NzIik7CiAgICAgIGxpbmtFbG0uc2V0QXR0cmlidXRlKCJocmVmIiwgc29jaWFsLmljb25mb250Q3NzRmlsZSk7CiAgICAgIGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQobGlua0VsbSk7CiAgICB9CiAgfSwKICBtb3VudGVkOiBmdW5jdGlvbiBtb3VudGVkKCkgewogICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAvLyDliJ3lp4vljJbpobXpnaLml7bpk77mjqXplJrngrnml6Dms5Xot7PovazliLDmjIflrpppZOeahOino+WGs+aWueahiAogICAgdmFyIGhhc2ggPSBkb2N1bWVudC5sb2NhdGlvbi5oYXNoOwoKICAgIGlmIChoYXNoLmxlbmd0aCA+IDEpIHsKICAgICAgdmFyIGlkID0gZGVjb2RlVVJJQ29tcG9uZW50KGhhc2guc3Vic3RyaW5nKDEpKTsKICAgICAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZCk7CiAgICAgIGlmIChlbGVtZW50KSBlbGVtZW50LnNjcm9sbEludG9WaWV3KCk7CiAgICB9IC8vIOino+WGs+enu+WKqOerr+WIneWni+WMlumhtemdouaXtuS+p+i+ueagj+mXqueOsOeahOmXrumimAoKCiAgICB0aGlzLnNob3dTaWRlYmFyID0gdHJ1ZTsKICAgIHRoaXMuJHJvdXRlci5hZnRlckVhY2goZnVuY3Rpb24gKCkgewogICAgICBfdGhpcy5pc1NpZGViYXJPcGVuT2ZjbGllbnRXaWR0aCgpOwogICAgfSk7IC8vIOWQkeS4i+a7muWKqOaUtui1t+WvvOiIquagjwoKICAgIHZhciBwID0gMCwKICAgICAgICB0ID0gMDsKICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBfLnRocm90dGxlKGZ1bmN0aW9uICgpIHsKICAgICAgaWYgKCFfdGhpcy5pc1NpZGViYXJPcGVuKSB7CiAgICAgICAgLy8g5L6n6L655qCP5YWz6Zet5pe2CiAgICAgICAgcCA9IF90aGlzLmdldFNjcm9sbFRvcCgpOwoKICAgICAgICBpZiAodCA8IHAgJiYgcCA+IE5BVkJBUl9IRUlHSFQpIHsKICAgICAgICAgIC8vIOWQkeS4i+a7muWKqAogICAgICAgICAgX3RoaXMuaGlkZU5hdmJhciA9IHRydWU7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIC8vIOWQkeS4igogICAgICAgICAgX3RoaXMuaGlkZU5hdmJhciA9IGZhbHNlOwogICAgICAgIH0KCiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7CiAgICAgICAgICB0ID0gcDsKICAgICAgICB9LCAwKTsKICAgICAgfQogICAgfSwgMzAwKSk7CiAgfSwKICB3YXRjaDogewogICAgaXNTaWRlYmFyT3BlbjogZnVuY3Rpb24gaXNTaWRlYmFyT3BlbigpIHsKICAgICAgaWYgKHRoaXMuaXNTaWRlYmFyT3BlbikgewogICAgICAgIC8vIOS+p+i+ueagj+aJk+W8gOaXtu+8jOaBouWkjeWvvOiIquagj+aYvuekugogICAgICAgIHRoaXMuaGlkZU5hdmJhciA9IGZhbHNlOwogICAgICB9CiAgICB9LAogICAgdGhlbWVNb2RlOiBmdW5jdGlvbiB0aGVtZU1vZGUoKSB7CiAgICAgIHRoaXMuc2V0Qm9keUNsYXNzKCk7CiAgICB9CiAgfSwKICBtZXRob2RzOiB7CiAgICBnZXRIdG1sU3RyOiBmdW5jdGlvbiBnZXRIdG1sU3RyKG1vZHVsZSkgewogICAgICB2YXIgaHRtbE1vZHVsZXMgPSB0aGlzLiR0aGVtZUNvbmZpZy5odG1sTW9kdWxlczsKICAgICAgcmV0dXJuIGh0bWxNb2R1bGVzID8gaHRtbE1vZHVsZXNbbW9kdWxlXSA6ICcnOwogICAgfSwKICAgIHNldEJvZHlDbGFzczogZnVuY3Rpb24gc2V0Qm9keUNsYXNzKCkgewogICAgICB2YXIgX3RoaXMkJHRoZW1lQ29uZmlnID0gdGhpcy4kdGhlbWVDb25maWcsCiAgICAgICAgICBfdGhpcyQkdGhlbWVDb25maWckcGEgPSBfdGhpcyQkdGhlbWVDb25maWcucGFnZVN0eWxlLAogICAgICAgICAgcGFnZVN0eWxlID0gX3RoaXMkJHRoZW1lQ29uZmlnJHBhID09PSB2b2lkIDAgPyAnY2FyZCcgOiBfdGhpcyQkdGhlbWVDb25maWckcGEsCiAgICAgICAgICBib2R5QmdJbWcgPSBfdGhpcyQkdGhlbWVDb25maWcuYm9keUJnSW1nOwoKICAgICAgaWYgKHBhZ2VTdHlsZSAhPT0gJ2NhcmQnICYmIHBhZ2VTdHlsZSAhPT0gJ2xpbmUnIHx8IGJvZHlCZ0ltZykgewogICAgICAgIHBhZ2VTdHlsZSA9ICdjYXJkJzsKICAgICAgfQoKICAgICAgZG9jdW1lbnQuYm9keS5jbGFzc05hbWUgPSAidGhlbWUtbW9kZS0iLmNvbmNhdCh0aGlzLnRoZW1lTW9kZSwgIiB0aGVtZS1zdHlsZS0iKS5jb25jYXQocGFnZVN0eWxlKTsKICAgIH0sCiAgICBnZXRTY3JvbGxUb3A6IGZ1bmN0aW9uIGdldFNjcm9sbFRvcCgpIHsKICAgICAgcmV0dXJuIHdpbmRvdy5wYWdlWU9mZnNldCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wIHx8IGRvY3VtZW50LmJvZHkuc2Nyb2xsVG9wIHx8IDA7CiAgICB9LAogICAgaXNTaWRlYmFyT3Blbk9mY2xpZW50V2lkdGg6IGZ1bmN0aW9uIGlzU2lkZWJhck9wZW5PZmNsaWVudFdpZHRoKCkgewogICAgICBpZiAoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoIDwgTU9CSUxFX0RFU0tUT1BfQlJFQUtQT0lOVCkgewogICAgICAgIHRoaXMuaXNTaWRlYmFyT3BlbiA9IGZhbHNlOwogICAgICB9CiAgICB9LAogICAgdG9nZ2xlU2lkZWJhcjogZnVuY3Rpb24gdG9nZ2xlU2lkZWJhcih0bykgewogICAgICB0aGlzLmlzU2lkZWJhck9wZW4gPSB0eXBlb2YgdG8gPT09ICdib29sZWFuJyA/IHRvIDogIXRoaXMuaXNTaWRlYmFyT3BlbjsKICAgICAgdGhpcy4kZW1pdCgndG9nZ2xlLXNpZGViYXInLCB0aGlzLmlzU2lkZWJhck9wZW4pOwogICAgfSwKICAgIF9hdXRvTW9kZTogZnVuY3Rpb24gX2F1dG9Nb2RlKCkgewogICAgICBpZiAod2luZG93Lm1hdGNoTWVkaWEoJyhwcmVmZXJzLWNvbG9yLXNjaGVtZTogZGFyayknKS5tYXRjaGVzKSB7CiAgICAgICAgLy8g57O757uf5aSE5LqO5rex6Imy5qih5byPCiAgICAgICAgdGhpcy50aGVtZU1vZGUgPSAnZGFyayc7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhpcy50aGVtZU1vZGUgPSAnbGlnaHQnOwogICAgICB9CiAgICB9LAogICAgdG9nZ2xlVGhlbWVNb2RlOiBmdW5jdGlvbiB0b2dnbGVUaGVtZU1vZGUoa2V5KSB7CiAgICAgIGlmIChrZXkgPT09ICdhdXRvJykgewogICAgICAgIHRoaXMuX2F1dG9Nb2RlKCk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhpcy50aGVtZU1vZGUgPSBrZXk7CiAgICAgIH0KCiAgICAgIHN0b3JhZ2Uuc2V0KCdtb2RlJywga2V5KTsKICAgIH0sCiAgICAvLyBzaWRlIHN3aXBlCiAgICBvblRvdWNoU3RhcnQ6IGZ1bmN0aW9uIG9uVG91Y2hTdGFydChlKSB7CiAgICAgIHRoaXMudG91Y2hTdGFydCA9IHsKICAgICAgICB4OiBlLmNoYW5nZWRUb3VjaGVzWzBdLmNsaWVudFgsCiAgICAgICAgeTogZS5jaGFuZ2VkVG91Y2hlc1swXS5jbGllbnRZCiAgICAgIH07CiAgICB9LAogICAgb25Ub3VjaEVuZDogZnVuY3Rpb24gb25Ub3VjaEVuZChlKSB7CiAgICAgIHZhciBkeCA9IGUuY2hhbmdlZFRvdWNoZXNbMF0uY2xpZW50WCAtIHRoaXMudG91Y2hTdGFydC54OwogICAgICB2YXIgZHkgPSBlLmNoYW5nZWRUb3VjaGVzWzBdLmNsaWVudFkgLSB0aGlzLnRvdWNoU3RhcnQueTsKCiAgICAgIGlmIChNYXRoLmFicyhkeCkgPiBNYXRoLmFicyhkeSkgJiYgTWF0aC5hYnMoZHgpID4gNDApIHsKICAgICAgICBpZiAoZHggPiAwICYmIHRoaXMudG91Y2hTdGFydC54IDw9IDgwKSB7CiAgICAgICAgICB0aGlzLnRvZ2dsZVNpZGViYXIodHJ1ZSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHRoaXMudG9nZ2xlU2lkZWJhcihmYWxzZSk7CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgfQp9Ow=="},null]}