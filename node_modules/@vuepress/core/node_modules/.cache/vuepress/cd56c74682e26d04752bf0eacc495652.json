{"remainingRequest":"F:\\Blog\\Blog_Home_New\\node_modules\\babel-loader\\lib\\index.js??ref--3-1!F:\\Blog\\Blog_Home_New\\node_modules\\@vuepress\\core\\.temp\\internal\\siteData.js","dependencies":[{"path":"F:\\Blog\\Blog_Home_New\\node_modules\\@vuepress\\core\\.temp\\internal\\siteData.js","mtime":1685961550309},{"path":"F:\\Blog\\Blog_Home_New\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1673497485656},{"path":"F:\\Blog\\Blog_Home_New\\node_modules\\babel-loader\\lib\\index.js","mtime":1673497485408}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:LyoqCiAqIEdlbmVyYXRlZCBieSAiQHZ1ZXByZXNzL2ludGVybmFsLXNpdGUtZGF0YSIKICovCmV4cG9ydCB2YXIgc2l0ZURhdGEgPSB7CiAgInRpdGxlIjogIkJsb2ciLAogICJkZXNjcmlwdGlvbiI6ICJIZWxsbyBCdWdzISIsCiAgImJhc2UiOiAiL2Jsb2cvIiwKICAiaGVhZFRhZ3MiOiBbWyJsaW5rIiwgewogICAgInJlbCI6ICJpY29uIiwKICAgICJocmVmIjogIi9ibG9nL2Zhdmljb24uaWNvIgogIH1dLCBbIm1ldGEiLCB7CiAgICAibmFtZSI6ICJ2aWV3cG9ydCIsCiAgICAiY29udGVudCI6ICJ3aWR0aD1kZXZpY2Utd2lkdGgsaW5pdGlhbC1zY2FsZT0xLHVzZXItc2NhbGFibGU9bm8iCiAgfV1dLAogICJwYWdlcyI6IFt7CiAgICAidGl0bGUiOiAi6ISa5omL5p62IiwKICAgICJmcm9udG1hdHRlciI6IHsKICAgICAgInRpdGxlIjogIuiEmuaJi+aetiIsCiAgICAgICJkYXRlIjogIjIwMjMtMDItMDNUMjA6Mzg6MDIuMDAwWiIsCiAgICAgICJwZXJtYWxpbmsiOiAiL3BhZ2VzLzNlMTRjYS8iLAogICAgICAiY2F0ZWdvcmllcyI6IFsiR28iLCAi5qGG5p62IiwgIkdpbiJdLAogICAgICAidGFncyI6IFsiZ28iXQogICAgfSwKICAgICJyZWd1bGFyUGF0aCI6ICIvMDEuR28vMDEuJUU2JUExJTg2JUU2JTlFJUI2LzAxLkdpbi8wMS4lRTglODQlOUElRTYlODklOEIlRTYlOUUlQjYuaHRtbCIsCiAgICAicmVsYXRpdmVQYXRoIjogIjAxLkdvLzAxLuahhuaeti8wMS5HaW4vMDEu6ISa5omL5p62Lm1kIiwKICAgICJrZXkiOiAidi03YmU5MTVkOCIsCiAgICAicGF0aCI6ICIvcGFnZXMvM2UxNGNhLyIsCiAgICAiaGVhZGVycyI6IFt7CiAgICAgICJsZXZlbCI6IDIsCiAgICAgICJ0aXRsZSI6ICIyIiwKICAgICAgInNsdWciOiAiXzIiLAogICAgICAibm9ybWFsaXplZFRpdGxlIjogIjIiLAogICAgICAiY2hhckluZGV4IjogNTgKICAgIH1dLAogICAgImV4Y2VycHQiOiAiPGRpdiBjbGFzcz1cImN1c3RvbS1ibG9jayB0aXBcIj48cCBjbGFzcz1cImN1c3RvbS1ibG9jay10aXRsZVwiPuaPkOekujwvcD5cbjxwPkdpbitNeXNxbCtSZWRpcytWaXBlcitaYXArc2FsczwvcD5cbjwvZGl2PlxuPHA+R2luIOmhueebrueahOiEmuaJi+aetjwvcD5cbiIsCiAgICAibGFzdFVwZGF0ZWQiOiAiMi80LzIwMjMsIDk6MzM6MDQgQU0iLAogICAgImxhc3RVcGRhdGVkVGltZXN0YW1wIjogMTY3NTQ3NDM4NDAwMCwKICAgICJoZWFkZXJzU3RyIjogIjIiLAogICAgImNvbnRlbnQiOiAi5o+Q56S6XG5cbkdpbitNeXNxbCtSZWRpcytWaXBlcitaYXArc2Fsc1xuXG5HaW4g6aG555uu55qE6ISa5omL5p62XG5cblxuXG4jIDFcblxuXG4jIDIiLAogICAgIm5vcm1hbGl6ZWRDb250ZW50IjogIuaPkOekulxuXG5naW4rbXlzcWwrcmVkaXMrdmlwZXIremFwK3NhbHNcblxuZ2luIOmhueebrueahOiEmuaJi+aetlxuXG5cblxuIyAxXG5cblxuIyAyIiwKICAgICJjaGFyc2V0cyI6IHsKICAgICAgImNqayI6IHRydWUKICAgIH0KICB9LCB7CiAgICAidGl0bGUiOiAi6Ieq5Yqo5o+Q5LqkR2l0aHViIiwKICAgICJmcm9udG1hdHRlciI6IHsKICAgICAgInRpdGxlIjogIuiHquWKqOaPkOS6pEdpdGh1YiIsCiAgICAgICJkYXRlIjogIjIwMjMtMDUtMjJUMjA6NDE6MzguMDAwWiIsCiAgICAgICJwZXJtYWxpbmsiOiAiL3BhZ2VzLzI3MzUyZi8iLAogICAgICAiY2F0ZWdvcmllcyI6IFsiR28iLCAidG9vbHMiXSwKICAgICAgInRhZ3MiOiBbImdvLXRvb2xzIl0KICAgIH0sCiAgICAicmVndWxhclBhdGgiOiAiLzAxLkdvLzAyLnRvb2xzLzAyLiVFOCU4NyVBQSVFNSU4QSVBOCVFNiU4RiU5MCVFNCVCQSVBNEdpdGh1Yi5odG1sIiwKICAgICJyZWxhdGl2ZVBhdGgiOiAiMDEuR28vMDIudG9vbHMvMDIu6Ieq5Yqo5o+Q5LqkR2l0aHViLm1kIiwKICAgICJrZXkiOiAidi0wYTBlNTZiZSIsCiAgICAicGF0aCI6ICIvcGFnZXMvMjczNTJmLyIsCiAgICAiaGVhZGVycyI6IFt7CiAgICAgICJsZXZlbCI6IDIsCiAgICAgICJ0aXRsZSI6ICLlrozmlbTku6PnoIHlpoLkuIsiLAogICAgICAic2x1ZyI6ICLlrozmlbTku6PnoIHlpoLkuIsiLAogICAgICAibm9ybWFsaXplZFRpdGxlIjogIuWujOaVtOS7o+eggeWmguS4iyIsCiAgICAgICJjaGFySW5kZXgiOiAzMAogICAgfSwgewogICAgICAibGV2ZWwiOiAzLAogICAgICAidGl0bGUiOiAi5paH5Lu2IiwKICAgICAgInNsdWciOiAi5paH5Lu2IiwKICAgICAgIm5vcm1hbGl6ZWRUaXRsZSI6ICLmlofku7YiLAogICAgICAiY2hhckluZGV4IjogNDEKICAgIH0sIHsKICAgICAgImxldmVsIjogMywKICAgICAgInRpdGxlIjogIuS7o+eggSIsCiAgICAgICJzbHVnIjogIuS7o+eggSIsCiAgICAgICJub3JtYWxpemVkVGl0bGUiOiAi5Luj56CBIiwKICAgICAgImNoYXJJbmRleCI6IDMyCiAgICB9LCB7CiAgICAgICJsZXZlbCI6IDIsCiAgICAgICJ0aXRsZSI6ICLnvJbor5HvvIhXaW5kb3PvvIkiLAogICAgICAic2x1ZyI6ICLnvJbor5Etd2luZG9zIiwKICAgICAgIm5vcm1hbGl6ZWRUaXRsZSI6ICLnvJbor5HvvIh3aW5kb3PvvIkiLAogICAgICAiY2hhckluZGV4IjogMTE2MAogICAgfSwgewogICAgICAibGV2ZWwiOiAyLAogICAgICAidGl0bGUiOiAi5Lu75Yqh6K6h5YiSIiwKICAgICAgInNsdWciOiAi5Lu75Yqh6K6h5YiSIiwKICAgICAgIm5vcm1hbGl6ZWRUaXRsZSI6ICLku7vliqHorqHliJIiLAogICAgICAiY2hhckluZGV4IjogMTkKICAgIH1dLAogICAgImV4Y2VycHQiOiAiPGJsb2NrcXVvdGU+XG48cD5HbyBidWlsZCArIEdpdCArIOS7u+WKoeiuoeWIkueoi+W6jzwvcD5cbjwvYmxvY2txdW90ZT5cbiIsCiAgICAibGFzdFVwZGF0ZWQiOiAiNS8yMi8yMDIzLCA4OjQyOjU3IFBNIiwKICAgICJsYXN0VXBkYXRlZFRpbWVzdGFtcCI6IDE2ODQ3NTkzNzcwMDAsCiAgICAiaGVhZGVyc1N0ciI6ICLlrozmlbTku6PnoIHlpoLkuIsg5paH5Lu2IOS7o+eggSDnvJbor5HvvIhXaW5kb3PvvIkg5Lu75Yqh6K6h5YiSIiwKICAgICJjb250ZW50IjogIj4gR28gYnVpbGQgKyBHaXQgKyDku7vliqHorqHliJLnqIvluo9cblxuXG4jIOWujOaVtOS7o+eggeWmguS4i1xuXG5cbiMg5paH5Lu2XG5cbiAqIG1haW4uZ29cblxuXG4jIOS7o+eggVxuXG4vKipcbiAgQEdvIHZlcnNpb246IDEuMTcuNlxuICBAcHJvamVjdDogSGVsbG9cbiAgQGlkZTogR29MYW5kXG4gIEBmaWxlOiBtYWluLmdvXG4gIEBhdXRob3I6IExpZG9cbiAgQHRpbWU6IDIwMjMtMDUtMjIgMjA6MDhcbiAgQGRlc2NyaXB0aW9uOiDmj5DkuqRHaXRodWJcbiovXG5wYWNrYWdlIG1haW5cblxuaW1wb3J0IChcblx0XCJsb2dcIlxuXHRcIm9zXCJcblx0XCJvcy9leGVjXCJcbilcblxuLy8g5omn6KGM6Ieq5Yqo5o+Q5Lqk5Luj56CB5ZKM5o6o6YCB5Yiw6L+c56iL5LuT5bqTXG5mdW5jIGNvbW1pdEFuZFB1c2goKSBlcnJvciB7XG5cdC8vIOWIh+aNouWIsOmhueebruebruW9lVxuXHRwcm9qZWN0UGF0aCA6PSBcIkY6L0Jsb2cvQmxvZ19Ib21lX05ldy9cIlxuXHRpZiBlcnIgOj0gb3MuQ2hkaXIocHJvamVjdFBhdGgpOyBlcnIgIT0gbmlsIHtcblx0XHRyZXR1cm4gZXJyXG5cdH1cblxuXHQvLyDliJvlu7ogZ2l0IGFkZCDlkb3ku6Rcblx0YWRkQ21kIDo9IGV4ZWMuQ29tbWFuZChcImdpdFwiLCBcImFkZFwiLCBcIi5cIilcblxuXHQvLyDmiafooYwgZ2l0IGFkZCDlkb3ku6Rcblx0aWYgZXJyIDo9IGFkZENtZC5SdW4oKTsgZXJyICE9IG5pbCB7XG5cdFx0cmV0dXJuIGVyclxuXHR9XG5cblx0Ly8g5Yib5bu6IGdpdCBjb21taXQg5ZG95LukXG5cdGNvbW1pdENtZCA6PSBleGVjLkNvbW1hbmQoXCJnaXRcIiwgXCJjb21taXRcIiwgXCItbVwiLCBcIkF1dG8gY29tbWl0XCIpXG5cblx0Ly8g5omn6KGMIGdpdCBjb21taXQg5ZG95LukXG5cdGlmIGVyciA6PSBjb21taXRDbWQuUnVuKCk7IGVyciAhPSBuaWwge1xuXHRcdHJldHVybiBlcnJcblx0fVxuXG5cdC8vIOWIm+W7uiBnaXQgcHVzaCDlkb3ku6Rcblx0cHVzaENtZCA6PSBleGVjLkNvbW1hbmQoXCJnaXRcIiwgXCJwdXNoXCIsXCItdVwiLFwib3JpZ2luXCIsXCJtYXN0ZXJcIilcblxuXHQvLyDmiafooYwgZ2l0IHB1c2gg5ZG95LukXG5cdGlmIGVyciA6PSBwdXNoQ21kLlJ1bigpOyBlcnIgIT0gbmlsIHtcblx0XHRyZXR1cm4gZXJyXG5cdH1cblxuXHRyZXR1cm4gbmlsXG59XG5cbmZ1bmMgbWFpbigpIHtcblx0Y29tbWl0QW5kUHVzaCgpXG5cblx0bG9nLlByaW50bG4oXCJDb2RlIGNvbW1pdHRlZCBhbmQgcHVzaGVkIHRvIEdpdEh1Yi5cIilcbn1cblxuXG5cbjFcbjJcbjNcbjRcbjVcbjZcbjdcbjhcbjlcbjEwXG4xMVxuMTJcbjEzXG4xNFxuMTVcbjE2XG4xN1xuMThcbjE5XG4yMFxuMjFcbjIyXG4yM1xuMjRcbjI1XG4yNlxuMjdcbjI4XG4yOVxuMzBcbjMxXG4zMlxuMzNcbjM0XG4zNVxuMzZcbjM3XG4zOFxuMzlcbjQwXG40MVxuNDJcbjQzXG40NFxuNDVcbjQ2XG40N1xuNDhcbjQ5XG41MFxuNTFcbjUyXG41M1xuNTRcbjU1XG41NlxuNTdcbjU4XG5cblxuXG4jIOe8luivke+8iFdpbmRvc++8iVxuXG7mj5DnpLpcblxu5YW25LuW57O757uf57yW6K+R5Zyo5LiK5LiA56+H5paH5Lit5pyJ5o+QXG5cbmdvIGJ1aWxkIGZpbGVuYW1lLmdvIFxuXG5cbjFcblxuXG5cbiMg5Lu75Yqh6K6h5YiSXG5cbiAxLiDmiZPlvIDku7vliqHorqHliJLnqIvluo/jgILlj6/ku6XlnKjlvIDlp4voj5zljZXkuK3mkJzntKIgXCLku7vliqHorqHliJLnqIvluo9cIiDmnaXmib7liLDlroPjgIJcbiAyLiDlnKjku7vliqHorqHliJLnqIvluo/kuK3vvIzngrnlh7sgXCLliJvlu7rln7rmnKzku7vliqFcIuOAglxuIDMuIOi+k+WFpeS7u+WKoeeahOWQjeensOWSjOaPj+i/sO+8jOeEtuWQjueCueWHuyBcIuS4i+S4gOatpVwi44CCXG4gNC4g6YCJ5oup6Kem5Y+R5Zmo57G75Z6L5Li6IFwi5q+P5ZGoXCLvvIzlubbpgInmi6nmr4/lkajnmoTlkajkuIDjgIJcbiA1LiDpgInmi6nmk43kvZznsbvlnovkuLogXCLlkK/liqjnqIvluo9cIuOAglxuIDYuIOWcqOeoi+W6jyAvIOiEmuacrOWtl+auteS4re+8jOi+k+WFpSBHbyDnqIvluo/nmoTlj6/miafooYzmlofku7bot6/lvoTjgIJcbiA3LiDngrnlh7sgXCLlrozmiJBcIiDmnaXliJvlu7rorqHliJLku7vliqHjgIIiLAogICAgIm5vcm1hbGl6ZWRDb250ZW50IjogIj4gZ28gYnVpbGQgKyBnaXQgKyDku7vliqHorqHliJLnqIvluo9cblxuXG4jIOWujOaVtOS7o+eggeWmguS4i1xuXG5cbiMg5paH5Lu2XG5cbiAqIG1haW4uZ29cblxuXG4jIOS7o+eggVxuXG4vKipcbiAgQGdvIHZlcnNpb246IDEuMTcuNlxuICBAcHJvamVjdDogaGVsbG9cbiAgQGlkZTogZ29sYW5kXG4gIEBmaWxlOiBtYWluLmdvXG4gIEBhdXRob3I6IGxpZG9cbiAgQHRpbWU6IDIwMjMtMDUtMjIgMjA6MDhcbiAgQGRlc2NyaXB0aW9uOiDmj5DkuqRnaXRodWJcbiovXG5wYWNrYWdlIG1haW5cblxuaW1wb3J0IChcblx0XCJsb2dcIlxuXHRcIm9zXCJcblx0XCJvcy9leGVjXCJcbilcblxuLy8g5omn6KGM6Ieq5Yqo5o+Q5Lqk5Luj56CB5ZKM5o6o6YCB5Yiw6L+c56iL5LuT5bqTXG5mdW5jIGNvbW1pdGFuZHB1c2goKSBlcnJvciB7XG5cdC8vIOWIh+aNouWIsOmhueebruebruW9lVxuXHRwcm9qZWN0cGF0aCA6PSBcImY6L2Jsb2cvYmxvZ19ob21lX25ldy9cIlxuXHRpZiBlcnIgOj0gb3MuY2hkaXIocHJvamVjdHBhdGgpOyBlcnIgIT0gbmlsIHtcblx0XHRyZXR1cm4gZXJyXG5cdH1cblxuXHQvLyDliJvlu7ogZ2l0IGFkZCDlkb3ku6Rcblx0YWRkY21kIDo9IGV4ZWMuY29tbWFuZChcImdpdFwiLCBcImFkZFwiLCBcIi5cIilcblxuXHQvLyDmiafooYwgZ2l0IGFkZCDlkb3ku6Rcblx0aWYgZXJyIDo9IGFkZGNtZC5ydW4oKTsgZXJyICE9IG5pbCB7XG5cdFx0cmV0dXJuIGVyclxuXHR9XG5cblx0Ly8g5Yib5bu6IGdpdCBjb21taXQg5ZG95LukXG5cdGNvbW1pdGNtZCA6PSBleGVjLmNvbW1hbmQoXCJnaXRcIiwgXCJjb21taXRcIiwgXCItbVwiLCBcImF1dG8gY29tbWl0XCIpXG5cblx0Ly8g5omn6KGMIGdpdCBjb21taXQg5ZG95LukXG5cdGlmIGVyciA6PSBjb21taXRjbWQucnVuKCk7IGVyciAhPSBuaWwge1xuXHRcdHJldHVybiBlcnJcblx0fVxuXG5cdC8vIOWIm+W7uiBnaXQgcHVzaCDlkb3ku6Rcblx0cHVzaGNtZCA6PSBleGVjLmNvbW1hbmQoXCJnaXRcIiwgXCJwdXNoXCIsXCItdVwiLFwib3JpZ2luXCIsXCJtYXN0ZXJcIilcblxuXHQvLyDmiafooYwgZ2l0IHB1c2gg5ZG95LukXG5cdGlmIGVyciA6PSBwdXNoY21kLnJ1bigpOyBlcnIgIT0gbmlsIHtcblx0XHRyZXR1cm4gZXJyXG5cdH1cblxuXHRyZXR1cm4gbmlsXG59XG5cbmZ1bmMgbWFpbigpIHtcblx0Y29tbWl0YW5kcHVzaCgpXG5cblx0bG9nLnByaW50bG4oXCJjb2RlIGNvbW1pdHRlZCBhbmQgcHVzaGVkIHRvIGdpdGh1Yi5cIilcbn1cblxuXG5cbjFcbjJcbjNcbjRcbjVcbjZcbjdcbjhcbjlcbjEwXG4xMVxuMTJcbjEzXG4xNFxuMTVcbjE2XG4xN1xuMThcbjE5XG4yMFxuMjFcbjIyXG4yM1xuMjRcbjI1XG4yNlxuMjdcbjI4XG4yOVxuMzBcbjMxXG4zMlxuMzNcbjM0XG4zNVxuMzZcbjM3XG4zOFxuMzlcbjQwXG40MVxuNDJcbjQzXG40NFxuNDVcbjQ2XG40N1xuNDhcbjQ5XG41MFxuNTFcbjUyXG41M1xuNTRcbjU1XG41NlxuNTdcbjU4XG5cblxuXG4jIOe8luivke+8iHdpbmRvc++8iVxuXG7mj5DnpLpcblxu5YW25LuW57O757uf57yW6K+R5Zyo5LiK5LiA56+H5paH5Lit5pyJ5o+QXG5cbmdvIGJ1aWxkIGZpbGVuYW1lLmdvIFxuXG5cbjFcblxuXG5cbiMg5Lu75Yqh6K6h5YiSXG5cbiAxLiDmiZPlvIDku7vliqHorqHliJLnqIvluo/jgILlj6/ku6XlnKjlvIDlp4voj5zljZXkuK3mkJzntKIgXCLku7vliqHorqHliJLnqIvluo9cIiDmnaXmib7liLDlroPjgIJcbiAyLiDlnKjku7vliqHorqHliJLnqIvluo/kuK3vvIzngrnlh7sgXCLliJvlu7rln7rmnKzku7vliqFcIuOAglxuIDMuIOi+k+WFpeS7u+WKoeeahOWQjeensOWSjOaPj+i/sO+8jOeEtuWQjueCueWHuyBcIuS4i+S4gOatpVwi44CCXG4gNC4g6YCJ5oup6Kem5Y+R5Zmo57G75Z6L5Li6IFwi5q+P5ZGoXCLvvIzlubbpgInmi6nmr4/lkajnmoTlkajkuIDjgIJcbiA1LiDpgInmi6nmk43kvZznsbvlnovkuLogXCLlkK/liqjnqIvluo9cIuOAglxuIDYuIOWcqOeoi+W6jyAvIOiEmuacrOWtl+auteS4re+8jOi+k+WFpSBnbyDnqIvluo/nmoTlj6/miafooYzmlofku7bot6/lvoTjgIJcbiA3LiDngrnlh7sgXCLlrozmiJBcIiDmnaXliJvlu7rorqHliJLku7vliqHjgIIiLAogICAgImNoYXJzZXRzIjogewogICAgICAiY2prIjogdHJ1ZQogICAgfQogIH0sIHsKICAgICJ0aXRsZSI6ICLmlofku7bkvKDovpPvvIjlsYDln5/nvZHvvIkiLAogICAgImZyb250bWF0dGVyIjogewogICAgICAidGl0bGUiOiAi5paH5Lu25Lyg6L6T77yI5bGA5Z+f572R77yJIiwKICAgICAgImRhdGUiOiAiMjAyMy0wMy0wMVQyMDo0NjozNS4wMDBaIiwKICAgICAgInBlcm1hbGluayI6ICIvcGFnZXMvMjczNTFmLyIsCiAgICAgICJjYXRlZ29yaWVzIjogWyJHbyIsICJ0b29scyJdLAogICAgICAidGFncyI6IFsiZ28tdG9vbHMiXQogICAgfSwKICAgICJyZWd1bGFyUGF0aCI6ICIvMDEuR28vMDIudG9vbHMvMDEuJUU2JTk2JTg3JUU0JUJCJUI2JUU0JUJDJUEwJUU4JUJFJTkzJUVGJUJDJTg4JUU1JUIxJTgwJUU1JTlGJTlGJUU3JUJEJTkxJUVGJUJDJTg5Lmh0bWwiLAogICAgInJlbGF0aXZlUGF0aCI6ICIwMS5Hby8wMi50b29scy8wMS7mlofku7bkvKDovpPvvIjlsYDln5/nvZHvvIkubWQiLAogICAgImtleSI6ICJ2LThhZjdiMmE0IiwKICAgICJwYXRoIjogIi9wYWdlcy8yNzM1MWYvIiwKICAgICJoZWFkZXJzIjogW3sKICAgICAgImxldmVsIjogMiwKICAgICAgInRpdGxlIjogIuWujOaVtOS7o+eggeWmguS4iyIsCiAgICAgICJzbHVnIjogIuWujOaVtOS7o+eggeWmguS4iyIsCiAgICAgICJub3JtYWxpemVkVGl0bGUiOiAi5a6M5pW05Luj56CB5aaC5LiLIiwKICAgICAgImNoYXJJbmRleCI6IDMwCiAgICB9LCB7CiAgICAgICJsZXZlbCI6IDMsCiAgICAgICJ0aXRsZSI6ICLmlofku7YiLAogICAgICAic2x1ZyI6ICLmlofku7YiLAogICAgICAibm9ybWFsaXplZFRpdGxlIjogIuaWh+S7tiIsCiAgICAgICJjaGFySW5kZXgiOiAxMwogICAgfSwgewogICAgICAibGV2ZWwiOiAzLAogICAgICAidGl0bGUiOiAi5Luj56CBIiwKICAgICAgInNsdWciOiAi5Luj56CBIiwKICAgICAgIm5vcm1hbGl6ZWRUaXRsZSI6ICLku6PnoIEiLAogICAgICAiY2hhckluZGV4IjogMzIKICAgIH0sIHsKICAgICAgImxldmVsIjogMiwKICAgICAgInRpdGxlIjogIuaJk+WMhSIsCiAgICAgICJzbHVnIjogIuaJk+WMhSIsCiAgICAgICJub3JtYWxpemVkVGl0bGUiOiAi5omT5YyFIiwKICAgICAgImNoYXJJbmRleCI6IDI0MjYKICAgIH0sIHsKICAgICAgImxldmVsIjogMiwKICAgICAgInRpdGxlIjogIue8luivkSh3aW5kb3dzKSIsCiAgICAgICJzbHVnIjogIue8luivkS13aW5kb3dzIiwKICAgICAgIm5vcm1hbGl6ZWRUaXRsZSI6ICLnvJbor5EgKHdpbmRvd3MpIiwKICAgICAgImNoYXJJbmRleCI6IDI1MzMKICAgIH0sIHsKICAgICAgImxldmVsIjogMywKICAgICAgInRpdGxlIjogIui/kOihjOa1i+ivlSIsCiAgICAgICJzbHVnIjogIui/kOihjOa1i+ivlSIsCiAgICAgICJub3JtYWxpemVkVGl0bGUiOiAi6L+Q6KGM5rWL6K+VIiwKICAgICAgImNoYXJJbmRleCI6IDI2NDkKICAgIH0sIHsKICAgICAgImxldmVsIjogMiwKICAgICAgInRpdGxlIjogIuS6pOWPiee8luivkSIsCiAgICAgICJzbHVnIjogIuS6pOWPiee8luivkSIsCiAgICAgICJub3JtYWxpemVkVGl0bGUiOiAi5Lqk5Y+J57yW6K+RIiwKICAgICAgImNoYXJJbmRleCI6IDMwNDAKICAgIH0sIHsKICAgICAgImxldmVsIjogMywKICAgICAgInRpdGxlIjogIk1hY+S4i+e8luivkUxpbnV4LCBXaW5kb3dzIiwKICAgICAgInNsdWciOiAibWFj5LiL57yW6K+RbGludXgtd2luZG93cyIsCiAgICAgICJub3JtYWxpemVkVGl0bGUiOiAibWFjIOS4i+e8luivkSBsaW51eCwgd2luZG93cyIsCiAgICAgICJjaGFySW5kZXgiOiAzMDQ5CiAgICB9LCB7CiAgICAgICJsZXZlbCI6IDMsCiAgICAgICJ0aXRsZSI6ICJMaW51eOS4i+e8luivkU1hYywgV2luZG93cyIsCiAgICAgICJzbHVnIjogImxpbnV45LiL57yW6K+RbWFjLXdpbmRvd3MiLAogICAgICAibm9ybWFsaXplZFRpdGxlIjogImxpbnV4IOS4i+e8luivkSBtYWMsIHdpbmRvd3MiLAogICAgICAiY2hhckluZGV4IjogMzMyMAogICAgfSwgewogICAgICAibGV2ZWwiOiAzLAogICAgICAidGl0bGUiOiAiV2luZG93c+S4i+e8luivkU1hYywgTGludXgiLAogICAgICAic2x1ZyI6ICJ3aW5kb3dz5LiL57yW6K+RbWFjLWxpbnV4IiwKICAgICAgIm5vcm1hbGl6ZWRUaXRsZSI6ICJ3aW5kb3dzIOS4i+e8luivkSBtYWMsIGxpbnV4IiwKICAgICAgImNoYXJJbmRleCI6IDM1MDAKICAgIH0sIHsKICAgICAgImxldmVsIjogMiwKICAgICAgInRpdGxlIjogIuivtOaYjiIsCiAgICAgICJzbHVnIjogIuivtOaYjiIsCiAgICAgICJub3JtYWxpemVkVGl0bGUiOiAi6K+05piOIiwKICAgICAgImNoYXJJbmRleCI6IDEwMzYKICAgIH1dLAogICAgImV4Y2VycHQiOiAiPGJsb2NrcXVvdGU+XG48cD5HbyBidWlsZCArIOaWh+S7tuS8oOi+kyArIOWRveS7pOihjOWPguaVsDwvcD5cbjwvYmxvY2txdW90ZT5cbiIsCiAgICAibGFzdFVwZGF0ZWQiOiAiNS8yMi8yMDIzLCA4OjQyOjU3IFBNIiwKICAgICJsYXN0VXBkYXRlZFRpbWVzdGFtcCI6IDE2ODQ3NTkzNzcwMDAsCiAgICAiaGVhZGVyc1N0ciI6ICLlrozmlbTku6PnoIHlpoLkuIsg5paH5Lu2IOS7o+eggSDmiZPljIUg57yW6K+RKHdpbmRvd3MpIOi/kOihjOa1i+ivlSDkuqTlj4nnvJbor5EgTWFj5LiL57yW6K+RTGludXgsIFdpbmRvd3MgTGludXjkuIvnvJbor5FNYWMsIFdpbmRvd3MgV2luZG93c+S4i+e8luivkU1hYywgTGludXgg6K+05piOIiwKICAgICJjb250ZW50IjogIj4gR28gYnVpbGQgKyDmlofku7bkvKDovpMgKyDlkb3ku6TooYzlj4LmlbBcblxuXG4jIOWujOaVtOS7o+eggeWmguS4i1xuXG5cbiMg5paH5Lu2XG5cbiAqIG1haW4uZ29cbiAqIG1haW4ucmNcbiAqIG1pYW4uaWNvXG4gKiBtaWFuLnN5c29cblxuXG4jIOS7o+eggVxuXG4vKipcbiogQHByb2dyYW06IEhlbGxvXG4qIEBmaWxlbmFtZTogbWFpbi5nb1xuKiBAYXV0aG9yOiBMaWRvXG4qIEBjcmVhdGU6IDIwMjItMDItMDMgMTE6MzBcbiogQGRlc2NyaXB0aW9uOiDmlofku7bkvKDovpPvvIjlsYDln5/nvZHvvIlcbioqL1xuXG5wYWNrYWdlIG1haW5cblxuaW1wb3J0IChcblx0XCJlcnJvcnNcIlxuXHRcImZsYWdcIlxuXHRcImxvZ1wiXG5cdFwibmV0XCJcblx0XCJuZXQvaHR0cFwiXG4pXG5cbnZhciBpc1VzZWZ1bmMgYm9vbCA9IGZhbHNlXG5cbmZ1bmMgbG9nUmVxdWVzdChoYW5kbGVyIGh0dHAuSGFuZGxlcikgaHR0cC5IYW5kbGVyIHtcblx0cmV0dXJuIGh0dHAuSGFuZGxlckZ1bmMoZnVuYyh3IGh0dHAuUmVzcG9uc2VXcml0ZXIsIHIgKmh0dHAuUmVxdWVzdCkge1xuXHRcdGxvZy5QcmludGYoXCIlcyAlcyAlc1xcblwiLCByLlJlbW90ZUFkZHIsIHIuTWV0aG9kLCByLlVSTClcblx0XHRoYW5kbGVyLlNlcnZlSFRUUCh3LCByKVxuXHR9KVxufVxuXG5mdW5jIG1haW4oKSB7XG5cdC8v5b2T5YmN5paH5Lu25aS5XG5cdGZzIDo9IGh0dHAuRmlsZVNlcnZlcihodHRwLkRpcihcIlwiKSlcblx0LyoqXG5cdOino+aekOWRveS7pOihjOWPguaVsFxuXHQqL1xuXHQvL+m7mOiupOWAvOiuvue9rlxuXHRmbGFnLkZ1bmMoXCJnaXBcIiwgXCItZ2lwIGlwL21hYy9pbVwiLCBnZXRJcEFuZE1hY0FkZHJlc3MpXG5cdGlwIDo9IGZsYWcuU3RyaW5nKFwiaXBcIiwgXCIxMjcuMC4wLjFcIiwgXCJpcFwiKVxuXHRwb3J0IDo9IGZsYWcuU3RyaW5nKFwicG9ydFwiLCBcIjgwODlcIiwgXCJwb3J0XCIpXG5cdC8v6Kej5p6QXG5cdGZsYWcuUGFyc2UoKVxuXG5cdGlmIGlzVXNlZnVuYyB7XG5cdFx0cmV0dXJuXG5cdH1cblxuXHQvL+Wtl+espuS4suaLvOaOpVxuXHR1cmwgOj0gKmlwK1wiOlwiKypwb3J0XG5cdHVybF9mdWxsIDo9IFwiaHR0cDovL1wiK3VybFxuXG5cdGxvZy5QcmludGxuKFwicnVubmluZyBzZXJ2ZXIgYXQgXCIrdXJsX2Z1bGwpXG5cdC8v55uR5ZCsXG5cdGxvZy5GYXRhbChodHRwLkxpc3RlbkFuZFNlcnZlKHVybCwgbG9nUmVxdWVzdChmcykpKVxufVxuXG5mdW5jIGdldElwQW5kTWFjQWRkcmVzcyhzdHIgc3RyaW5nKSBlcnJvcntcblx0bG9nLlByaW50bG4oXCLor7TmmI7vvJpcIilcblx0bG9nLlByaW50bG4oXCLkuIDoiKzmnIDlkI7kuIDkuKrmmK/mnKzmnLrnmoRXSUZJ55qE5pys5ZywSVBcXG5cIilcblxuXHRsb2cuUHJpbnRsbihcIuahiOS+i++8mlwiKVxuXHRsb2cuUHJpbnRsbihcImZpbGUtd2ViLmV4ZSAtaXAgMTkyLjE2OC54eHgueHh4IC1wb3J0IHh4eHhcXG5cIilcblxuXHRpZmFjZXMsIGVyciA6PSBuZXQuSW50ZXJmYWNlcygpXG5cdGlmIGVyciAhPSBuaWwge1xuXHRcdGxvZy5QcmludGxuKGVycilcblx0fVxuXG5cdGZvciBfLCBpZmFjZSA6PSByYW5nZSBpZmFjZXMge1xuXHRcdGlmIGlmYWNlLkZsYWdzJm5ldC5GbGFnVXAgPT0gMCB7XG5cdFx0XHRjb250aW51ZSAvLyBpbnRlcmZhY2UgZG93blxuXHRcdH1cblx0XHRpZiBpZmFjZS5GbGFncyZuZXQuRmxhZ0xvb3BiYWNrICE9IDAge1xuXHRcdFx0Y29udGludWUgLy8gbG9vcGJhY2sgaW50ZXJmYWNlXG5cdFx0fVxuXHRcdGFkZHJzLCBlcnIgOj0gaWZhY2UuQWRkcnMoKVxuXHRcdGlmIGVyciAhPSBuaWwge1xuXHRcdFx0bG9nLlByaW50bG4oZXJyKVxuXHRcdH1cblxuXHRcdGZvciBfLCBhZGRyIDo9IHJhbmdlIGFkZHJzIHtcblx0XHRcdHZhciBpcCBuZXQuSVBcblx0XHRcdHN3aXRjaCB2IDo9IGFkZHIuKHR5cGUpIHtcblx0XHRcdGNhc2UgKm5ldC5JUE5ldDpcblx0XHRcdFx0aXAgPSB2LklQXG5cdFx0XHRjYXNlICpuZXQuSVBBZGRyOlxuXHRcdFx0XHRpcCA9IHYuSVBcblx0XHRcdH1cblx0XHRcdGlmIGlwID09IG5pbCB8fCBpcC5Jc0xvb3BiYWNrKCkge1xuXHRcdFx0XHRjb250aW51ZVxuXHRcdFx0fVxuXHRcdFx0aXAgPSBpcC5UbzQoKVxuXHRcdFx0aWYgaXAgPT0gbmlsIHtcblx0XHRcdFx0Y29udGludWUgLy8gbm90IGFuIGlwdjQgYWRkcmVzc1xuXHRcdFx0fVxuXG5cdFx0XHRpZiBzdHIgPT0gXCJpcFwiIHtcblx0XHRcdFx0bG9nLlByaW50bG4oXCJpcDogXCIsIGlwLlN0cmluZygpKVxuXHRcdFx0fWVsc2UgaWYgc3RyID09IFwibWFjXCJ7XG5cdFx0XHRcdGxvZy5QcmludGxuKFwibWFjOiBcIiwgaWZhY2UuSGFyZHdhcmVBZGRyLlN0cmluZygpKVxuXHRcdFx0fWVsc2UgaWYgc3RyICA9PSBcImltXCJ7XG5cdFx0XHRcdGxvZy5QcmludGxuKFwiaXA6IFwiLCBpcC5TdHJpbmcoKSwgXCJtYWM6IFwiLCBpZmFjZS5IYXJkd2FyZUFkZHIuU3RyaW5nKCkpXG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdHJldHVybiBlcnJvcnMuTmV3KFwiLTFcIilcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRpc1VzZWZ1bmMgPSB0cnVlXG5cdHJldHVybiBuaWxcbn1cblxuXG4xXG4yXG4zXG40XG41XG42XG43XG44XG45XG4xMFxuMTFcbjEyXG4xM1xuMTRcbjE1XG4xNlxuMTdcbjE4XG4xOVxuMjBcbjIxXG4yMlxuMjNcbjI0XG4yNVxuMjZcbjI3XG4yOFxuMjlcbjMwXG4zMVxuMzJcbjMzXG4zNFxuMzVcbjM2XG4zN1xuMzhcbjM5XG40MFxuNDFcbjQyXG40M1xuNDRcbjQ1XG40NlxuNDdcbjQ4XG40OVxuNTBcbjUxXG41MlxuNTNcbjU0XG41NVxuNTZcbjU3XG41OFxuNTlcbjYwXG42MVxuNjJcbjYzXG42NFxuNjVcbjY2XG42N1xuNjhcbjY5XG43MFxuNzFcbjcyXG43M1xuNzRcbjc1XG43NlxuNzdcbjc4XG43OVxuODBcbjgxXG44MlxuODNcbjg0XG44NVxuODZcbjg3XG44OFxuODlcbjkwXG45MVxuOTJcbjkzXG45NFxuOTVcbjk2XG45N1xuOThcbjk5XG4xMDBcbjEwMVxuMTAyXG4xMDNcbjEwNFxuMTA1XG4xMDZcbjEwN1xuMTA4XG5cblxuXG4jIOaJk+WMhVxuXG7mj5DnpLpcblxuIDEuIOWIm+W7uiBtYWluLnJjIOaWh+S7tlxuXG5JRElfSUNPTjEgSUNPTiBcIm1haW4uaWNvXCJcblxuXG4xXG5cblxu5o+Q56S6XG5cbiAyLiDmib7lpb0gaW9jIOWbvuagh++8iDEyOCoxMjjvvInvvIzlsIblm77lvaLlkI3np7DmlLnkuLogbWFpbi5pY29cblxuXG4jIOe8luivkSAod2luZG93cylcblxu5o+Q56S6XG5cbuWwhuS4iumdouS4pOS4quaWh+S7tuWSjCBnbyDmupDmlofku7bmlL7lnKjkuIDotbdcblxu5omT5byA57uI56uvXG5cbndpbmRyZXMgLW8gbWFpbi5zeXNvIG1haW4ucmNcblxuXG4xXG5cblxuZ28gYnVpbGQgIC1sZGZsYWdzIFwiLXcgLXNcIlxuXG5cbjFcblxuXG5cbiMg6L+Q6KGM5rWL6K+VXG5cbkY6XFxHT0NPREVcXEhlbGxvXFxmaWxlLXdlYj5maWxlLXdlYi5leGUgLWdpcCBpcFxuMjAyMi8wMi8wMyAxNDoyMjoxNCDor7TmmI7vvJpcbjIwMjIvMDIvMDMgMTQ6MjI6MTQg5LiA6Iis5pyA5ZCO5LiA5Liq5piv5pys5py655qEV0lGSeeahOacrOWcsElQXG5cbjIwMjIvMDIvMDMgMTQ6MjI6MTQg5qGI5L6L77yaXG4yMDIyLzAyLzAzIDE0OjIyOjE0IGZpbGUtd2ViLmV4ZSAtaXAgMTkyLjE2OC54eHgueHh4IC1wb3J0IHh4eHhcblxuMjAyMi8wMi8wMyAxNDoyMjoxNCBpcDogIDE5Mi4xNjguMTM3LjFcbjIwMjIvMDIvMDMgMTQ6MjI6MTQgaXA6ICAxOTIuMTY4LjE5NS4xXG4yMDIyLzAyLzAzIDE0OjIyOjE0IGlwOiAgMTkyLjE2OC4xMzQuMVxuMjAyMi8wMi8wMyAxNDoyMjoxNCBpcDogIDE5Mi4xNjguMy45XG5cblxuMVxuMlxuM1xuNFxuNVxuNlxuN1xuOFxuOVxuMTBcbjExXG5cblxuXG4jIOS6pOWPiee8luivkVxuXG5cbiMgTWFjIOS4i+e8luivkSBMaW51eCwgV2luZG93c1xuXG4jIExpbnV4XG5DR09fRU5BQkxFRD0wIEdPT1M9bGludXggR09BUkNIPWFtZDY0IGdvIGJ1aWxkIGZpbGVuYW1lLmdvXG4gXG4jIFdpbmRvd3NcbkNHT19FTkFCTEVEPTAgR09PUz13aW5kb3dzIEdPQVJDSD1hbWQ2NCBnbyBidWlsZCBmaWxlbmFtZS5nb1xu5aaCOiBDR09fRU5BQkxFRD0wIEdPT1M9d2luZG93cyBHT0FSQ0g9YW1kNjQgZ28gYnVpbGQgLW8gaGVsbG93b3JsZC13aW5kb3dzIGhlbGxvd29ybGQuZ29cblxuXG4xXG4yXG4zXG40XG41XG42XG5cblxuXG4jIExpbnV4IOS4i+e8luivkSBNYWMsIFdpbmRvd3NcblxuIyBNYWNcbkNHT19FTkFCTEVEPTAgR09PUz1kYXJ3aW4gR09BUkNIPWFtZDY0IGdvIGJ1aWxkIGZpbGVuYW1lLmdvXG4gXG4jIFdpbmRvd3NcbkNHT19FTkFCTEVEPTAgR09PUz13aW5kb3dzIEdPQVJDSD1hbWQ2NCBnbyBidWlsZCBmaWxlbmFtZS5nb1xuXG5cbjFcbjJcbjNcbjRcbjVcblxuXG5cbiMgV2luZG93cyDkuIvnvJbor5EgTWFjLCBMaW51eFxuXG4jIE1hY1xuU0VUIENHT19FTkFCTEVEPTBcblNFVCBHT09TPWRhcndpblxuU0VUIEdPQVJDSD1hbWQ2NFxuZ28gYnVpbGQgZmlsZW5hbWUuZ29cbiBcbiMgTGludXhcblNFVCBDR09fRU5BQkxFRD0wXG5TRVQgR09PUz1saW51eFxuU0VUIEdPQVJDSD1hbWQ2NFxuZ28gYnVpbGQgZmlsZW5hbWUuZ28gLWxkZmxhZ3MgXCItdyAtc1wiXG5cblxuMVxuMlxuM1xuNFxuNVxuNlxuN1xuOFxuOVxuMTBcbjExXG5cblxuY2hvbWQgNzc3IHh4eFxuXG5cbjFcblxuXG5cbiMg6K+05piOXG5cbiAxLiDku6XkuIrkuKTnp43op6PlhrPmlrnms5Xlj6rog73kuLTml7bkv67mlLkgZ28g55qE546v5aKD5Y+Y6YeP77yM6YeN5ZCvIEdvbGFuZCDmiJbogIXph43lkK8gY21kIOe7iOerr+WQjuWkseaViOOAglxuXG4gMi4g5omn6KGMIGdvIGVudiAtdyBHT09TPWxpbnV4IOWPr+S7peS/ruaUuSBnbyDnmoTnjq/looPlj5jph48gR09PU++8jOS4lOW9k+mHjeWQryBHb2xhbmQg5ZCO5oiW6ICF5omT5byA5YW25LuW6aG555uu5ZCO6YO95pyJ5pWI44CC5L2G5piv5ZyoIEdpdCBCYXNoIOS4i+aJp+ihjCBjaG1vZCA3NzcgeHgg6LWL5LqI5paH5Lu2IHh4IOWPr+aJp+ihjOadg+mZkOWksei0peOAglxuXG4gMy4g5aaC5p6c5oyJ5LiK6L+w5pa55byP5rC45LmF5L+u5pS55LqGIEdPT1PvvIzkvb/nlKggR29sYW5kIOeahCBydW4g5ZG95Luk55u05o6l6L+Q6KGM56iL5bqP5Lya5aSx6LSl77yM5Y2z5L2/5Li05pe26K6+572uIGV4cG9ydCBHT09TPXdpbmRvd3Mg5Lmf5LiN6LW35L2c55So77yM5Y+q6IO96YCa6L+HIGdvIGVudiAtdyBHT09TPXdpbmRvd3Mg5L+u5pS5IEdPT1Mg5ZCO5omN6IO95ZyoIEdvbGFuZCDkuK3nm7TmjqXov5DooYznqIvluo/jgIJcblxu57uI5LiK5omA6L+w77yM5ZyoIHdpbmRvd3Mg57O757uf55qEIEdvbGFuZCDkuK3nvJbor5EgTGludXgg55qE5Y+v5omn6KGM56iL5bqP5pe277yM5bu66K6u5Li05pe25L+u5pS5IGV4cG9ydCBHT09TPWxpbnV477yM6ICM5LiN5piv5L2/55SoIGdvIGVudiAtdyBHT09TPWxpbnV4IOawuOS5heS/ruaUueOAgiIsCiAgICAibm9ybWFsaXplZENvbnRlbnQiOiAiPiBnbyBidWlsZCArIOaWh+S7tuS8oOi+kyArIOWRveS7pOihjOWPguaVsFxuXG5cbiMg5a6M5pW05Luj56CB5aaC5LiLXG5cblxuIyDmlofku7ZcblxuICogbWFpbi5nb1xuICogbWFpbi5yY1xuICogbWlhbi5pY29cbiAqIG1pYW4uc3lzb1xuXG5cbiMg5Luj56CBXG5cbi8qKlxuKiBAcHJvZ3JhbTogaGVsbG9cbiogQGZpbGVuYW1lOiBtYWluLmdvXG4qIEBhdXRob3I6IGxpZG9cbiogQGNyZWF0ZTogMjAyMi0wMi0wMyAxMTozMFxuKiBAZGVzY3JpcHRpb246IOaWh+S7tuS8oOi+k++8iOWxgOWfn+e9ke+8iVxuKiovXG5cbnBhY2thZ2UgbWFpblxuXG5pbXBvcnQgKFxuXHRcImVycm9yc1wiXG5cdFwiZmxhZ1wiXG5cdFwibG9nXCJcblx0XCJuZXRcIlxuXHRcIm5ldC9odHRwXCJcbilcblxudmFyIGlzdXNlZnVuYyBib29sID0gZmFsc2VcblxuZnVuYyBsb2dyZXF1ZXN0KGhhbmRsZXIgaHR0cC5oYW5kbGVyKSBodHRwLmhhbmRsZXIge1xuXHRyZXR1cm4gaHR0cC5oYW5kbGVyZnVuYyhmdW5jKHcgaHR0cC5yZXNwb25zZXdyaXRlciwgciAqaHR0cC5yZXF1ZXN0KSB7XG5cdFx0bG9nLnByaW50ZihcIiVzICVzICVzXFxuXCIsIHIucmVtb3RlYWRkciwgci5tZXRob2QsIHIudXJsKVxuXHRcdGhhbmRsZXIuc2VydmVodHRwKHcsIHIpXG5cdH0pXG59XG5cbmZ1bmMgbWFpbigpIHtcblx0Ly/lvZPliY3mlofku7blpLlcblx0ZnMgOj0gaHR0cC5maWxlc2VydmVyKGh0dHAuZGlyKFwiXCIpKVxuXHQvKipcblx06Kej5p6Q5ZG95Luk6KGM5Y+C5pWwXG5cdCovXG5cdC8v6buY6K6k5YC86K6+572uXG5cdGZsYWcuZnVuYyhcImdpcFwiLCBcIi1naXAgaXAvbWFjL2ltXCIsIGdldGlwYW5kbWFjYWRkcmVzcylcblx0aXAgOj0gZmxhZy5zdHJpbmcoXCJpcFwiLCBcIjEyNy4wLjAuMVwiLCBcImlwXCIpXG5cdHBvcnQgOj0gZmxhZy5zdHJpbmcoXCJwb3J0XCIsIFwiODA4OVwiLCBcInBvcnRcIilcblx0Ly/op6PmnpBcblx0ZmxhZy5wYXJzZSgpXG5cblx0aWYgaXN1c2VmdW5jIHtcblx0XHRyZXR1cm5cblx0fVxuXG5cdC8v5a2X56ym5Liy5ou85o6lXG5cdHVybCA6PSAqaXArXCI6XCIrKnBvcnRcblx0dXJsX2Z1bGwgOj0gXCJodHRwOi8vXCIrdXJsXG5cblx0bG9nLnByaW50bG4oXCJydW5uaW5nIHNlcnZlciBhdCBcIit1cmxfZnVsbClcblx0Ly/nm5HlkKxcblx0bG9nLmZhdGFsKGh0dHAubGlzdGVuYW5kc2VydmUodXJsLCBsb2dyZXF1ZXN0KGZzKSkpXG59XG5cbmZ1bmMgZ2V0aXBhbmRtYWNhZGRyZXNzKHN0ciBzdHJpbmcpIGVycm9ye1xuXHRsb2cucHJpbnRsbihcIuivtOaYju+8mlwiKVxuXHRsb2cucHJpbnRsbihcIuS4gOiIrOacgOWQjuS4gOS4quaYr+acrOacuueahHdpZmnnmoTmnKzlnLBpcFxcblwiKVxuXG5cdGxvZy5wcmludGxuKFwi5qGI5L6L77yaXCIpXG5cdGxvZy5wcmludGxuKFwiZmlsZS13ZWIuZXhlIC1pcCAxOTIuMTY4Lnh4eC54eHggLXBvcnQgeHh4eFxcblwiKVxuXG5cdGlmYWNlcywgZXJyIDo9IG5ldC5pbnRlcmZhY2VzKClcblx0aWYgZXJyICE9IG5pbCB7XG5cdFx0bG9nLnByaW50bG4oZXJyKVxuXHR9XG5cblx0Zm9yIF8sIGlmYWNlIDo9IHJhbmdlIGlmYWNlcyB7XG5cdFx0aWYgaWZhY2UuZmxhZ3MmbmV0LmZsYWd1cCA9PSAwIHtcblx0XHRcdGNvbnRpbnVlIC8vIGludGVyZmFjZSBkb3duXG5cdFx0fVxuXHRcdGlmIGlmYWNlLmZsYWdzJm5ldC5mbGFnbG9vcGJhY2sgIT0gMCB7XG5cdFx0XHRjb250aW51ZSAvLyBsb29wYmFjayBpbnRlcmZhY2Vcblx0XHR9XG5cdFx0YWRkcnMsIGVyciA6PSBpZmFjZS5hZGRycygpXG5cdFx0aWYgZXJyICE9IG5pbCB7XG5cdFx0XHRsb2cucHJpbnRsbihlcnIpXG5cdFx0fVxuXG5cdFx0Zm9yIF8sIGFkZHIgOj0gcmFuZ2UgYWRkcnMge1xuXHRcdFx0dmFyIGlwIG5ldC5pcFxuXHRcdFx0c3dpdGNoIHYgOj0gYWRkci4odHlwZSkge1xuXHRcdFx0Y2FzZSAqbmV0LmlwbmV0OlxuXHRcdFx0XHRpcCA9IHYuaXBcblx0XHRcdGNhc2UgKm5ldC5pcGFkZHI6XG5cdFx0XHRcdGlwID0gdi5pcFxuXHRcdFx0fVxuXHRcdFx0aWYgaXAgPT0gbmlsIHx8IGlwLmlzbG9vcGJhY2soKSB7XG5cdFx0XHRcdGNvbnRpbnVlXG5cdFx0XHR9XG5cdFx0XHRpcCA9IGlwLnRvNCgpXG5cdFx0XHRpZiBpcCA9PSBuaWwge1xuXHRcdFx0XHRjb250aW51ZSAvLyBub3QgYW4gaXB2NCBhZGRyZXNzXG5cdFx0XHR9XG5cblx0XHRcdGlmIHN0ciA9PSBcImlwXCIge1xuXHRcdFx0XHRsb2cucHJpbnRsbihcImlwOiBcIiwgaXAuc3RyaW5nKCkpXG5cdFx0XHR9ZWxzZSBpZiBzdHIgPT0gXCJtYWNcIntcblx0XHRcdFx0bG9nLnByaW50bG4oXCJtYWM6IFwiLCBpZmFjZS5oYXJkd2FyZWFkZHIuc3RyaW5nKCkpXG5cdFx0XHR9ZWxzZSBpZiBzdHIgID09IFwiaW1cIntcblx0XHRcdFx0bG9nLnByaW50bG4oXCJpcDogXCIsIGlwLnN0cmluZygpLCBcIm1hYzogXCIsIGlmYWNlLmhhcmR3YXJlYWRkci5zdHJpbmcoKSlcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0cmV0dXJuIGVycm9ycy5uZXcoXCItMVwiKVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGlzdXNlZnVuYyA9IHRydWVcblx0cmV0dXJuIG5pbFxufVxuXG5cbjFcbjJcbjNcbjRcbjVcbjZcbjdcbjhcbjlcbjEwXG4xMVxuMTJcbjEzXG4xNFxuMTVcbjE2XG4xN1xuMThcbjE5XG4yMFxuMjFcbjIyXG4yM1xuMjRcbjI1XG4yNlxuMjdcbjI4XG4yOVxuMzBcbjMxXG4zMlxuMzNcbjM0XG4zNVxuMzZcbjM3XG4zOFxuMzlcbjQwXG40MVxuNDJcbjQzXG40NFxuNDVcbjQ2XG40N1xuNDhcbjQ5XG41MFxuNTFcbjUyXG41M1xuNTRcbjU1XG41NlxuNTdcbjU4XG41OVxuNjBcbjYxXG42MlxuNjNcbjY0XG42NVxuNjZcbjY3XG42OFxuNjlcbjcwXG43MVxuNzJcbjczXG43NFxuNzVcbjc2XG43N1xuNzhcbjc5XG44MFxuODFcbjgyXG44M1xuODRcbjg1XG44NlxuODdcbjg4XG44OVxuOTBcbjkxXG45MlxuOTNcbjk0XG45NVxuOTZcbjk3XG45OFxuOTlcbjEwMFxuMTAxXG4xMDJcbjEwM1xuMTA0XG4xMDVcbjEwNlxuMTA3XG4xMDhcblxuXG5cbiMg5omT5YyFXG5cbuaPkOekulxuXG4gMS4g5Yib5bu6IG1haW4ucmMg5paH5Lu2XG5cbmlkaV9pY29uMSBpY29uIFwibWFpbi5pY29cIlxuXG5cbjFcblxuXG7mj5DnpLpcblxuIDIuIOaJvuWlvSBpb2Mg5Zu+5qCH77yIMTI4KjEyOO+8ie+8jOWwhuWbvuW9ouWQjeensOaUueS4uiBtYWluLmljb1xuXG5cbiMg57yW6K+RICh3aW5kb3dzKVxuXG7mj5DnpLpcblxu5bCG5LiK6Z2i5Lik5Liq5paH5Lu25ZKMIGdvIOa6kOaWh+S7tuaUvuWcqOS4gOi1t1xuXG7miZPlvIDnu4jnq69cblxud2luZHJlcyAtbyBtYWluLnN5c28gbWFpbi5yY1xuXG5cbjFcblxuXG5nbyBidWlsZCAgLWxkZmxhZ3MgXCItdyAtc1wiXG5cblxuMVxuXG5cblxuIyDov5DooYzmtYvor5VcblxuZjpcXGdvY29kZVxcaGVsbG9cXGZpbGUtd2ViPmZpbGUtd2ViLmV4ZSAtZ2lwIGlwXG4yMDIyLzAyLzAzIDE0OjIyOjE0IOivtOaYju+8mlxuMjAyMi8wMi8wMyAxNDoyMjoxNCDkuIDoiKzmnIDlkI7kuIDkuKrmmK/mnKzmnLrnmoR3aWZp55qE5pys5ZywaXBcblxuMjAyMi8wMi8wMyAxNDoyMjoxNCDmoYjkvovvvJpcbjIwMjIvMDIvMDMgMTQ6MjI6MTQgZmlsZS13ZWIuZXhlIC1pcCAxOTIuMTY4Lnh4eC54eHggLXBvcnQgeHh4eFxuXG4yMDIyLzAyLzAzIDE0OjIyOjE0IGlwOiAgMTkyLjE2OC4xMzcuMVxuMjAyMi8wMi8wMyAxNDoyMjoxNCBpcDogIDE5Mi4xNjguMTk1LjFcbjIwMjIvMDIvMDMgMTQ6MjI6MTQgaXA6ICAxOTIuMTY4LjEzNC4xXG4yMDIyLzAyLzAzIDE0OjIyOjE0IGlwOiAgMTkyLjE2OC4zLjlcblxuXG4xXG4yXG4zXG40XG41XG42XG43XG44XG45XG4xMFxuMTFcblxuXG5cbiMg5Lqk5Y+J57yW6K+RXG5cblxuIyBtYWMg5LiL57yW6K+RIGxpbnV4LCB3aW5kb3dzXG5cbiMgbGludXhcbmNnb19lbmFibGVkPTAgZ29vcz1saW51eCBnb2FyY2g9YW1kNjQgZ28gYnVpbGQgZmlsZW5hbWUuZ29cbiBcbiMgd2luZG93c1xuY2dvX2VuYWJsZWQ9MCBnb29zPXdpbmRvd3MgZ29hcmNoPWFtZDY0IGdvIGJ1aWxkIGZpbGVuYW1lLmdvXG7lpoI6IGNnb19lbmFibGVkPTAgZ29vcz13aW5kb3dzIGdvYXJjaD1hbWQ2NCBnbyBidWlsZCAtbyBoZWxsb3dvcmxkLXdpbmRvd3MgaGVsbG93b3JsZC5nb1xuXG5cbjFcbjJcbjNcbjRcbjVcbjZcblxuXG5cbiMgbGludXgg5LiL57yW6K+RIG1hYywgd2luZG93c1xuXG4jIG1hY1xuY2dvX2VuYWJsZWQ9MCBnb29zPWRhcndpbiBnb2FyY2g9YW1kNjQgZ28gYnVpbGQgZmlsZW5hbWUuZ29cbiBcbiMgd2luZG93c1xuY2dvX2VuYWJsZWQ9MCBnb29zPXdpbmRvd3MgZ29hcmNoPWFtZDY0IGdvIGJ1aWxkIGZpbGVuYW1lLmdvXG5cblxuMVxuMlxuM1xuNFxuNVxuXG5cblxuIyB3aW5kb3dzIOS4i+e8luivkSBtYWMsIGxpbnV4XG5cbiMgbWFjXG5zZXQgY2dvX2VuYWJsZWQ9MFxuc2V0IGdvb3M9ZGFyd2luXG5zZXQgZ29hcmNoPWFtZDY0XG5nbyBidWlsZCBmaWxlbmFtZS5nb1xuIFxuIyBsaW51eFxuc2V0IGNnb19lbmFibGVkPTBcbnNldCBnb29zPWxpbnV4XG5zZXQgZ29hcmNoPWFtZDY0XG5nbyBidWlsZCBmaWxlbmFtZS5nbyAtbGRmbGFncyBcIi13IC1zXCJcblxuXG4xXG4yXG4zXG40XG41XG42XG43XG44XG45XG4xMFxuMTFcblxuXG5jaG9tZCA3NzcgeHh4XG5cblxuMVxuXG5cblxuIyDor7TmmI5cblxuIDEuIOS7peS4iuS4pOenjeino+WGs+aWueazleWPquiDveS4tOaXtuS/ruaUuSBnbyDnmoTnjq/looPlj5jph4/vvIzph43lkK8gZ29sYW5kIOaIluiAhemHjeWQryBjbWQg57uI56uv5ZCO5aSx5pWI44CCXG5cbiAyLiDmiafooYwgZ28gZW52IC13IGdvb3M9bGludXgg5Y+v5Lul5L+u5pS5IGdvIOeahOeOr+Wig+WPmOmHjyBnb29z77yM5LiU5b2T6YeN5ZCvIGdvbGFuZCDlkI7miJbogIXmiZPlvIDlhbbku5bpobnnm67lkI7pg73mnInmlYjjgILkvYbmmK/lnKggZ2l0IGJhc2gg5LiL5omn6KGMIGNobW9kIDc3NyB4eCDotYvkuojmlofku7YgeHgg5Y+v5omn6KGM5p2D6ZmQ5aSx6LSl44CCXG5cbiAzLiDlpoLmnpzmjInkuIrov7DmlrnlvI/msLjkuYXkv67mlLnkuoYgZ29vc++8jOS9v+eUqCBnb2xhbmQg55qEIHJ1biDlkb3ku6Tnm7TmjqXov5DooYznqIvluo/kvJrlpLHotKXvvIzljbPkvb/kuLTml7borr7nva4gZXhwb3J0IGdvb3M9d2luZG93cyDkuZ/kuI3otbfkvZznlKjvvIzlj6rog73pgJrov4cgZ28gZW52IC13IGdvb3M9d2luZG93cyDkv67mlLkgZ29vcyDlkI7miY3og73lnKggZ29sYW5kIOS4reebtOaOpei/kOihjOeoi+W6j+OAglxuXG7nu4jkuIrmiYDov7DvvIzlnKggd2luZG93cyDns7vnu5/nmoQgZ29sYW5kIOS4ree8luivkSBsaW51eCDnmoTlj6/miafooYznqIvluo/ml7bvvIzlu7rorq7kuLTml7bkv67mlLkgZXhwb3J0IGdvb3M9bGludXjvvIzogIzkuI3mmK/kvb/nlKggZ28gZW52IC13IGdvb3M9bGludXgg5rC45LmF5L+u5pS544CCIiwKICAgICJjaGFyc2V0cyI6IHsKICAgICAgImNqayI6IHRydWUKICAgIH0KICB9LCB7CiAgICAidGl0bGUiOiAi57uT5p6E5L2T5ZKM5YaF5a2Y5a+56b2QIiwKICAgICJmcm9udG1hdHRlciI6IHsKICAgICAgInRpdGxlIjogIue7k+aehOS9k+WSjOWGheWtmOWvuem9kCIsCiAgICAgICJkYXRlIjogIjIwMjMtMDYtMDJUMTg6MzE6MjIuMDAwWiIsCiAgICAgICJwZXJtYWxpbmsiOiAiL3BhZ2VzLzIwZDIzNC8iLAogICAgICAiY2F0ZWdvcmllcyI6IFsiR28iLCAi5rex5YWlR28iXSwKICAgICAgInRhZ3MiOiBbIuaOoue0oi1HTyJdCiAgICB9LAogICAgInJlZ3VsYXJQYXRoIjogIi8wMS5Hby8wMy4lRTYlQjclQjElRTUlODUlQTVHby8wMy4lRTclQkIlOTMlRTYlOUUlODQlRTQlQkQlOTMlRTUlOTIlOEMlRTUlODYlODUlRTUlQUQlOTglRTUlQUYlQjklRTklQkQlOTAuaHRtbCIsCiAgICAicmVsYXRpdmVQYXRoIjogIjAxLkdvLzAzLua3seWFpUdvLzAzLue7k+aehOS9k+WSjOWGheWtmOWvuem9kC5tZCIsCiAgICAia2V5IjogInYtMmJmNWM1YjIiLAogICAgInBhdGgiOiAiL3BhZ2VzLzIwZDIzNC8iLAogICAgImxhc3RVcGRhdGVkIjogIjYvMi8yMDIzLCA2OjM0OjAwIFBNIiwKICAgICJsYXN0VXBkYXRlZFRpbWVzdGFtcCI6IDE2ODU3MDIwNDAwMDAsCiAgICAiaGVhZGVyc1N0ciI6IG51bGwsCiAgICAiY29udGVudCI6ICIiLAogICAgIm5vcm1hbGl6ZWRDb250ZW50IjogIiIsCiAgICAiY2hhcnNldHMiOiB7fQogIH0sIHsKICAgICJ0aXRsZSI6ICJHMCIsCiAgICAiZnJvbnRtYXR0ZXIiOiB7CiAgICAgICJwYWdlQ29tcG9uZW50IjogewogICAgICAgICJuYW1lIjogIkNhdGFsb2d1ZSIsCiAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAia2V5IjogIjAxLkdvIiwKICAgICAgICAgICJpbWdVcmwiOiAiL2Fzc2V0cy9pbWcvZ28ucG5nIiwKICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJHbyBHbyBHbyIKICAgICAgICB9CiAgICAgIH0sCiAgICAgICJ0aXRsZSI6ICJHMCIsCiAgICAgICJkYXRlIjogIjIwMjMtMDItMDMgMjA6MTciLAogICAgICAicGVybWFsaW5rIjogIi9nby8iLAogICAgICAic2lkZWJhciI6IGZhbHNlLAogICAgICAiYXJ0aWNsZSI6IGZhbHNlLAogICAgICAiY29tbWVudCI6IGZhbHNlLAogICAgICAiY29tbWVudHMiOiBmYWxzZSwKICAgICAgImVkaXRMaW5rIjogZmFsc2UKICAgIH0sCiAgICAicmVndWxhclBhdGgiOiAiLzAxLkdvLyIsCiAgICAicmVsYXRpdmVQYXRoIjogIjAxLkdvL2luZGV4Lm1kIiwKICAgICJrZXkiOiAidi0yNzRlNWI5NiIsCiAgICAicGF0aCI6ICIvZ28vIiwKICAgICJsYXN0VXBkYXRlZCI6ICIyLzQvMjAyMywgOTozMzowNCBBTSIsCiAgICAibGFzdFVwZGF0ZWRUaW1lc3RhbXAiOiAxNjc1NDc0Mzg0MDAwLAogICAgImhlYWRlcnNTdHIiOiBudWxsLAogICAgImNvbnRlbnQiOiAiIiwKICAgICJub3JtYWxpemVkQ29udGVudCI6ICIiLAogICAgImNoYXJzZXRzIjoge30KICB9LCB7CiAgICAidGl0bGUiOiAic2xpY2XnsbvlnosiLAogICAgImZyb250bWF0dGVyIjogewogICAgICAidGl0bGUiOiAic2xpY2XnsbvlnosiLAogICAgICAiZGF0ZSI6ICIyMDIzLTA2LTAyVDE2OjQ2OjAzLjAwMFoiLAogICAgICAicGVybWFsaW5rIjogIi9wYWdlcy81YjQyZjcvIiwKICAgICAgImNhdGVnb3JpZXMiOiBbIkdvIiwgIua3seWFpUdvIl0sCiAgICAgICJ0YWdzIjogWyLmjqLntKItR08iXQogICAgfSwKICAgICJyZWd1bGFyUGF0aCI6ICIvMDEuR28vMDMuJUU2JUI3JUIxJUU1JTg1JUE1R28vMDIuc2xpY2UlRTclQjElQkIlRTUlOUUlOEIuaHRtbCIsCiAgICAicmVsYXRpdmVQYXRoIjogIjAxLkdvLzAzLua3seWFpUdvLzAyLnNsaWNl57G75Z6LLm1kIiwKICAgICJrZXkiOiAidi1kNTRlMDY1MCIsCiAgICAicGF0aCI6ICIvcGFnZXMvNWI0MmY3LyIsCiAgICAiaGVhZGVycyI6IFt7CiAgICAgICJsZXZlbCI6IDIsCiAgICAgICJ0aXRsZSI6ICJzbGljZeexu+Wei+WtmOS7gOS5iOKdkyIsCiAgICAgICJzbHVnIjogInNsaWNl57G75Z6L5a2Y5LuA5LmIIiwKICAgICAgIm5vcm1hbGl6ZWRUaXRsZSI6ICJzbGljZSDnsbvlnovlrZjku4DkuYjinZMiLAogICAgICAiY2hhckluZGV4IjogNjMKICAgIH0sIHsKICAgICAgImxldmVsIjogMiwKICAgICAgInRpdGxlIjogIm1ha2XlkoxuZXfinZMiLAogICAgICAic2x1ZyI6ICJtYWtl5ZKMbmV3IiwKICAgICAgIm5vcm1hbGl6ZWRUaXRsZSI6ICJtYWtlIOWSjCBuZXfinZMiLAogICAgICAiY2hhckluZGV4IjogMjM4CiAgICB9LCB7CiAgICAgICJsZXZlbCI6IDIsCiAgICAgICJ0aXRsZSI6ICJzbGljZeWSjOaVsOe7hOKdkyIsCiAgICAgICJzbHVnIjogInNsaWNl5ZKM5pWw57uEIiwKICAgICAgIm5vcm1hbGl6ZWRUaXRsZSI6ICJzbGljZSDlkozmlbDnu4TinZMiLAogICAgICAiY2hhckluZGV4IjogODU0CiAgICB9LCB7CiAgICAgICJsZXZlbCI6IDIsCiAgICAgICJ0aXRsZSI6ICLmianlrrnop4TliJninZMiLAogICAgICAic2x1ZyI6ICLmianlrrnop4TliJkiLAogICAgICAibm9ybWFsaXplZFRpdGxlIjogIuaJqeWuueinhOWImeKdkyIsCiAgICAgICJjaGFySW5kZXgiOiAxMTY5CiAgICB9LCB7CiAgICAgICJsZXZlbCI6IDMsCiAgICAgICJ0aXRsZSI6ICIxLiDpooTkvLDmi5PlrrnlkI7lrrnph4/vvIjlhYPntKDkuKrmlbDvvIkiLAogICAgICAic2x1ZyI6ICJfMS3pooTkvLDmi5PlrrnlkI7lrrnph48t5YWD57Sg5Liq5pWwIiwKICAgICAgIm5vcm1hbGl6ZWRUaXRsZSI6ICIxLiDpooTkvLDmi5PlrrnlkI7lrrnph4/vvIjlhYPntKDkuKrmlbDvvIkiLAogICAgICAiY2hhckluZGV4IjogMTE3OQogICAgfSwgewogICAgICAibGV2ZWwiOiAzLAogICAgICAidGl0bGUiOiAiMi4g5Yik5pat5YaF5a2Y5aSn5bCPIiwKICAgICAgInNsdWciOiAiXzIt5Yik5pat5YaF5a2Y5aSn5bCPIiwKICAgICAgIm5vcm1hbGl6ZWRUaXRsZSI6ICIyLiDliKTmlq3lhoXlrZjlpKflsI8iLAogICAgICAiY2hhckluZGV4IjogMjI4MQogICAgfSwgewogICAgICAibGV2ZWwiOiAzLAogICAgICAidGl0bGUiOiAiMy4g5Yy56YWN5Yiw5ZCI6YCC55qE5YaF5a2Y6KeE5qC8IiwKICAgICAgInNsdWciOiAiXzMt5Yy56YWN5Yiw5ZCI6YCC55qE5YaF5a2Y6KeE5qC8IiwKICAgICAgIm5vcm1hbGl6ZWRUaXRsZSI6ICIzLiDljLnphY3liLDlkIjpgILnmoTlhoXlrZjop4TmoLwiLAogICAgICAiY2hhckluZGV4IjogMjM0MwogICAgfSwgewogICAgICAibGV2ZWwiOiAzLAogICAgICAidGl0bGUiOiAi5bCP57uD5LmgIiwKICAgICAgInNsdWciOiAi5bCP57uD5LmgIiwKICAgICAgIm5vcm1hbGl6ZWRUaXRsZSI6ICLlsI/nu4PkuaAiLAogICAgICAiY2hhckluZGV4IjogMjU1NwogICAgfV0sCiAgICAiZXhjZXJwdCI6ICI8YmxvY2txdW90ZT5cbjxwPnNsaWNlIOexu+Wei+WtmOS7gOS5iO+8nyBtYWtlIOWSjCBuZXfvvJ8gc2xpY2Ug5ZKM5pWw57uE77yf5omp5a656KeE5YiZ77yfPC9wPlxuPHA+Zm9ybe+8mjxhIGhyZWY9XCJodHRwczovL3d3dy5iaWxpYmlsaS5jb20vdmlkZW8vQlYxQ1Y0MTFkN1c4XCIgdGFyZ2V0PVwiX2JsYW5rXCIgcmVsPVwibm9vcGVuZXIgbm9yZWZlcnJlclwiPuW5vOm6n+WunumqjOWupDxPdXRib3VuZExpbmsvPjwvYT48L3A+XG48L2Jsb2NrcXVvdGU+XG4iLAogICAgImxhc3RVcGRhdGVkIjogIjYvMi8yMDIzLCA2OjM0OjAwIFBNIiwKICAgICJsYXN0VXBkYXRlZFRpbWVzdGFtcCI6IDE2ODU3MDIwNDAwMDAsCiAgICAiaGVhZGVyc1N0ciI6ICJzbGljZeexu+Wei+WtmOS7gOS5iOKdkyBtYWtl5ZKMbmV34p2TIHNsaWNl5ZKM5pWw57uE4p2TIOaJqeWuueinhOWImeKdkyAxLiDpooTkvLDmi5PlrrnlkI7lrrnph4/vvIjlhYPntKDkuKrmlbDvvIkgMi4g5Yik5pat5YaF5a2Y5aSn5bCPIDMuIOWMuemFjeWIsOWQiOmAgueahOWGheWtmOinhOagvCDlsI/nu4PkuaAiLAogICAgImNvbnRlbnQiOiAiPiBzbGljZSDnsbvlnovlrZjku4DkuYjvvJ8gbWFrZSDlkowgbmV377yfIHNsaWNlIOWSjOaVsOe7hO+8n+aJqeWuueinhOWIme+8n1xuPiBcbj4gZm9ybe+8muW5vOm6n+WunumqjOWupFxuXG5cbiMgc2xpY2Ug57G75Z6L5a2Y5LuA5LmI4p2TXG5cbiAxLiDliIfniYfmmK/ku4DkuYjnu5PmnoTvvJ9cbiAgICBcbiAgICBzbGljZSDnlLHkuInpg6jliIbnu4TmiJDvvIzliIbliKvmmK8gZGF0YeOAgWxlbuOAgWNhcFxuXG4gKiBkYXRh77ya5YWD57Sg5a2Y5ZOq6YeMXG4gKiBsZW7vvJog5bey5a2Y5YWD57SgXG4gKiBjYXDvvJog5Y+v5a2Y5YWD57SgXG5cbi8vIOeUs+aYjuWIh+eJh1xudmFyIGludHMgW11pbnQgLy8g5q2k5pe25Y+Y6YePaW50c+S4rSBbZGF0YT1uaWwgfCAwIHwgMCBdXG5cblxuMVxuMlxuXG5cblxuIyBtYWtlIOWSjCBuZXfinZNcblxuPiBtYWtlXG5cbiAxLiDliIbphY0gY2FwIOWkp+Wwj+eahOW6leWxguaVsOe7hOepuumXtFxuIDIuIOWFqOmDqOWIneWni+WMluS4uiAwXG5cbi8vIG1ha2XliJ3lp4vljJZcbnZhciBpbnRzIFtdaW50PSBtYWtlKFtdaW50LDIsNSk7IC8vIOWPmOmHj2ludHPkuK0gW2RhdGE9KOaMh+mSiClbMCwwLDAsMCwwXSB8IDIgfCA1IF1cblxuXG4xXG4yXG5cblxu5re75Yqg5LiA5Liq5YWD57Sg77yM55Sx5LqO5bey57uP5L2/55So5LqG5Lik5Liq5YWD57Sg77yM5omA5Lul5LuO56ys5LiJ5Liq5YWD57Sg5byA5aeL5re75YqgXG5cbmludHMgPSBhcHBlbmQoaW50cywxKVx0XHRcdCAvLyDlj5jph49pbnRz5LitIFtkYXRhPSjmjIfpkogpWzAsMCwxLDAsMF0gfCAzIHwgNSBdXG5cblxuMVxuXG5cbuWcqCBsZW4g6IyD5Zu05YaF55qE5YWD57Sg5Y+v5Lul5a6J5YWo6K+75YaZ77yM6LaF5Ye66IyD5Zu05YiZ5LyaIHBhbmljXG5cbmludHNbMF0gPSAxOyAvLyByaWdodFxuaW50c1szXSA9IDE7IC8vIHBhbmljXG5cblxuMVxuMlxuXG5cblxuXG4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbj4gbmV3XG5cbiAxLiDkuI3kvJrliIbphY3lupXlsYLmlbDnu4TnmoTlnLDlnYDnqbrpl7RcbiAyLiDov5Tlm57lgLzkuLogc2xpY2Ug55qE6LW35aeL5oyH6ZKIXG5cbi8vIG5ld+WIneWni+WMllxucHMgOj0gbmV3KFtdc3RyaW5nKSAvLyBbZGF0YSA9IG5pbCB8IDAgfCAwIF1cblxuXG4xXG4yXG5cblxu55Sx5LqO5rKh5pyJ5bqV5bGC5pWw57uE77yM55u05o6l5pON5L2cIHBzIOS8miBwYW5pY1xuXG4oKnBzKVswXSA9IFwiZWdnb1wiIC8vIHBhbmljXG5cblxuMVxuXG5cbumAmui/hyBhcHBlbmQgKCkg5Ye95pWw5p2l5YiG6YWN5bqV5bGC5pWw57uEXG5cbipwcyA9IGFwcGVuZCgqcHMsXCJlZ2dvXCIpXG5cblxuMVxuXG5cblxuXG5cbiMgc2xpY2Ug5ZKM5pWw57uE4p2TXG5cbiAqIHNsaWNlIOaTjeS9nOWFseWQjOeahOW6leWxguaVsOe7hFxuXG5hcnIgOj0gWzEwXWludHswLDEsMiwzLDQsNSw2LDcsOCw5fVxuLy8g5bem6Zet5Y+z5byAXG52YXIgczEgW11pbnQgPSBhcnJbMTo0XSAvLyBbMSAyIDNdIGxlbiA9IDMgY2FwID0gOSjnm7TmjqXliLDlpLQpXG52YXIgczIgW11pbnQgPSBhcnJbNzpdICAvLyBbNyA4IDldIGxlbiA9IDMgY2FwID0gM1xuXG5cbjFcbjJcbjNcbjRcblxuXG5cblxuICog5YaN57uZIHMyIOa3u+WKoOWFg+e0oFxuICAgKiDlvIDovp/mlrDnmoTlupXlsYLmlbDnu4RcbiAgICog5ou36LSd5Y6f5p2l55qE5bqV5bGC5pWw57uE77yIczIg5omA5L2/55So55qE6YOo5YiG77yJXG4gICAqIOWGjea3u+WKoOaWsOeahOWFg+e0oFxuICAgKiDkv67mlLkgbGVuIOWSjCBjYXBcblxuczIgPSBhcHBlbmQoczIsMTApIFxuXG5cbjFcblxuXG5cblxuXG4jIOaJqeWuueinhOWImeKdk1xuXG5cbiMgMS4g6aKE5Lyw5ouT5a655ZCO5a656YeP77yI5YWD57Sg5Liq5pWw77yJXG5cbi8vIGdvIDEuOS41IHNyYy9ydW50aW1lL3NsaWNlLmdvOjgyXG5mdW5jIGdyb3dzbGljZShldCAqX3R5cGUsIG9sZCBzbGljZSwgY2FwIGludCkgc2xpY2Uge1xuICAgIC8vIOKApuKAplxuICAgIG5ld2NhcCA6PSBvbGQuY2FwXG4gICAgZG91YmxlY2FwIDo9IG5ld2NhcCArIG5ld2NhcFxuICAgIGlmIGNhcCA+IGRvdWJsZWNhcCB7XG4gICAgICAgIG5ld2NhcCA9IGNhcFxuICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIG9sZC5sZW4gPCAxMDI0IHtcbiAgICAgICAgICAgIG5ld2NhcCA9IGRvdWJsZWNhcFxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZm9yIG5ld2NhcCA8IGNhcCB7XG4gICAgICAgICAgICAgICAgbmV3Y2FwICs9IG5ld2NhcCAvIDRcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyDigKbigKZcblxuICAgIGNhcG1lbSA9IHJvdW5kdXBzaXplKHVpbnRwdHIobmV3Y2FwKSAqIHB0clNpemUpXG4gICAgbmV3Y2FwID0gaW50KGNhcG1lbSAvIHB0clNpemUpXG59XG5cblxuMVxuMlxuM1xuNFxuNVxuNlxuN1xuOFxuOVxuMTBcbjExXG4xMlxuMTNcbjE0XG4xNVxuMTZcbjE3XG4xOFxuMTlcbjIwXG4yMVxuXG5cbuWmguaenOWPqueci+WJjeWNiumDqOWIhu+8jOeOsOWcqOe9keS4iuWQhOenjeaWh+eroOmHjOivtOeahCBuZXdjYXAg55qE6KeE5b6L5piv5a+555qE44CC546w5a6e5piv77yM5ZCO5Y2K6YOo5YiG6L+Y5a+5IG5ld2NhcCDkvZzkuobkuIDkuKog5YaF5a2Y5a+56b2QIO+8jOi/meS4quWSjOWGheWtmOWIhumFjeetlueVpeebuOWFs+OAgui/m+ihjOWGheWtmOWvuem9kOS5i+WQju+8jOaWsCBzbGljZSDnmoTlrrnph4/mmK/opoEg5aSn5LqO562J5LqOIOiAgSBzbGljZSDlrrnph4/nmoQgMuWAjSDmiJbogIUgMS4yNeWAjSDjgIJcblxu5LmL5ZCO77yM5ZCRIEdvIOWGheWtmOeuoeeQhuWZqOeUs+ivt+WGheWtmO+8jOWwhuiAgSBzbGljZSDkuK3nmoTmlbDmja7lpI3liLbov4fljrvvvIzlubbkuJTlsIYgYXBwZW5kIOeahOWFg+e0oOa3u+WKoOWIsOaWsOeahOW6leWxguaVsOe7hOS4reOAglxuXG7mnIDlkI7vvIzlkJEgZ3Jvd3NsaWNlIOWHveaVsOiwg+eUqOiAhei/lOWbnuS4gOS4quaWsOeahCBzbGljZe+8jOi/meS4qiBzbGljZSDnmoTplb/luqblubbmsqHmnInlj5jljJbvvIzogIzlrrnph4/ljbTlop7lpKfkuobjgIJcblxuIDEuIOWmguaenOacn+acm+WuuemHj+Wkp+S6juW9k+WJjeWuuemHj+eahOS4pOWAjeWwseS8muS9v+eUqOacn+acm+WuuemHj++8m1xuIDIuIOWmguaenOW9k+WJjeWIh+eJh+eahOmVv+W6puWwj+S6jiAxMDI0IOWwseS8muWwhuWuuemHj+e/u+WAje+8m1xuIDMuIOWmguaenOW9k+WJjeWIh+eJh+eahOmVv+W6puWkp+S6jiAxMDI0IO+8jOeUseS6juacieWGheWtmOWvuem9kO+8jOavj+asoeS8muWkp+S6juWOn+WumueahCAxLjI1IOS4gOeCue+8m1xuXG4vLyDlpoLmnpzmnJ/mnJvlrrnph4/lpKfkuo7lvZPliY3lrrnph4/nmoTkuKTlgI3lsLHkvJrkvb/nlKjmnJ/mnJvlrrnph4/vvJtcbmludHMgOj0gW11pbnR7MSwyfVxuaW50cyA9IGFwcG5lZChpbnRzW10sMyw0LDUpXG4vLyDmraTml7ZpbnRzIGxlbiA9IDLvvIznv7vlgI3lkI4gPSA077yM6ICM5pyf5pyb5a656YeP5pivIDIgKyAzID0gNVxuLy8g5Lmf5bCx5piv5pyb5a656YeP5aSn5LqO5b2T5YmN5a656YeP55qE5Lik5YCNXG4vLyDmraTml7blrrnph48gPSDmnJ/mnJvlrrnph48gPSA1XG5cblxuMVxuMlxuM1xuNFxuNVxuNlxuXG5cblxuIyAyLiDliKTmlq3lhoXlrZjlpKflsI9cblxu56ys5LiA5q2l55qE6aKE5Lyw5a656YeP5LuF5piv5Liq5pWw77yM5a6e6ZmF55qE5YWD57Sg6L+Y6KaB6ICD6JmR5aSn5bCP77yM5Lmf5bCx5piv5a656YePID0g5YWD57Sg5Liq5pWwICog5YWD57Sg57G75Z6L5aSn5bCPXG5cblxuIyAzLiDljLnphY3liLDlkIjpgILnmoTlhoXlrZjop4TmoLxcblxuICog5rWB56iL77ya5a656YePIDwtLS0+IEdvIOivreiogOWGheWtmOeuoeeQhuaooeWdlyA8LS0tPiDmk43kvZzns7vnu59cblxu5b2T54S25bm25LiN5piv55u05o6l5YiG6YWN6K6h566X5Ye655qE5a656YeP5bCxIG9rIOS6hu+8jOWcqOWkmuaVsOe8lueoi+ivreiogOS4re+8jOeUs+ivt+WIhumFjeWGheWtmOW5tuS4jeaYr+ebtOaOpeS4juaTjeS9nOezu+e7n+S6pOa2ie+8jOiAjOaYr+S4juivreiogOiHqui6q+WunueOsOeahOWGheWtmOeuoeeQhuaooeWdl++8jOWGheWtmOeuoeeQhuaooeWdl+S8muaPkOWJjeWQkeaTjeS9nOezu+e7n+eUs+ivt+S4gOWdl+WGheWtmO+8jOS4gOiIrOaYryAyIOeahOaVtOaVsOWAje+8iDjjgIExNuOAgTMy44CBNjTjgIE4MOOAgTk244CBMTEyLi4u77yJ54S25ZCO5YiG5oiQ5bi455So55qE6KeE5qC8566h55CG6LW35p2l77yM55Sz6K+35YaF5a2Y5pe25Lya5Yy56YWN5Yiw6Laz5aSf5aSn5LiU5o6l6L+R55qE5YaF5a2YXG5cblxuIyDlsI/nu4PkuaBcblxuIiwKICAgICJub3JtYWxpemVkQ29udGVudCI6ICI+IHNsaWNlIOexu+Wei+WtmOS7gOS5iO+8nyBtYWtlIOWSjCBuZXfvvJ8gc2xpY2Ug5ZKM5pWw57uE77yf5omp5a656KeE5YiZ77yfXG4+IFxuPiBmb3Jt77ya5bm86bqf5a6e6aqM5a6kXG5cblxuIyBzbGljZSDnsbvlnovlrZjku4DkuYjinZNcblxuIDEuIOWIh+eJh+aYr+S7gOS5iOe7k+aehO+8n1xuICAgIFxuICAgIHNsaWNlIOeUseS4iemDqOWIhue7hOaIkO+8jOWIhuWIq+aYryBkYXRh44CBbGVu44CBY2FwXG5cbiAqIGRhdGHvvJrlhYPntKDlrZjlk6rph4xcbiAqIGxlbu+8miDlt7LlrZjlhYPntKBcbiAqIGNhcO+8miDlj6/lrZjlhYPntKBcblxuLy8g55Sz5piO5YiH54mHXG52YXIgaW50cyBbXWludCAvLyDmraTml7blj5jph49pbnRz5LitIFtkYXRhPW5pbCB8IDAgfCAwIF1cblxuXG4xXG4yXG5cblxuXG4jIG1ha2Ug5ZKMIG5ld+Kdk1xuXG4+IG1ha2VcblxuIDEuIOWIhumFjSBjYXAg5aSn5bCP55qE5bqV5bGC5pWw57uE56m66Ze0XG4gMi4g5YWo6YOo5Yid5aeL5YyW5Li6IDBcblxuLy8gbWFrZeWIneWni+WMllxudmFyIGludHMgW11pbnQ9IG1ha2UoW11pbnQsMiw1KTsgLy8g5Y+Y6YePaW50c+S4rSBbZGF0YT0o5oyH6ZKIKVswLDAsMCwwLDBdIHwgMiB8IDUgXVxuXG5cbjFcbjJcblxuXG7mt7vliqDkuIDkuKrlhYPntKDvvIznlLHkuo7lt7Lnu4/kvb/nlKjkuobkuKTkuKrlhYPntKDvvIzmiYDku6Xku47nrKzkuInkuKrlhYPntKDlvIDlp4vmt7vliqBcblxuaW50cyA9IGFwcGVuZChpbnRzLDEpXHRcdFx0IC8vIOWPmOmHj2ludHPkuK0gW2RhdGE9KOaMh+mSiClbMCwwLDEsMCwwXSB8IDMgfCA1IF1cblxuXG4xXG5cblxu5ZyoIGxlbiDojIPlm7TlhoXnmoTlhYPntKDlj6/ku6Xlronlhajor7vlhpnvvIzotoXlh7rojIPlm7TliJnkvJogcGFuaWNcblxuaW50c1swXSA9IDE7IC8vIHJpZ2h0XG5pbnRzWzNdID0gMTsgLy8gcGFuaWNcblxuXG4xXG4yXG5cblxuXG5cbi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuPiBuZXdcblxuIDEuIOS4jeS8muWIhumFjeW6leWxguaVsOe7hOeahOWcsOWdgOepuumXtFxuIDIuIOi/lOWbnuWAvOS4uiBzbGljZSDnmoTotbflp4vmjIfpkohcblxuLy8gbmV35Yid5aeL5YyWXG5wcyA6PSBuZXcoW11zdHJpbmcpIC8vIFtkYXRhID0gbmlsIHwgMCB8IDAgXVxuXG5cbjFcbjJcblxuXG7nlLHkuo7msqHmnInlupXlsYLmlbDnu4TvvIznm7TmjqXmk43kvZwgcHMg5LyaIHBhbmljXG5cbigqcHMpWzBdID0gXCJlZ2dvXCIgLy8gcGFuaWNcblxuXG4xXG5cblxu6YCa6L+HIGFwcGVuZCAoKSDlh73mlbDmnaXliIbphY3lupXlsYLmlbDnu4RcblxuKnBzID0gYXBwZW5kKCpwcyxcImVnZ29cIilcblxuXG4xXG5cblxuXG5cblxuIyBzbGljZSDlkozmlbDnu4TinZNcblxuICogc2xpY2Ug5pON5L2c5YWx5ZCM55qE5bqV5bGC5pWw57uEXG5cbmFyciA6PSBbMTBdaW50ezAsMSwyLDMsNCw1LDYsNyw4LDl9XG4vLyDlt6bpl63lj7PlvIBcbnZhciBzMSBbXWludCA9IGFyclsxOjRdIC8vIFsxIDIgM10gbGVuID0gMyBjYXAgPSA5KOebtOaOpeWIsOWktClcbnZhciBzMiBbXWludCA9IGFycls3Ol0gIC8vIFs3IDggOV0gbGVuID0gMyBjYXAgPSAzXG5cblxuMVxuMlxuM1xuNFxuXG5cblxuXG4gKiDlho3nu5kgczIg5re75Yqg5YWD57SgXG4gICAqIOW8gOi+n+aWsOeahOW6leWxguaVsOe7hFxuICAgKiDmi7fotJ3ljp/mnaXnmoTlupXlsYLmlbDnu4TvvIhzMiDmiYDkvb/nlKjnmoTpg6jliIbvvIlcbiAgICog5YaN5re75Yqg5paw55qE5YWD57SgXG4gICAqIOS/ruaUuSBsZW4g5ZKMIGNhcFxuXG5zMiA9IGFwcGVuZChzMiwxMCkgXG5cblxuMVxuXG5cblxuXG5cbiMg5omp5a656KeE5YiZ4p2TXG5cblxuIyAxLiDpooTkvLDmi5PlrrnlkI7lrrnph4/vvIjlhYPntKDkuKrmlbDvvIlcblxuLy8gZ28gMS45LjUgc3JjL3J1bnRpbWUvc2xpY2UuZ286ODJcbmZ1bmMgZ3Jvd3NsaWNlKGV0ICpfdHlwZSwgb2xkIHNsaWNlLCBjYXAgaW50KSBzbGljZSB7XG4gICAgLy8g4oCm4oCmXG4gICAgbmV3Y2FwIDo9IG9sZC5jYXBcbiAgICBkb3VibGVjYXAgOj0gbmV3Y2FwICsgbmV3Y2FwXG4gICAgaWYgY2FwID4gZG91YmxlY2FwIHtcbiAgICAgICAgbmV3Y2FwID0gY2FwXG4gICAgfSBlbHNlIHtcbiAgICAgICAgaWYgb2xkLmxlbiA8IDEwMjQge1xuICAgICAgICAgICAgbmV3Y2FwID0gZG91YmxlY2FwXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmb3IgbmV3Y2FwIDwgY2FwIHtcbiAgICAgICAgICAgICAgICBuZXdjYXAgKz0gbmV3Y2FwIC8gNFxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8vIOKApuKAplxuXG4gICAgY2FwbWVtID0gcm91bmR1cHNpemUodWludHB0cihuZXdjYXApICogcHRyc2l6ZSlcbiAgICBuZXdjYXAgPSBpbnQoY2FwbWVtIC8gcHRyc2l6ZSlcbn1cblxuXG4xXG4yXG4zXG40XG41XG42XG43XG44XG45XG4xMFxuMTFcbjEyXG4xM1xuMTRcbjE1XG4xNlxuMTdcbjE4XG4xOVxuMjBcbjIxXG5cblxu5aaC5p6c5Y+q55yL5YmN5Y2K6YOo5YiG77yM546w5Zyo572R5LiK5ZCE56eN5paH56ug6YeM6K+055qEIG5ld2NhcCDnmoTop4TlvovmmK/lr7nnmoTjgILnjrDlrp7mmK/vvIzlkI7ljYrpg6jliIbov5jlr7kgbmV3Y2FwIOS9nOS6huS4gOS4qiDlhoXlrZjlr7npvZAg77yM6L+Z5Liq5ZKM5YaF5a2Y5YiG6YWN562W55Wl55u45YWz44CC6L+b6KGM5YaF5a2Y5a+56b2Q5LmL5ZCO77yM5pawIHNsaWNlIOeahOWuuemHj+aYr+imgSDlpKfkuo7nrYnkuo4g6ICBIHNsaWNlIOWuuemHj+eahCAy5YCNIOaIluiAhSAxLjI15YCNIOOAglxuXG7kuYvlkI7vvIzlkJEgZ28g5YaF5a2Y566h55CG5Zmo55Sz6K+35YaF5a2Y77yM5bCG6ICBIHNsaWNlIOS4reeahOaVsOaNruWkjeWItui/h+WOu++8jOW5tuS4lOWwhiBhcHBlbmQg55qE5YWD57Sg5re75Yqg5Yiw5paw55qE5bqV5bGC5pWw57uE5Lit44CCXG5cbuacgOWQju+8jOWQkSBncm93c2xpY2Ug5Ye95pWw6LCD55So6ICF6L+U5Zue5LiA5Liq5paw55qEIHNsaWNl77yM6L+Z5LiqIHNsaWNlIOeahOmVv+W6puW5tuayoeacieWPmOWMlu+8jOiAjOWuuemHj+WNtOWinuWkp+S6huOAglxuXG4gMS4g5aaC5p6c5pyf5pyb5a656YeP5aSn5LqO5b2T5YmN5a656YeP55qE5Lik5YCN5bCx5Lya5L2/55So5pyf5pyb5a656YeP77ybXG4gMi4g5aaC5p6c5b2T5YmN5YiH54mH55qE6ZW/5bqm5bCP5LqOIDEwMjQg5bCx5Lya5bCG5a656YeP57+75YCN77ybXG4gMy4g5aaC5p6c5b2T5YmN5YiH54mH55qE6ZW/5bqm5aSn5LqOIDEwMjQg77yM55Sx5LqO5pyJ5YaF5a2Y5a+56b2Q77yM5q+P5qyh5Lya5aSn5LqO5Y6f5a6a55qEIDEuMjUg5LiA54K577ybXG5cbi8vIOWmguaenOacn+acm+WuuemHj+Wkp+S6juW9k+WJjeWuuemHj+eahOS4pOWAjeWwseS8muS9v+eUqOacn+acm+WuuemHj++8m1xuaW50cyA6PSBbXWludHsxLDJ9XG5pbnRzID0gYXBwbmVkKGludHNbXSwzLDQsNSlcbi8vIOatpOaXtmludHMgbGVuID0gMu+8jOe/u+WAjeWQjiA9IDTvvIzogIzmnJ/mnJvlrrnph4/mmK8gMiArIDMgPSA1XG4vLyDkuZ/lsLHmmK/mnJvlrrnph4/lpKfkuo7lvZPliY3lrrnph4/nmoTkuKTlgI1cbi8vIOatpOaXtuWuuemHjyA9IOacn+acm+WuuemHjyA9IDVcblxuXG4xXG4yXG4zXG40XG41XG42XG5cblxuXG4jIDIuIOWIpOaWreWGheWtmOWkp+Wwj1xuXG7nrKzkuIDmraXnmoTpooTkvLDlrrnph4/ku4XmmK/kuKrmlbDvvIzlrp7pmYXnmoTlhYPntKDov5jopoHogIPomZHlpKflsI/vvIzkuZ/lsLHmmK/lrrnph48gPSDlhYPntKDkuKrmlbAgKiDlhYPntKDnsbvlnovlpKflsI9cblxuXG4jIDMuIOWMuemFjeWIsOWQiOmAgueahOWGheWtmOinhOagvFxuXG4gKiDmtYHnqIvvvJrlrrnph48gPC0tLT4gZ28g6K+t6KiA5YaF5a2Y566h55CG5qih5Z2XIDwtLS0+IOaTjeS9nOezu+e7n1xuXG7lvZPnhLblubbkuI3mmK/nm7TmjqXliIbphY3orqHnrpflh7rnmoTlrrnph4/lsLEgb2sg5LqG77yM5Zyo5aSa5pWw57yW56iL6K+t6KiA5Lit77yM55Sz6K+35YiG6YWN5YaF5a2Y5bm25LiN5piv55u05o6l5LiO5pON5L2c57O757uf5Lqk5raJ77yM6ICM5piv5LiO6K+t6KiA6Ieq6Lqr5a6e546w55qE5YaF5a2Y566h55CG5qih5Z2X77yM5YaF5a2Y566h55CG5qih5Z2X5Lya5o+Q5YmN5ZCR5pON5L2c57O757uf55Sz6K+35LiA5Z2X5YaF5a2Y77yM5LiA6Iis5pivIDIg55qE5pW05pWw5YCN77yIOOOAgTE244CBMzLjgIE2NOOAgTgw44CBOTbjgIExMTIuLi7vvInnhLblkI7liIbmiJDluLjnlKjnmoTop4TmoLznrqHnkIbotbfmnaXvvIznlLPor7flhoXlrZjml7bkvJrljLnphY3liLDotrPlpJ/lpKfkuJTmjqXov5HnmoTlhoXlrZhcblxuXG4jIOWwj+e7g+S5oFxuXG4iLAogICAgImNoYXJzZXRzIjogewogICAgICAiY2prIjogdHJ1ZQogICAgfQogIH0sIHsKICAgICJ0aXRsZSI6ICJEYXkwMy3pk77ooagiLAogICAgImZyb250bWF0dGVyIjogewogICAgICAidGl0bGUiOiAiRGF5MDMt6ZO+6KGoIiwKICAgICAgImRhdGUiOiAiMjAyMy0wNS0yNlQwMDo1NTozNC4wMDBaIiwKICAgICAgInBlcm1hbGluayI6ICIvcGFnZXMvMmM1MDA5LyIsCiAgICAgICJjYXRlZ29yaWVzIjogWyLnrpfms5UiLCAi566X5rOV5omT5Y2hIl0sCiAgICAgICJ0YWdzIjogWyLmiZPljaEiXQogICAgfSwKICAgICJyZWd1bGFyUGF0aCI6ICIvMDIuJUU3JUFFJTk3JUU2JUIzJTk1LzAxLiVFNyVBRSU5NyVFNiVCMyU5NSVFNiU4OSU5MyVFNSU4RCVBMS8wMy5EYXkwMy0lRTklOTMlQkUlRTglQTElQTguaHRtbCIsCiAgICAicmVsYXRpdmVQYXRoIjogIjAyLueul+azlS8wMS7nrpfms5XmiZPljaEvMDMuRGF5MDMt6ZO+6KGoLm1kIiwKICAgICJrZXkiOiAidi1jMDQyYjM4OCIsCiAgICAicGF0aCI6ICIvcGFnZXMvMmM1MDA5LyIsCiAgICAiaGVhZGVycyI6IFt7CiAgICAgICJsZXZlbCI6IDIsCiAgICAgICJ0aXRsZSI6ICLpk77ooajnkIborrrln7rnoYAiLAogICAgICAic2x1ZyI6ICLpk77ooajnkIborrrln7rnoYAiLAogICAgICAibm9ybWFsaXplZFRpdGxlIjogIumTvuihqOeQhuiuuuWfuuehgCIsCiAgICAgICJjaGFySW5kZXgiOiA1MQogICAgfSwgewogICAgICAibGV2ZWwiOiAyLAogICAgICAidGl0bGUiOiAiMjAzLuenu+mZpOmTvuihqOWFg+e0oCIsCiAgICAgICJzbHVnIjogIl8yMDMt56e76Zmk6ZO+6KGo5YWD57SgIiwKICAgICAgIm5vcm1hbGl6ZWRUaXRsZSI6ICIyMDMuIOenu+mZpOmTvuihqOWFg+e0oCIsCiAgICAgICJjaGFySW5kZXgiOiA5OAogICAgfSwgewogICAgICAibGV2ZWwiOiAzLAogICAgICAidGl0bGUiOiAi5b2V5YmN5oOz5rOVIiwKICAgICAgInNsdWciOiAi5b2V5YmN5oOz5rOVIiwKICAgICAgIm5vcm1hbGl6ZWRUaXRsZSI6ICLlvZXliY3mg7Pms5UiLAogICAgICAiY2hhckluZGV4IjogMTY2CiAgICB9LCB7CiAgICAgICJsZXZlbCI6IDMsCiAgICAgICJ0aXRsZSI6ICLlvZXlkI7mg7Pms5UiLAogICAgICAic2x1ZyI6ICLlvZXlkI7mg7Pms5UiLAogICAgICAibm9ybWFsaXplZFRpdGxlIjogIuW9leWQjuaDs+azlSIsCiAgICAgICJjaGFySW5kZXgiOiA4NTIKICAgIH0sIHsKICAgICAgImxldmVsIjogMywKICAgICAgInRpdGxlIjogIuaAu+e7kyIsCiAgICAgICJzbHVnIjogIuaAu+e7kyIsCiAgICAgICJub3JtYWxpemVkVGl0bGUiOiAi5oC757uTIiwKICAgICAgImNoYXJJbmRleCI6IDQ0CiAgICB9LCB7CiAgICAgICJsZXZlbCI6IDIsCiAgICAgICJ0aXRsZSI6ICI3MDcu6K6+6K6h6ZO+6KGoIiwKICAgICAgInNsdWciOiAiXzcwNy3orr7orqHpk77ooagiLAogICAgICAibm9ybWFsaXplZFRpdGxlIjogIjcwNy4g6K6+6K6h6ZO+6KGoIiwKICAgICAgImNoYXJJbmRleCI6IDE2MDkKICAgIH0sIHsKICAgICAgImxldmVsIjogMywKICAgICAgInRpdGxlIjogIuW9leWJjeaDs+azlSIsCiAgICAgICJzbHVnIjogIuW9leWJjeaDs+azlS0yIiwKICAgICAgIm5vcm1hbGl6ZWRUaXRsZSI6ICLlvZXliY3mg7Pms5UiLAogICAgICAiY2hhckluZGV4IjogMTY2CiAgICB9LCB7CiAgICAgICJsZXZlbCI6IDMsCiAgICAgICJ0aXRsZSI6ICLlvZXlkI7mg7Pms5UiLAogICAgICAic2x1ZyI6ICLlvZXlkI7mg7Pms5UtMiIsCiAgICAgICJub3JtYWxpemVkVGl0bGUiOiAi5b2V5ZCO5oOz5rOVIiwKICAgICAgImNoYXJJbmRleCI6IDg1MgogICAgfSwgewogICAgICAibGV2ZWwiOiAzLAogICAgICAidGl0bGUiOiAi5oC757uTIiwKICAgICAgInNsdWciOiAi5oC757uTLTIiLAogICAgICAibm9ybWFsaXplZFRpdGxlIjogIuaAu+e7kyIsCiAgICAgICJjaGFySW5kZXgiOiA0NAogICAgfSwgewogICAgICAibGV2ZWwiOiAyLAogICAgICAidGl0bGUiOiAiMjA2LuWPjei9rOmTvuihqCIsCiAgICAgICJzbHVnIjogIl8yMDYt5Y+N6L2s6ZO+6KGoIiwKICAgICAgIm5vcm1hbGl6ZWRUaXRsZSI6ICIyMDYuIOWPjei9rOmTvuihqCIsCiAgICAgICJjaGFySW5kZXgiOiA2NzUyCiAgICB9LCB7CiAgICAgICJsZXZlbCI6IDMsCiAgICAgICJ0aXRsZSI6ICLlvZXliY3mg7Pms5UiLAogICAgICAic2x1ZyI6ICLlvZXliY3mg7Pms5UtMyIsCiAgICAgICJub3JtYWxpemVkVGl0bGUiOiAi5b2V5YmN5oOz5rOVIiwKICAgICAgImNoYXJJbmRleCI6IDE2NgogICAgfSwgewogICAgICAibGV2ZWwiOiAzLAogICAgICAidGl0bGUiOiAi5b2V5ZCO5oOz5rOVIiwKICAgICAgInNsdWciOiAi5b2V5ZCO5oOz5rOVLTMiLAogICAgICAibm9ybWFsaXplZFRpdGxlIjogIuW9leWQjuaDs+azlSIsCiAgICAgICJjaGFySW5kZXgiOiA4NTIKICAgIH0sIHsKICAgICAgImxldmVsIjogMywKICAgICAgInRpdGxlIjogIuaAu+e7kyIsCiAgICAgICJzbHVnIjogIuaAu+e7ky0zIiwKICAgICAgIm5vcm1hbGl6ZWRUaXRsZSI6ICLmgLvnu5MiLAogICAgICAiY2hhckluZGV4IjogNDQKICAgIH0sIHsKICAgICAgImxldmVsIjogMiwKICAgICAgInRpdGxlIjogIuaAu+e7kyIsCiAgICAgICJzbHVnIjogIuaAu+e7ky00IiwKICAgICAgIm5vcm1hbGl6ZWRUaXRsZSI6ICLmgLvnu5MiLAogICAgICAiY2hhckluZGV4IjogNDQKICAgIH1dLAogICAgImV4Y2VycHQiOiAiPGJsb2NrcXVvdGU+XG48cD45NzcuIOacieW6j+aVsOe7hOeahOW5s+aWuSDjgIEyMDkuIOmVv+W6puacgOWwj+eahOWtkOaVsOe7hCDjgIE1OS4g6J665peL55+p6Zi1IElJIOOAgeaAu+e7kzwvcD5cbjwvYmxvY2txdW90ZT5cbiIsCiAgICAibGFzdFVwZGF0ZWQiOiAiNi8yLzIwMjMsIDY6MzQ6MDAgUE0iLAogICAgImxhc3RVcGRhdGVkVGltZXN0YW1wIjogMTY4NTcwMjA0MDAwMCwKICAgICJoZWFkZXJzU3RyIjogIumTvuihqOeQhuiuuuWfuuehgCAyMDMu56e76Zmk6ZO+6KGo5YWD57SgIOW9leWJjeaDs+azlSDlvZXlkI7mg7Pms5Ug5oC757uTIDcwNy7orr7orqHpk77ooagg5b2V5YmN5oOz5rOVIOW9leWQjuaDs+azlSDmgLvnu5MgMjA2LuWPjei9rOmTvuihqCDlvZXliY3mg7Pms5Ug5b2V5ZCO5oOz5rOVIOaAu+e7kyDmgLvnu5MiLAogICAgImNvbnRlbnQiOiAiPiA5NzcuIOacieW6j+aVsOe7hOeahOW5s+aWuSDjgIEyMDkuIOmVv+W6puacgOWwj+eahOWtkOaVsOe7hCDjgIE1OS4g6J665peL55+p6Zi1IElJIOOAgeaAu+e7k1xuXG5cbiMg6ZO+6KGo55CG6K665Z+656GAXG5cbiAqIOiusuino++8muaWh+eroOiusuino1xuICog6KaB5rGC77ya5LqG6Kej6ZO+5o6l5Z+656GA77yM5Lul5Y+K6ZO+6KGo5ZKM5pWw57uE55qE5Yy65YirXG5cblxuIyAyMDMuIOenu+mZpOmTvuihqOWFg+e0oFxuXG4gKiDpopjnm67vvJoyMDMuIOenu+mZpOmTvuihqOWFg+e0oFxuICog6K6y6Kej77ya5paH56ug6K6y6Kej44CB6KeG6aKR6K6y6KejXG4gKiDopoHmsYLvvJromZrmi5/lpLTnu5PngrnnmoTkvb/nlKjmioDlt6dcblxuXG4jIOW9leWJjeaDs+azlVxuXG7miJHmg7PnmoTmmK/liKTmlq3nqbrvvIzpgJrov4fomZrmi5/lpLToioLngrnmr5Tlr7nkuIvkuIDkuKroioLngrnmnaXliKDpmaTlhYPntKDvvIjmnKrpgJrov4finYzvvIlcblxuY2xhc3MgU29sdXRpb24ge1xucHVibGljOlxuICAgIExpc3ROb2RlKiByZW1vdmVFbGVtZW50cyhMaXN0Tm9kZSogaGVhZCwgaW50IHZhbCkge1xuXG4gICAgICAgIC8vIOWIpOaWreepulxuICAgICAgICBpZiAoaGVhZCA9PSBOVUxMKXtcbiAgICAgICAgICAgIHJldHVybiBoZWFkO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8g6Jma5ouf5aS06IqC54K5XG4gICAgICAgIExpc3ROb2RlKiBuZXdIZWFkID0gbmV3IExpc3ROb2RlKDApO1xuICAgICAgICBuZXdIZWFkLT5uZXh0ID0gaGVhZDtcbiAgICAgICAgLy8g5pON5L2c5oyH6ZKIXG4gICAgICAgIExpc3ROb2RlKiBjdXIgPSBuZXdIZWFkO1xuXG4gICAgICAgIHdoaWxlKGN1ci0+bmV4dCAhPSBOVUxMKXtcbiAgICAgICAgICAgIGlmKGN1ci0+bmV4dC0+dmFsID09IHZhbCl7XG4gICAgICAgICAgICAgICAgY3VyLT5uZXh0ID0gY3VyLT5uZXh0LT5uZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY3VyID0gY3VyLT5uZXh0O1xuICAgICAgICB9IFxuXG4gICAgICAgIHJldHVybiBuZXdIZWFkLT5uZXh0O1xuICAgIH1cbn07XG5cblxuMVxuMlxuM1xuNFxuNVxuNlxuN1xuOFxuOVxuMTBcbjExXG4xMlxuMTNcbjE0XG4xNVxuMTZcbjE3XG4xOFxuMTlcbjIwXG4yMVxuMjJcbjIzXG4yNFxuMjVcblxuXG7plJnlnKjnqbrmjIfpkojvvIxcblxu5Zyo5Yig6Zmk6IqC54K55ZCO77yM5aaC5p6c5LiL5LiA5Liq6IqC54K55Lmf6ZyA6KaB6KKr5Yig6Zmk77yM6YKj5LmI5b2T5YmN5oyH6ZKIIGN1ciDlupTor6Xkv53mjIHkuI3lj5jvvIzku6Xkvr/mo4Dmn6XkuIvkuIDkuKroioLngrlcblxuXG4jIOW9leWQjuaDs+azlVxuXG7nnIvov4fljaHlk6XmgJ3ot6/lkI7lj5HnjrBcblxuIDEuIOWBmuS6huWIoOmZpOiKgueCueWIpOaWrVxuIDIuIOWGheWtmOeuoeeQhu+8iOmUgOavgeWIoOmZpOiKgueCueWGheWtmO+8iVxuXG5jbGFzcyBTb2x1dGlvbiB7XG5wdWJsaWM6XG4gICAgTGlzdE5vZGUqIHJlbW92ZUVsZW1lbnRzKExpc3ROb2RlKiBoZWFkLCBpbnQgdmFsKSB7XG5cbiAgICAgICAgLy8g5Yik5pat56m6XG4gICAgICAgIGlmIChoZWFkID09IE5VTEwpe1xuICAgICAgICAgICAgcmV0dXJuIGhlYWQ7XG4gICAgICAgIH1cblxuICAgICAgICAvLyDomZrmi5/lpLToioLngrlcbiAgICAgICAgTGlzdE5vZGUqIG5ld0hlYWQgPSBuZXcgTGlzdE5vZGUoMCk7XG4gICAgICAgIG5ld0hlYWQtPm5leHQgPSBoZWFkO1xuICAgICAgICAvLyDmk43kvZzmjIfpkohcbiAgICAgICAgTGlzdE5vZGUqIGN1ciA9IG5ld0hlYWQ7XG5cbiAgICAgICAgd2hpbGUoY3VyLT5uZXh0ICE9IE5VTEwpe1xuICAgICAgICAgICAgaWYoY3VyLT5uZXh0LT52YWwgPT0gdmFsKXtcbiAgICAgICAgICAgICAgICBMaXN0Tm9kZSogdG1wID0gY3VyLT5uZXh0O1xuICAgICAgICAgICAgICAgIGN1ci0+bmV4dCA9IGN1ci0+bmV4dC0+bmV4dDtcbiAgICAgICAgICAgICAgICBkZWxldGUgdG1wOyAvLyDplIDmr4HlhoXlrZhcbiAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgIGN1ciA9IGN1ci0+bmV4dDtcbiAgICAgICAgICAgIH0gIFxuICAgICAgICB9IFxuXG4gICAgICAgIHJldHVybiBuZXdIZWFkLT5uZXh0O1xuICAgIH1cbn07XG5cblxuMVxuMlxuM1xuNFxuNVxuNlxuN1xuOFxuOVxuMTBcbjExXG4xMlxuMTNcbjE0XG4xNVxuMTZcbjE3XG4xOFxuMTlcbjIwXG4yMVxuMjJcbjIzXG4yNFxuMjVcbjI2XG4yN1xuMjhcblxuXG5cbiMg5oC757uTXG5cblxuIyA3MDcuIOiuvuiuoemTvuihqFxuXG4gKiDpopjnm67vvJo3MDcuIOiuvuiuoemTvuihqFxuICog6K6y6Kej77ya5paH56ug6K6y6Kej44CB6KeG6aKR6K6y6KejXG4gKiDopoHmsYLvvJrmjozmj6Hpk77ooajnu7zlkIjmk43kvZxcblxuXG4jIOW9leWJjeaDs+azlVxuXG7lnY7lnY7lnbflnbfnmoTvvIzmsqHmnInlhpnlh7rmnaXvvIzkuI3nn6XpgZPku47kvZXkuIvmiYtcblxu55yL5LqG5LiA55y85Y2h5ZOl55qE5Luj56CB77yM5Y+R546w6KaB6Ieq5bex5a6a5LmJ57uT5p6E5L2T77yM6Ieq5bex5YaZ5p6E6YCg5Ye95pWw8J+Yk1xuXG7kuIvpnaLmmK/nrKzkuIDmrKHmj5DkuqTnmoTplJnor6/ku6PnoIHvvIjinYzvvIlcblxuY2xhc3MgTXlMaW5rZWRMaXN0IHtcbnB1YmxpYzpcbiAgICAvLyDlrprkuYnpk77ooajoioLngrnnu5PmnoTkvZNcbiAgICBzdHJ1Y3QgTGlua2VkTm9kZSB7XG4gICAgICAgIGludCB2YWw7XG4gICAgICAgIExpbmtlZE5vZGUqIG5leHQ7XG4gICAgICAgIExpbmtlZE5vZGUoaW50IHZhbCk6dmFsKHZhbCksIG5leHQobnVsbHB0cil7fVxuICAgIH07XG5cbiAgICBNeUxpbmtlZExpc3QoKSB7XG4gICAgICAgIGhlYWQgPSBuZXcgTGlua2VkTm9kZSgwKTtcbiAgICAgICAgc2l6ZSA9IDA7XG4gICAgfVxuXG4gICAgaW50IGdldChpbnQgaW5kZXgpIHtcbiAgICAgICAgLy8gaW5kZXjooajnpLrkuIvmoIfku44w5byA5aeLXG4gICAgICAgIGlmKGluZGV4ID4gc2l6ZSAtIDEgfHwgaW5kZXggPCAwKXtcbiAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgfVxuXG4gICAgICAgIExpbmtlZE5vZGUqIGN1ciA9IGhlYWQtPm5leHQ7XG4gICAgICAgIHdoaWxlKGluZGV4LS0pe1xuICAgICAgICAgICAgY3VyID0gY3VyLT5uZXh0O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjdXItPnZhbDtcbiAgICB9XG4gICAgXG4gICAgdm9pZCBhZGRBdEhlYWQoaW50IHZhbCkge1xuICAgICAgICBMaW5rZWROb2RlKiBub2RlID0gbmV3IExpbmtlZE5vZGUodmFsKTtcbiAgICAgICAgbm9kZS0+bmV4dCA9IGhlYWQtPm5leHQ7XG4gICAgICAgIGhlYWQtPm5leHQgPSBub2RlO1xuICAgICAgICArK3NpemU7XG4gICAgfVxuICAgIFxuICAgIHZvaWQgYWRkQXRUYWlsKGludCB2YWwpIHtcbiAgICAgICAgTGlua2VkTm9kZSogbm9kZSA9IG5ldyBMaW5rZWROb2RlKHZhbCk7XG4gICAgICAgIExpbmtlZE5vZGUqIGN1ciA9IGhlYWQtPm5leHQ7XG4gICAgICAgIHdoaWxlKGN1ci0+bmV4dCl7XG4gICAgICAgICAgICBjdXIgPSBjdXItPm5leHQ7XG4gICAgICAgIH1cbiAgICAgICAgY3VyLT5uZXh0ID0gbm9kZTtcbiAgICAgICAgKytzaXplO1xuICAgIH1cbiAgICBcbiAgICB2b2lkIGFkZEF0SW5kZXgoaW50IGluZGV4LCBpbnQgdmFsKSB7XG4gICAgICAgIC8vIGluZGV46KGo56S65LiL5qCH5LuOMOW8gOWni1xuICAgICAgICBpZihpbmRleCA+IHNpemUpe1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmKGluZGV4IDwgMCl7XG4gICAgICAgICAgICBhZGRBdEhlYWQodmFsKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIExpbmtlZE5vZGUqIGN1ciA9IGhlYWQ7XG4gICAgICAgIHdoaWxlKGluZGV4LS0pe1xuICAgICAgICAgICAgY3VyID0gY3VyLT5uZXh0O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gMS0+MlxuICAgICAgICBMaW5rZWROb2RlKiBub2RlID0gbmV3IExpbmtlZE5vZGUodmFsKTtcbiAgICAgICAgLy8gMi0+M1xuICAgICAgICBub2RlLT5uZXh0ID0gY3VyLT5uZXh0O1xuICAgICAgICAvLyAxLT4yLT4zXG4gICAgICAgIGN1ci0+bmV4dCA9IG5vZGU7XG4gICAgICAgIHNpemUrKztcbiAgICB9XG4gICAgXG4gICAgdm9pZCBkZWxldGVBdEluZGV4KGludCBpbmRleCkge1xuICAgICAgICAvLyBpbmRleOihqOekuuS4i+agh+S7jjDlvIDlp4tcbiAgICAgICAgaWYoaW5kZXggPj0gc2l6ZSAtIDEgfHwgaW5kZXggPCAwKXtyZXR1cm47fVxuXG4gICAgICAgIC8vIOiOt+WPluW+heWIoOmZpOWFg+e0oOeahOWJjeS4gOS4quWFg+e0oFxuICAgICAgICBMaW5rZWROb2RlKiBjdXIgPSBoZWFkO1xuICAgICAgICB3aGlsZShpbmRleC0tKXtcbiAgICAgICAgICAgIGN1ciA9IGN1ci0+bmV4dDtcbiAgICAgICAgfVxuXG4gICAgICAgIExpbmtlZE5vZGUqIHRtcCA9IGN1ci0+bmV4dDtcbiAgICAgICAgY3VyLT5uZXh0ID0gY3VyLT5uZXh0LT5uZXh0O1xuICAgICAgICBkZWxldGUgdG1wO1xuICAgICAgICB0bXAgPSBudWxscHRyO1xuXG4gICAgICAgIHNpemUtLTtcbiAgICB9XG5wcml2YXRlOlxuICAgIGludCBzaXplO1xuICAgIExpbmtlZE5vZGUqIGhlYWQ7XG59O1xuXG5cbjFcbjJcbjNcbjRcbjVcbjZcbjdcbjhcbjlcbjEwXG4xMVxuMTJcbjEzXG4xNFxuMTVcbjE2XG4xN1xuMThcbjE5XG4yMFxuMjFcbjIyXG4yM1xuMjRcbjI1XG4yNlxuMjdcbjI4XG4yOVxuMzBcbjMxXG4zMlxuMzNcbjM0XG4zNVxuMzZcbjM3XG4zOFxuMzlcbjQwXG40MVxuNDJcbjQzXG40NFxuNDVcbjQ2XG40N1xuNDhcbjQ5XG41MFxuNTFcbjUyXG41M1xuNTRcbjU1XG41NlxuNTdcbjU4XG41OVxuNjBcbjYxXG42MlxuNjNcbjY0XG42NVxuNjZcbjY3XG42OFxuNjlcbjcwXG43MVxuNzJcbjczXG43NFxuNzVcbjc2XG43N1xuNzhcbjc5XG44MFxuODFcbjgyXG44M1xuODRcbjg1XG44NlxuODdcbjg4XG44OVxuXG5cbue7j+i/h+iwg+ivleWWneaOkuafpe+8jOWPkeeOsFxuXG5pbnQgZ2V0KGludCBpbmRleCkge1xuICAgIC8vIGluZGV46KGo56S65LiL5qCH5LuOMOW8gOWni1xuICAgIGlmKGluZGV4ID4gKHNpemUgLSAxKSB8fCBpbmRleCA8IDApeyAvLyDlupTor6XopoHliqDkuIrmi6zlj7fvvIHvvIHvvIFcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgIH1cblxuICAgIC4uLlxufVxuXG5cbjFcbjJcbjNcbjRcbjVcbjZcbjdcbjhcblxuXG52b2lkIGRlbGV0ZUF0SW5kZXgoaW50IGluZGV4KSB7XG4gICAgLy8gaW5kZXjooajnpLrkuIvmoIfku44w5byA5aeLXG4gICAgaWYoaW5kZXggPj0gKHNpemUgLSAxKSB8fCBpbmRleCA8IDApe3JldHVybjt9IC8vIOW6lOivpeimgeWKoOS4iuaLrOWPt++8ge+8ge+8gVxuXG4gICAgLi4uXG59XG5cblxuMVxuMlxuM1xuNFxuNVxuNlxuXG5cblxuIyDlvZXlkI7mg7Pms5Vcblxu5LiA5Lqb5YaF5a2Y566h55CG6L+Y5LiN54af77yM5q+U5aaC5Yig6Zmk5YWD57Sg5pe2IHRtcCDnmoTlpITnkIbvvIzlj6rljZXnuq/nmoQgZGVsZXRl77yM5rKh5pyJ572u5Li656m644CCXG5cbiAgICAvLyDliKDpmaTnrKxpbmRleOS4quiKgueCue+8jOWmguaenGluZGV4IOWkp+S6juetieS6jumTvuihqOeahOmVv+W6pu+8jOebtOaOpXJldHVybu+8jOazqOaEj2luZGV45piv5LuOMOW8gOWni+eahFxuICAgIHZvaWQgZGVsZXRlQXRJbmRleChpbnQgaW5kZXgpIHtcbiAgICAgICAgLi4uXG4gICAgICAgIGRlbGV0ZSB0bXA7XG4gICAgICAgIC8vZGVsZXRl5ZG95Luk5oyH56S66YeK5pS+5LqGdG1w5oyH6ZKI5Y6f5pys5omA5oyH55qE6YKj6YOo5YiG5YaF5a2Y77yMXG4gICAgICAgIC8v6KKrZGVsZXRl5ZCO55qE5oyH6ZKIdG1w55qE5YC877yI5Zyw5Z2A77yJ5bm26Z2e5bCx5pivTlVMTO+8jOiAjOaYr+maj+acuuWAvOOAguS5n+WwseaYr+iiq2RlbGV0ZeWQju+8jFxuICAgICAgICAvL+WmguaenOS4jeWGjeWKoOS4iuS4gOWPpXRtcD1udWxscHRyLHRtcOS8muaIkOS4uuS5seaMh+eahOmHjuaMh+mSiFxuICAgICAgICAvL+WmguaenOS5i+WQjueahOeoi+W6j+S4jeWwj+W/g+S9v+eUqOS6hnRtcO+8jOS8muaMh+WQkemavuS7pemihOaDs+eahOWGheWtmOepuumXtFxuICAgICAgICB0bXA9bnVsbHB0cjtcbiAgICAgICAgX3NpemUtLTtcbiAgICB9XG5cblxuMVxuMlxuM1xuNFxuNVxuNlxuN1xuOFxuOVxuMTBcbjExXG5cblxu5Lul5LiL5piv5ZCO6Z2i57uT5ZCI5Y2h5ZOl6K6y6Kej5ZCO55qE5Luj56CB77yI4pyF77yJXG5cbmNsYXNzIE15TGlua2VkTGlzdCB7XG5wdWJsaWM6XG4gICAgLy8g5a6a5LmJ6ZO+6KGo6IqC54K557uT5p6E5L2TXG4gICAgc3RydWN0IExpbmtlZE5vZGUge1xuICAgICAgICBpbnQgdmFsO1xuICAgICAgICBMaW5rZWROb2RlKiBuZXh0O1xuICAgICAgICBMaW5rZWROb2RlKGludCB2YWwpOnZhbCh2YWwpLCBuZXh0KG51bGxwdHIpe31cbiAgICB9O1xuXG4gICAgTXlMaW5rZWRMaXN0KCkge1xuICAgICAgICBoZWFkID0gbmV3IExpbmtlZE5vZGUoMCk7XG4gICAgICAgIHNpemUgPSAwO1xuICAgIH1cblxuICAgIGludCBnZXQoaW50IGluZGV4KSB7XG4gICAgICAgIC8vIGluZGV46KGo56S65LiL5qCH5LuOMOW8gOWni1xuICAgICAgICBpZihpbmRleCA+IChzaXplIC0gMSkgfHwgaW5kZXggPCAwKXtcbiAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgfVxuXG4gICAgICAgIExpbmtlZE5vZGUqIGN1ciA9IGhlYWQtPm5leHQ7XG4gICAgICAgIHdoaWxlKGluZGV4LS0pe1xuICAgICAgICAgICAgY3VyID0gY3VyLT5uZXh0O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjdXItPnZhbDtcbiAgICB9XG4gICAgXG4gICAgdm9pZCBhZGRBdEhlYWQoaW50IHZhbCkge1xuICAgICAgICBMaW5rZWROb2RlKiBub2RlID0gbmV3IExpbmtlZE5vZGUodmFsKTtcbiAgICAgICAgbm9kZS0+bmV4dCA9IGhlYWQtPm5leHQ7XG4gICAgICAgIGhlYWQtPm5leHQgPSBub2RlO1xuICAgICAgICArK3NpemU7XG4gICAgfVxuICAgIFxuICAgIHZvaWQgYWRkQXRUYWlsKGludCB2YWwpIHtcbiAgICAgICAgTGlua2VkTm9kZSogbm9kZSA9IG5ldyBMaW5rZWROb2RlKHZhbCk7XG4gICAgICAgIExpbmtlZE5vZGUqIGN1ciA9IGhlYWQ7XG4gICAgICAgIHdoaWxlKGN1ci0+bmV4dCl7XG4gICAgICAgICAgICBjdXIgPSBjdXItPm5leHQ7XG4gICAgICAgIH1cbiAgICAgICAgY3VyLT5uZXh0ID0gbm9kZTtcbiAgICAgICAgKytzaXplO1xuICAgIH1cbiAgICBcbiAgICB2b2lkIGFkZEF0SW5kZXgoaW50IGluZGV4LCBpbnQgdmFsKSB7XG4gICAgICAgIC8vIGluZGV46KGo56S65LiL5qCH5LuOMOW8gOWni1xuICAgICAgICBpZihpbmRleCA+IHNpemUpe1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmKGluZGV4IDwgMCl7XG4gICAgICAgICAgICBpbmRleCA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICBMaW5rZWROb2RlKiBjdXIgPSBoZWFkO1xuICAgICAgICB3aGlsZShpbmRleC0tKXtcbiAgICAgICAgICAgIGN1ciA9IGN1ci0+bmV4dDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIDEtPjJcbiAgICAgICAgTGlua2VkTm9kZSogbm9kZSA9IG5ldyBMaW5rZWROb2RlKHZhbCk7XG4gICAgICAgIC8vIDItPjNcbiAgICAgICAgbm9kZS0+bmV4dCA9IGN1ci0+bmV4dDtcbiAgICAgICAgLy8gMS0+Mi0+M1xuICAgICAgICBjdXItPm5leHQgPSBub2RlO1xuICAgICAgICBzaXplKys7XG4gICAgfVxuICAgIFxuICAgIHZvaWQgZGVsZXRlQXRJbmRleChpbnQgaW5kZXgpIHtcbiAgICAgICAgLy8gaW5kZXjooajnpLrkuIvmoIfku44w5byA5aeLXG4gICAgICAgIGlmKGluZGV4ID4gKHNpemUgLSAxKSB8fCBpbmRleCA8IDApe3JldHVybjt9XG5cbiAgICAgICAgLy8g6I635Y+W5b6F5Yig6Zmk5YWD57Sg55qE5YmN5LiA5Liq5YWD57SgXG4gICAgICAgIExpbmtlZE5vZGUqIGN1ciA9IGhlYWQ7XG4gICAgICAgIHdoaWxlKGluZGV4LS0pe1xuICAgICAgICAgICAgY3VyID0gY3VyLT5uZXh0O1xuICAgICAgICB9XG5cbiAgICAgICAgTGlua2VkTm9kZSogdG1wID0gY3VyLT5uZXh0O1xuICAgICAgICBjdXItPm5leHQgPSBjdXItPm5leHQtPm5leHQ7XG4gICAgICAgIGRlbGV0ZSB0bXA7XG4gICAgICAgIHRtcCA9IG51bGxwdHI7XG5cbiAgICAgICAgc2l6ZS0tO1xuICAgIH1cbnByaXZhdGU6XG4gICAgaW50IHNpemU7XG4gICAgTGlua2VkTm9kZSogaGVhZDtcbn07XG5cblxuMVxuMlxuM1xuNFxuNVxuNlxuN1xuOFxuOVxuMTBcbjExXG4xMlxuMTNcbjE0XG4xNVxuMTZcbjE3XG4xOFxuMTlcbjIwXG4yMVxuMjJcbjIzXG4yNFxuMjVcbjI2XG4yN1xuMjhcbjI5XG4zMFxuMzFcbjMyXG4zM1xuMzRcbjM1XG4zNlxuMzdcbjM4XG4zOVxuNDBcbjQxXG40MlxuNDNcbjQ0XG40NVxuNDZcbjQ3XG40OFxuNDlcbjUwXG41MVxuNTJcbjUzXG41NFxuNTVcbjU2XG41N1xuNThcbjU5XG42MFxuNjFcbjYyXG42M1xuNjRcbjY1XG42NlxuNjdcbjY4XG42OVxuNzBcbjcxXG43MlxuNzNcbjc0XG43NVxuNzZcbjc3XG43OFxuNzlcbjgwXG44MVxuODJcbjgzXG44NFxuODVcbjg2XG44N1xuODhcblxuXG5cbiMg5oC757uTXG5cbiAxLiDliKTmlq3lhYPntKDotornlYzml7bvvIzoi6XopoHlgZrov5DnrpfopoHliqDkuIrmi6zlj7dcbiAyLiDomZrmi5/lpLToioLngrnlvojmlrnkvr9cbiAgICAxLiDlj6/ku6Xmib7liLDlhYPntKDnmoTliY3kuIDkuKroioLngrnvvIzmlrnkvr/liKDpmaTlkozmj5LlhaVcbiAgICAyLiDlj6/ku6Xnm7TmjqXliLDmjIflrprlhYPntKDnu5PngrlcblxuXG4jIDIwNi4g5Y+N6L2s6ZO+6KGoXG5cbiAqIOmimOebru+8mjIwNi4g5Y+N6L2s6ZO+6KGoXG5cbiAqIOiusuino++8muaWh+eroOiusuino+OAgeinhumikeiusuino1xuXG4gKiDopoHmsYLvvJrlj4zmjIfpkojlupTnlKhcblxuXG4jIOW9leWJjeaDs+azlVxuXG7lj4zmjIfpkojlj43ovazvvIzlhajpg6jlkI7mjIfliY3vvIzkuIvpnaLku6PnoIHvvIjinYzvvIlcblxuY2xhc3MgU29sdXRpb24ge1xucHVibGljOlxuICAgIExpc3ROb2RlKiByZXZlcnNlTGlzdChMaXN0Tm9kZSogaGVhZCkge1xuXG4gICAgICAgIC8vIOiZmuaLn+WktOiKgueCuVxuICAgICAgICBMaXN0Tm9kZSogbmV3SGVhZCA9IG5ldyBMaXN0Tm9kZSgwKTtcbiAgICAgICAgbmV3SGVhZC0+bmV4dCA9IGhlYWQ7XG5cbiAgICAgICAgTGlzdE5vZGUqIHByZSA9IG5ld0hlYWQ7XG4gICAgICAgIExpc3ROb2RlKiBjdXIgPSBuZXdIZWFkLT5uZXh0O1xuICAgICAgICB3aGlsZShjdXIgJiYgY3VyLT5uZXh0KXtcbiAgICAgICAgICAgIExpc3ROb2RlKiB0bXAgPSBjdXItPm5leHQ7XG4gICAgICAgICAgICBjdXItPm5leHQgPSBwcmU7XG4gICAgICAgICAgICBwcmUgPSBjdXI7XG4gICAgICAgICAgICBjdXIgPSB0bXA7IFxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5ld0hlYWQtPm5leHQ7XG4gICAgfVxufTtcblxuXG4xXG4yXG4zXG40XG41XG42XG43XG44XG45XG4xMFxuMTFcbjEyXG4xM1xuMTRcbjE1XG4xNlxuMTdcbjE4XG4xOVxuMjBcblxuXG7nu4/ov4fosIPor5Xmo4Dmn6XlkI7lj5HnjrDku6XkuIvlh6DngrnplJnor6/vvJpcblxuIDEuIOiZmuaLn+WktOiKgueCueWkmuS9mVxuIDIuIHByZSDliJ3lp4vlgLzkuI3mraPnoa5cbiAzLiDov5Tlm57lgLzplJnor69cblxuXG4jIOW9leWQjuaDs+azlVxuXG4+ICAxLiDlj4zmjIfpkohcblxu55yL6L+H5Y2h5ZOl55qE6K6y6Kej5ZCO77yM5LyY5YyW5LqG5LiK6Z2i55qE5Luj56CB77yI4pyF77yJXG5cbmNsYXNzIFNvbHV0aW9uIHtcbnB1YmxpYzpcbiAgICBMaXN0Tm9kZSogcmV2ZXJzZUxpc3QoTGlzdE5vZGUqIGhlYWQpIHtcblxuICAgICAgICBMaXN0Tm9kZSogcHJlID0gTlVMTDtcbiAgICAgICAgTGlzdE5vZGUqIGN1ciA9IGhlYWQ7XG4gICAgICAgIExpc3ROb2RlKiB0bXA7XG5cbiAgICAgICAgd2hpbGUoY3VyKXtcbiAgICAgICAgICAgIHRtcCA9IGN1ci0+bmV4dDtcbiAgICAgICAgICAgIGN1ci0+bmV4dCA9IHByZTtcbiAgICAgICAgICAgIHByZSA9IGN1cjtcbiAgICAgICAgICAgIGN1ciA9IHRtcDsgXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcHJlO1xuICAgIH1cbn07XG5cblxuMVxuMlxuM1xuNFxuNVxuNlxuN1xuOFxuOVxuMTBcbjExXG4xMlxuMTNcbjE0XG4xNVxuMTZcbjE3XG4xOFxuXG4gKiDml7bpl7TlpI3mnYLluqbvvJpP77yIbu+8iVxuICog56m66Ze05aSN5p2C5bqm77yaT++8iDHvvIlcblxuPiAgMi4g6YCS5b2SXG5cbuaguOW/g+aAnei3r+ayoeWPmO+8jOWIqeeUqOmAkuW9kuW3p+WmmeeahOWvueW6lOS6huWPjOaMh+mSiCB3aGlsZSDlvqrnjq/jgIJcblxuY2xhc3MgU29sdXRpb24ge1xucHVibGljOlxuICAgIExpc3ROb2RlKiByZXZlcnNlKExpc3ROb2RlKiBwcmUsTGlzdE5vZGUqIGN1cikge1xuXG4gICAgICAgIC8vIOWvueW6lOWPjOaMh+mSiOeahHJldHVybiBwcmU7XG4gICAgICAgIGlmKGN1ciA9PSBOVUxMKXtyZXR1cm4gcHJlO31cbiAgICAgICAgXG4gICAgICAgIExpc3ROb2RlKiB0bXAgPSBjdXItPm5leHQ7XG4gICAgICAgIGN1ci0+bmV4dCA9IHByZTtcbiAgICAgICAgXG4gICAgICAgIC8vIOW3p+WmmeeahOWvueW6lFxuICAgICAgICAvLyBwcmUgPSBjdXI7XG4gICAgICAgIC8vIGN1ciA9IHRtcDtcbiAgICAgICAgcmV0dXJuIHJldmVyc2UoY3VyLHRtcCk7XG5cbiAgICB9XG5cbiAgICBMaXN0Tm9kZSogcmV2ZXJzZUxpc3QoTGlzdE5vZGUqIGhlYWQpIHtcblxuICAgICAgICByZXR1cm4gcmV2ZXJzZShOVUxMLGhlYWQpO1xuICAgIH1cbn07XG5cblxuMVxuMlxuM1xuNFxuNVxuNlxuN1xuOFxuOVxuMTBcbjExXG4xMlxuMTNcbjE0XG4xNVxuMTZcbjE3XG4xOFxuMTlcbjIwXG4yMVxuMjJcblxuICog5pe26Ze05aSN5p2C5bqmOiBPIChuKVxuICog56m66Ze05aSN5p2C5bqmOiBPIChuKVxuXG5cbiMg5oC757uTXG5cbiAqIOWPjei9rO+8muWQjiAtPiDliY1cblxuXG4jIOaAu+e7k1xuXG7ov5nmrKHlhpnnmoTml7bpl7Tmr5TovoPkuYXvvIzlnKjkuK3pl7Torr7orqHpk77ooajpg6jliIbljaHnmoTml7bpl7Tplb/vvIznnIvkvLzpk77ooajnmoTpgqPkupvln7rnoYDmk43kvZzlrrnmmJPvvIzoh6rlt7HkuIrmiYvlhpnlpKflpKflsI/lsI/nmoTplJnor6/lsLHlh7rmnaXkuobjgIJcblxu5a655piT6ZSZ55qE54K577yaXG5cbiAxLiDlv5jorrDliKDpmaTlrozlhYPntKDopoEgZGVsZXRl77yM5LiU572u5Li656m6XG4gMi4g5piv5ZCm6ZyA6KaB6Jma5ouf5aS06IqC54K577yfIiwKICAgICJub3JtYWxpemVkQ29udGVudCI6ICI+IDk3Ny4g5pyJ5bqP5pWw57uE55qE5bmz5pa5IOOAgTIwOS4g6ZW/5bqm5pyA5bCP55qE5a2Q5pWw57uEIOOAgTU5LiDonrrml4vnn6npmLUgaWkg44CB5oC757uTXG5cblxuIyDpk77ooajnkIborrrln7rnoYBcblxuICog6K6y6Kej77ya5paH56ug6K6y6KejXG4gKiDopoHmsYLvvJrkuobop6Ppk77mjqXln7rnoYDvvIzku6Xlj4rpk77ooajlkozmlbDnu4TnmoTljLrliKtcblxuXG4jIDIwMy4g56e76Zmk6ZO+6KGo5YWD57SgXG5cbiAqIOmimOebru+8mjIwMy4g56e76Zmk6ZO+6KGo5YWD57SgXG4gKiDorrLop6PvvJrmlofnq6DorrLop6PjgIHop4bpopHorrLop6NcbiAqIOimgeaxgu+8muiZmuaLn+WktOe7k+eCueeahOS9v+eUqOaKgOW3p1xuXG5cbiMg5b2V5YmN5oOz5rOVXG5cbuaIkeaDs+eahOaYr+WIpOaWreepuu+8jOmAmui/h+iZmuaLn+WktOiKgueCueavlOWvueS4i+S4gOS4quiKgueCueadpeWIoOmZpOWFg+e0oO+8iOacqumAmui/h+KdjO+8iVxuXG5jbGFzcyBzb2x1dGlvbiB7XG5wdWJsaWM6XG4gICAgbGlzdG5vZGUqIHJlbW92ZWVsZW1lbnRzKGxpc3Rub2RlKiBoZWFkLCBpbnQgdmFsKSB7XG5cbiAgICAgICAgLy8g5Yik5pat56m6XG4gICAgICAgIGlmIChoZWFkID09IG51bGwpe1xuICAgICAgICAgICAgcmV0dXJuIGhlYWQ7XG4gICAgICAgIH1cblxuICAgICAgICAvLyDomZrmi5/lpLToioLngrlcbiAgICAgICAgbGlzdG5vZGUqIG5ld2hlYWQgPSBuZXcgbGlzdG5vZGUoMCk7XG4gICAgICAgIG5ld2hlYWQtPm5leHQgPSBoZWFkO1xuICAgICAgICAvLyDmk43kvZzmjIfpkohcbiAgICAgICAgbGlzdG5vZGUqIGN1ciA9IG5ld2hlYWQ7XG5cbiAgICAgICAgd2hpbGUoY3VyLT5uZXh0ICE9IG51bGwpe1xuICAgICAgICAgICAgaWYoY3VyLT5uZXh0LT52YWwgPT0gdmFsKXtcbiAgICAgICAgICAgICAgICBjdXItPm5leHQgPSBjdXItPm5leHQtPm5leHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjdXIgPSBjdXItPm5leHQ7XG4gICAgICAgIH0gXG5cbiAgICAgICAgcmV0dXJuIG5ld2hlYWQtPm5leHQ7XG4gICAgfVxufTtcblxuXG4xXG4yXG4zXG40XG41XG42XG43XG44XG45XG4xMFxuMTFcbjEyXG4xM1xuMTRcbjE1XG4xNlxuMTdcbjE4XG4xOVxuMjBcbjIxXG4yMlxuMjNcbjI0XG4yNVxuXG5cbumUmeWcqOepuuaMh+mSiO+8jFxuXG7lnKjliKDpmaToioLngrnlkI7vvIzlpoLmnpzkuIvkuIDkuKroioLngrnkuZ/pnIDopoHooqvliKDpmaTvvIzpgqPkuYjlvZPliY3mjIfpkoggY3VyIOW6lOivpeS/neaMgeS4jeWPmO+8jOS7peS+v+ajgOafpeS4i+S4gOS4quiKgueCuVxuXG5cbiMg5b2V5ZCO5oOz5rOVXG5cbueci+i/h+WNoeWTpeaAnei3r+WQjuWPkeeOsFxuXG4gMS4g5YGa5LqG5Yig6Zmk6IqC54K55Yik5patXG4gMi4g5YaF5a2Y566h55CG77yI6ZSA5q+B5Yig6Zmk6IqC54K55YaF5a2Y77yJXG5cbmNsYXNzIHNvbHV0aW9uIHtcbnB1YmxpYzpcbiAgICBsaXN0bm9kZSogcmVtb3ZlZWxlbWVudHMobGlzdG5vZGUqIGhlYWQsIGludCB2YWwpIHtcblxuICAgICAgICAvLyDliKTmlq3nqbpcbiAgICAgICAgaWYgKGhlYWQgPT0gbnVsbCl7XG4gICAgICAgICAgICByZXR1cm4gaGVhZDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIOiZmuaLn+WktOiKgueCuVxuICAgICAgICBsaXN0bm9kZSogbmV3aGVhZCA9IG5ldyBsaXN0bm9kZSgwKTtcbiAgICAgICAgbmV3aGVhZC0+bmV4dCA9IGhlYWQ7XG4gICAgICAgIC8vIOaTjeS9nOaMh+mSiFxuICAgICAgICBsaXN0bm9kZSogY3VyID0gbmV3aGVhZDtcblxuICAgICAgICB3aGlsZShjdXItPm5leHQgIT0gbnVsbCl7XG4gICAgICAgICAgICBpZihjdXItPm5leHQtPnZhbCA9PSB2YWwpe1xuICAgICAgICAgICAgICAgIGxpc3Rub2RlKiB0bXAgPSBjdXItPm5leHQ7XG4gICAgICAgICAgICAgICAgY3VyLT5uZXh0ID0gY3VyLT5uZXh0LT5uZXh0O1xuICAgICAgICAgICAgICAgIGRlbGV0ZSB0bXA7IC8vIOmUgOavgeWGheWtmFxuICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgY3VyID0gY3VyLT5uZXh0O1xuICAgICAgICAgICAgfSAgXG4gICAgICAgIH0gXG5cbiAgICAgICAgcmV0dXJuIG5ld2hlYWQtPm5leHQ7XG4gICAgfVxufTtcblxuXG4xXG4yXG4zXG40XG41XG42XG43XG44XG45XG4xMFxuMTFcbjEyXG4xM1xuMTRcbjE1XG4xNlxuMTdcbjE4XG4xOVxuMjBcbjIxXG4yMlxuMjNcbjI0XG4yNVxuMjZcbjI3XG4yOFxuXG5cblxuIyDmgLvnu5NcblxuXG4jIDcwNy4g6K6+6K6h6ZO+6KGoXG5cbiAqIOmimOebru+8mjcwNy4g6K6+6K6h6ZO+6KGoXG4gKiDorrLop6PvvJrmlofnq6DorrLop6PjgIHop4bpopHorrLop6NcbiAqIOimgeaxgu+8muaOjOaPoemTvuihqOe7vOWQiOaTjeS9nFxuXG5cbiMg5b2V5YmN5oOz5rOVXG5cbuWdjuWdjuWdt+Wdt+eahO+8jOayoeacieWGmeWHuuadpe+8jOS4jeefpemBk+S7juS9leS4i+aJi1xuXG7nnIvkuobkuIDnnLzljaHlk6XnmoTku6PnoIHvvIzlj5HnjrDopoHoh6rlt7HlrprkuYnnu5PmnoTkvZPvvIzoh6rlt7HlhpnmnoTpgKDlh73mlbDwn5iTXG5cbuS4i+mdouaYr+esrOS4gOasoeaPkOS6pOeahOmUmeivr+S7o+egge+8iOKdjO+8iVxuXG5jbGFzcyBteWxpbmtlZGxpc3Qge1xucHVibGljOlxuICAgIC8vIOWumuS5iemTvuihqOiKgueCuee7k+aehOS9k1xuICAgIHN0cnVjdCBsaW5rZWRub2RlIHtcbiAgICAgICAgaW50IHZhbDtcbiAgICAgICAgbGlua2Vkbm9kZSogbmV4dDtcbiAgICAgICAgbGlua2Vkbm9kZShpbnQgdmFsKTp2YWwodmFsKSwgbmV4dChudWxscHRyKXt9XG4gICAgfTtcblxuICAgIG15bGlua2VkbGlzdCgpIHtcbiAgICAgICAgaGVhZCA9IG5ldyBsaW5rZWRub2RlKDApO1xuICAgICAgICBzaXplID0gMDtcbiAgICB9XG5cbiAgICBpbnQgZ2V0KGludCBpbmRleCkge1xuICAgICAgICAvLyBpbmRleOihqOekuuS4i+agh+S7jjDlvIDlp4tcbiAgICAgICAgaWYoaW5kZXggPiBzaXplIC0gMSB8fCBpbmRleCA8IDApe1xuICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICB9XG5cbiAgICAgICAgbGlua2Vkbm9kZSogY3VyID0gaGVhZC0+bmV4dDtcbiAgICAgICAgd2hpbGUoaW5kZXgtLSl7XG4gICAgICAgICAgICBjdXIgPSBjdXItPm5leHQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGN1ci0+dmFsO1xuICAgIH1cbiAgICBcbiAgICB2b2lkIGFkZGF0aGVhZChpbnQgdmFsKSB7XG4gICAgICAgIGxpbmtlZG5vZGUqIG5vZGUgPSBuZXcgbGlua2Vkbm9kZSh2YWwpO1xuICAgICAgICBub2RlLT5uZXh0ID0gaGVhZC0+bmV4dDtcbiAgICAgICAgaGVhZC0+bmV4dCA9IG5vZGU7XG4gICAgICAgICsrc2l6ZTtcbiAgICB9XG4gICAgXG4gICAgdm9pZCBhZGRhdHRhaWwoaW50IHZhbCkge1xuICAgICAgICBsaW5rZWRub2RlKiBub2RlID0gbmV3IGxpbmtlZG5vZGUodmFsKTtcbiAgICAgICAgbGlua2Vkbm9kZSogY3VyID0gaGVhZC0+bmV4dDtcbiAgICAgICAgd2hpbGUoY3VyLT5uZXh0KXtcbiAgICAgICAgICAgIGN1ciA9IGN1ci0+bmV4dDtcbiAgICAgICAgfVxuICAgICAgICBjdXItPm5leHQgPSBub2RlO1xuICAgICAgICArK3NpemU7XG4gICAgfVxuICAgIFxuICAgIHZvaWQgYWRkYXRpbmRleChpbnQgaW5kZXgsIGludCB2YWwpIHtcbiAgICAgICAgLy8gaW5kZXjooajnpLrkuIvmoIfku44w5byA5aeLXG4gICAgICAgIGlmKGluZGV4ID4gc2l6ZSl7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYoaW5kZXggPCAwKXtcbiAgICAgICAgICAgIGFkZGF0aGVhZCh2YWwpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgbGlua2Vkbm9kZSogY3VyID0gaGVhZDtcbiAgICAgICAgd2hpbGUoaW5kZXgtLSl7XG4gICAgICAgICAgICBjdXIgPSBjdXItPm5leHQ7XG4gICAgICAgIH1cblxuICAgICAgICAvLyAxLT4yXG4gICAgICAgIGxpbmtlZG5vZGUqIG5vZGUgPSBuZXcgbGlua2Vkbm9kZSh2YWwpO1xuICAgICAgICAvLyAyLT4zXG4gICAgICAgIG5vZGUtPm5leHQgPSBjdXItPm5leHQ7XG4gICAgICAgIC8vIDEtPjItPjNcbiAgICAgICAgY3VyLT5uZXh0ID0gbm9kZTtcbiAgICAgICAgc2l6ZSsrO1xuICAgIH1cbiAgICBcbiAgICB2b2lkIGRlbGV0ZWF0aW5kZXgoaW50IGluZGV4KSB7XG4gICAgICAgIC8vIGluZGV46KGo56S65LiL5qCH5LuOMOW8gOWni1xuICAgICAgICBpZihpbmRleCA+PSBzaXplIC0gMSB8fCBpbmRleCA8IDApe3JldHVybjt9XG5cbiAgICAgICAgLy8g6I635Y+W5b6F5Yig6Zmk5YWD57Sg55qE5YmN5LiA5Liq5YWD57SgXG4gICAgICAgIGxpbmtlZG5vZGUqIGN1ciA9IGhlYWQ7XG4gICAgICAgIHdoaWxlKGluZGV4LS0pe1xuICAgICAgICAgICAgY3VyID0gY3VyLT5uZXh0O1xuICAgICAgICB9XG5cbiAgICAgICAgbGlua2Vkbm9kZSogdG1wID0gY3VyLT5uZXh0O1xuICAgICAgICBjdXItPm5leHQgPSBjdXItPm5leHQtPm5leHQ7XG4gICAgICAgIGRlbGV0ZSB0bXA7XG4gICAgICAgIHRtcCA9IG51bGxwdHI7XG5cbiAgICAgICAgc2l6ZS0tO1xuICAgIH1cbnByaXZhdGU6XG4gICAgaW50IHNpemU7XG4gICAgbGlua2Vkbm9kZSogaGVhZDtcbn07XG5cblxuMVxuMlxuM1xuNFxuNVxuNlxuN1xuOFxuOVxuMTBcbjExXG4xMlxuMTNcbjE0XG4xNVxuMTZcbjE3XG4xOFxuMTlcbjIwXG4yMVxuMjJcbjIzXG4yNFxuMjVcbjI2XG4yN1xuMjhcbjI5XG4zMFxuMzFcbjMyXG4zM1xuMzRcbjM1XG4zNlxuMzdcbjM4XG4zOVxuNDBcbjQxXG40MlxuNDNcbjQ0XG40NVxuNDZcbjQ3XG40OFxuNDlcbjUwXG41MVxuNTJcbjUzXG41NFxuNTVcbjU2XG41N1xuNThcbjU5XG42MFxuNjFcbjYyXG42M1xuNjRcbjY1XG42NlxuNjdcbjY4XG42OVxuNzBcbjcxXG43MlxuNzNcbjc0XG43NVxuNzZcbjc3XG43OFxuNzlcbjgwXG44MVxuODJcbjgzXG44NFxuODVcbjg2XG44N1xuODhcbjg5XG5cblxu57uP6L+H6LCD6K+V5Zad5o6S5p+l77yM5Y+R546wXG5cbmludCBnZXQoaW50IGluZGV4KSB7XG4gICAgLy8gaW5kZXjooajnpLrkuIvmoIfku44w5byA5aeLXG4gICAgaWYoaW5kZXggPiAoc2l6ZSAtIDEpIHx8IGluZGV4IDwgMCl7IC8vIOW6lOivpeimgeWKoOS4iuaLrOWPt++8ge+8ge+8gVxuICAgICAgICByZXR1cm4gLTE7XG4gICAgfVxuXG4gICAgLi4uXG59XG5cblxuMVxuMlxuM1xuNFxuNVxuNlxuN1xuOFxuXG5cbnZvaWQgZGVsZXRlYXRpbmRleChpbnQgaW5kZXgpIHtcbiAgICAvLyBpbmRleOihqOekuuS4i+agh+S7jjDlvIDlp4tcbiAgICBpZihpbmRleCA+PSAoc2l6ZSAtIDEpIHx8IGluZGV4IDwgMCl7cmV0dXJuO30gLy8g5bqU6K+l6KaB5Yqg5LiK5ous5Y+377yB77yB77yBXG5cbiAgICAuLi5cbn1cblxuXG4xXG4yXG4zXG40XG41XG42XG5cblxuXG4jIOW9leWQjuaDs+azlVxuXG7kuIDkupvlhoXlrZjnrqHnkIbov5jkuI3nhp/vvIzmr5TlpoLliKDpmaTlhYPntKDml7YgdG1wIOeahOWkhOeQhu+8jOWPquWNlee6r+eahCBkZWxldGXvvIzmsqHmnInnva7kuLrnqbrjgIJcblxuICAgIC8vIOWIoOmZpOesrGluZGV45Liq6IqC54K577yM5aaC5p6caW5kZXgg5aSn5LqO562J5LqO6ZO+6KGo55qE6ZW/5bqm77yM55u05o6lcmV0dXJu77yM5rOo5oSPaW5kZXjmmK/ku44w5byA5aeL55qEXG4gICAgdm9pZCBkZWxldGVhdGluZGV4KGludCBpbmRleCkge1xuICAgICAgICAuLi5cbiAgICAgICAgZGVsZXRlIHRtcDtcbiAgICAgICAgLy9kZWxldGXlkb3ku6TmjIfnpLrph4rmlL7kuoZ0bXDmjIfpkojljp/mnKzmiYDmjIfnmoTpgqPpg6jliIblhoXlrZjvvIxcbiAgICAgICAgLy/ooqtkZWxldGXlkI7nmoTmjIfpkoh0bXDnmoTlgLzvvIjlnLDlnYDvvInlubbpnZ7lsLHmmK9udWxs77yM6ICM5piv6ZqP5py65YC844CC5Lmf5bCx5piv6KKrZGVsZXRl5ZCO77yMXG4gICAgICAgIC8v5aaC5p6c5LiN5YaN5Yqg5LiK5LiA5Y+ldG1wPW51bGxwdHIsdG1w5Lya5oiQ5Li65Lmx5oyH55qE6YeO5oyH6ZKIXG4gICAgICAgIC8v5aaC5p6c5LmL5ZCO55qE56iL5bqP5LiN5bCP5b+D5L2/55So5LqGdG1w77yM5Lya5oyH5ZCR6Zq+5Lul6aKE5oOz55qE5YaF5a2Y56m66Ze0XG4gICAgICAgIHRtcD1udWxscHRyO1xuICAgICAgICBfc2l6ZS0tO1xuICAgIH1cblxuXG4xXG4yXG4zXG40XG41XG42XG43XG44XG45XG4xMFxuMTFcblxuXG7ku6XkuIvmmK/lkI7pnaLnu5PlkIjljaHlk6XorrLop6PlkI7nmoTku6PnoIHvvIjinIXvvIlcblxuY2xhc3MgbXlsaW5rZWRsaXN0IHtcbnB1YmxpYzpcbiAgICAvLyDlrprkuYnpk77ooajoioLngrnnu5PmnoTkvZNcbiAgICBzdHJ1Y3QgbGlua2Vkbm9kZSB7XG4gICAgICAgIGludCB2YWw7XG4gICAgICAgIGxpbmtlZG5vZGUqIG5leHQ7XG4gICAgICAgIGxpbmtlZG5vZGUoaW50IHZhbCk6dmFsKHZhbCksIG5leHQobnVsbHB0cil7fVxuICAgIH07XG5cbiAgICBteWxpbmtlZGxpc3QoKSB7XG4gICAgICAgIGhlYWQgPSBuZXcgbGlua2Vkbm9kZSgwKTtcbiAgICAgICAgc2l6ZSA9IDA7XG4gICAgfVxuXG4gICAgaW50IGdldChpbnQgaW5kZXgpIHtcbiAgICAgICAgLy8gaW5kZXjooajnpLrkuIvmoIfku44w5byA5aeLXG4gICAgICAgIGlmKGluZGV4ID4gKHNpemUgLSAxKSB8fCBpbmRleCA8IDApe1xuICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICB9XG5cbiAgICAgICAgbGlua2Vkbm9kZSogY3VyID0gaGVhZC0+bmV4dDtcbiAgICAgICAgd2hpbGUoaW5kZXgtLSl7XG4gICAgICAgICAgICBjdXIgPSBjdXItPm5leHQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGN1ci0+dmFsO1xuICAgIH1cbiAgICBcbiAgICB2b2lkIGFkZGF0aGVhZChpbnQgdmFsKSB7XG4gICAgICAgIGxpbmtlZG5vZGUqIG5vZGUgPSBuZXcgbGlua2Vkbm9kZSh2YWwpO1xuICAgICAgICBub2RlLT5uZXh0ID0gaGVhZC0+bmV4dDtcbiAgICAgICAgaGVhZC0+bmV4dCA9IG5vZGU7XG4gICAgICAgICsrc2l6ZTtcbiAgICB9XG4gICAgXG4gICAgdm9pZCBhZGRhdHRhaWwoaW50IHZhbCkge1xuICAgICAgICBsaW5rZWRub2RlKiBub2RlID0gbmV3IGxpbmtlZG5vZGUodmFsKTtcbiAgICAgICAgbGlua2Vkbm9kZSogY3VyID0gaGVhZDtcbiAgICAgICAgd2hpbGUoY3VyLT5uZXh0KXtcbiAgICAgICAgICAgIGN1ciA9IGN1ci0+bmV4dDtcbiAgICAgICAgfVxuICAgICAgICBjdXItPm5leHQgPSBub2RlO1xuICAgICAgICArK3NpemU7XG4gICAgfVxuICAgIFxuICAgIHZvaWQgYWRkYXRpbmRleChpbnQgaW5kZXgsIGludCB2YWwpIHtcbiAgICAgICAgLy8gaW5kZXjooajnpLrkuIvmoIfku44w5byA5aeLXG4gICAgICAgIGlmKGluZGV4ID4gc2l6ZSl7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYoaW5kZXggPCAwKXtcbiAgICAgICAgICAgIGluZGV4ID0gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIGxpbmtlZG5vZGUqIGN1ciA9IGhlYWQ7XG4gICAgICAgIHdoaWxlKGluZGV4LS0pe1xuICAgICAgICAgICAgY3VyID0gY3VyLT5uZXh0O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gMS0+MlxuICAgICAgICBsaW5rZWRub2RlKiBub2RlID0gbmV3IGxpbmtlZG5vZGUodmFsKTtcbiAgICAgICAgLy8gMi0+M1xuICAgICAgICBub2RlLT5uZXh0ID0gY3VyLT5uZXh0O1xuICAgICAgICAvLyAxLT4yLT4zXG4gICAgICAgIGN1ci0+bmV4dCA9IG5vZGU7XG4gICAgICAgIHNpemUrKztcbiAgICB9XG4gICAgXG4gICAgdm9pZCBkZWxldGVhdGluZGV4KGludCBpbmRleCkge1xuICAgICAgICAvLyBpbmRleOihqOekuuS4i+agh+S7jjDlvIDlp4tcbiAgICAgICAgaWYoaW5kZXggPiAoc2l6ZSAtIDEpIHx8IGluZGV4IDwgMCl7cmV0dXJuO31cblxuICAgICAgICAvLyDojrflj5blvoXliKDpmaTlhYPntKDnmoTliY3kuIDkuKrlhYPntKBcbiAgICAgICAgbGlua2Vkbm9kZSogY3VyID0gaGVhZDtcbiAgICAgICAgd2hpbGUoaW5kZXgtLSl7XG4gICAgICAgICAgICBjdXIgPSBjdXItPm5leHQ7XG4gICAgICAgIH1cblxuICAgICAgICBsaW5rZWRub2RlKiB0bXAgPSBjdXItPm5leHQ7XG4gICAgICAgIGN1ci0+bmV4dCA9IGN1ci0+bmV4dC0+bmV4dDtcbiAgICAgICAgZGVsZXRlIHRtcDtcbiAgICAgICAgdG1wID0gbnVsbHB0cjtcblxuICAgICAgICBzaXplLS07XG4gICAgfVxucHJpdmF0ZTpcbiAgICBpbnQgc2l6ZTtcbiAgICBsaW5rZWRub2RlKiBoZWFkO1xufTtcblxuXG4xXG4yXG4zXG40XG41XG42XG43XG44XG45XG4xMFxuMTFcbjEyXG4xM1xuMTRcbjE1XG4xNlxuMTdcbjE4XG4xOVxuMjBcbjIxXG4yMlxuMjNcbjI0XG4yNVxuMjZcbjI3XG4yOFxuMjlcbjMwXG4zMVxuMzJcbjMzXG4zNFxuMzVcbjM2XG4zN1xuMzhcbjM5XG40MFxuNDFcbjQyXG40M1xuNDRcbjQ1XG40NlxuNDdcbjQ4XG40OVxuNTBcbjUxXG41MlxuNTNcbjU0XG41NVxuNTZcbjU3XG41OFxuNTlcbjYwXG42MVxuNjJcbjYzXG42NFxuNjVcbjY2XG42N1xuNjhcbjY5XG43MFxuNzFcbjcyXG43M1xuNzRcbjc1XG43NlxuNzdcbjc4XG43OVxuODBcbjgxXG44MlxuODNcbjg0XG44NVxuODZcbjg3XG44OFxuXG5cblxuIyDmgLvnu5NcblxuIDEuIOWIpOaWreWFg+e0oOi2iueVjOaXtu+8jOiLpeimgeWBmui/kOeul+imgeWKoOS4iuaLrOWPt1xuIDIuIOiZmuaLn+WktOiKgueCueW+iOaWueS+v1xuICAgIDEuIOWPr+S7peaJvuWIsOWFg+e0oOeahOWJjeS4gOS4quiKgueCue+8jOaWueS+v+WIoOmZpOWSjOaPkuWFpVxuICAgIDIuIOWPr+S7peebtOaOpeWIsOaMh+WumuWFg+e0oOe7k+eCuVxuXG5cbiMgMjA2LiDlj43ovazpk77ooahcblxuICog6aKY55uu77yaMjA2LiDlj43ovazpk77ooahcblxuICog6K6y6Kej77ya5paH56ug6K6y6Kej44CB6KeG6aKR6K6y6KejXG5cbiAqIOimgeaxgu+8muWPjOaMh+mSiOW6lOeUqFxuXG5cbiMg5b2V5YmN5oOz5rOVXG5cbuWPjOaMh+mSiOWPjei9rO+8jOWFqOmDqOWQjuaMh+WJje+8jOS4i+mdouS7o+egge+8iOKdjO+8iVxuXG5jbGFzcyBzb2x1dGlvbiB7XG5wdWJsaWM6XG4gICAgbGlzdG5vZGUqIHJldmVyc2VsaXN0KGxpc3Rub2RlKiBoZWFkKSB7XG5cbiAgICAgICAgLy8g6Jma5ouf5aS06IqC54K5XG4gICAgICAgIGxpc3Rub2RlKiBuZXdoZWFkID0gbmV3IGxpc3Rub2RlKDApO1xuICAgICAgICBuZXdoZWFkLT5uZXh0ID0gaGVhZDtcblxuICAgICAgICBsaXN0bm9kZSogcHJlID0gbmV3aGVhZDtcbiAgICAgICAgbGlzdG5vZGUqIGN1ciA9IG5ld2hlYWQtPm5leHQ7XG4gICAgICAgIHdoaWxlKGN1ciAmJiBjdXItPm5leHQpe1xuICAgICAgICAgICAgbGlzdG5vZGUqIHRtcCA9IGN1ci0+bmV4dDtcbiAgICAgICAgICAgIGN1ci0+bmV4dCA9IHByZTtcbiAgICAgICAgICAgIHByZSA9IGN1cjtcbiAgICAgICAgICAgIGN1ciA9IHRtcDsgXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbmV3aGVhZC0+bmV4dDtcbiAgICB9XG59O1xuXG5cbjFcbjJcbjNcbjRcbjVcbjZcbjdcbjhcbjlcbjEwXG4xMVxuMTJcbjEzXG4xNFxuMTVcbjE2XG4xN1xuMThcbjE5XG4yMFxuXG5cbue7j+i/h+iwg+ivleajgOafpeWQjuWPkeeOsOS7peS4i+WHoOeCuemUmeivr++8mlxuXG4gMS4g6Jma5ouf5aS06IqC54K55aSa5L2ZXG4gMi4gcHJlIOWIneWni+WAvOS4jeato+ehrlxuIDMuIOi/lOWbnuWAvOmUmeivr1xuXG5cbiMg5b2V5ZCO5oOz5rOVXG5cbj4gIDEuIOWPjOaMh+mSiFxuXG7nnIvov4fljaHlk6XnmoTorrLop6PlkI7vvIzkvJjljJbkuobkuIrpnaLnmoTku6PnoIHvvIjinIXvvIlcblxuY2xhc3Mgc29sdXRpb24ge1xucHVibGljOlxuICAgIGxpc3Rub2RlKiByZXZlcnNlbGlzdChsaXN0bm9kZSogaGVhZCkge1xuXG4gICAgICAgIGxpc3Rub2RlKiBwcmUgPSBudWxsO1xuICAgICAgICBsaXN0bm9kZSogY3VyID0gaGVhZDtcbiAgICAgICAgbGlzdG5vZGUqIHRtcDtcblxuICAgICAgICB3aGlsZShjdXIpe1xuICAgICAgICAgICAgdG1wID0gY3VyLT5uZXh0O1xuICAgICAgICAgICAgY3VyLT5uZXh0ID0gcHJlO1xuICAgICAgICAgICAgcHJlID0gY3VyO1xuICAgICAgICAgICAgY3VyID0gdG1wOyBcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBwcmU7XG4gICAgfVxufTtcblxuXG4xXG4yXG4zXG40XG41XG42XG43XG44XG45XG4xMFxuMTFcbjEyXG4xM1xuMTRcbjE1XG4xNlxuMTdcbjE4XG5cbiAqIOaXtumXtOWkjeadguW6pu+8mm/vvIhu77yJXG4gKiDnqbrpl7TlpI3mnYLluqbvvJpv77yIMe+8iVxuXG4+ICAyLiDpgJLlvZJcblxu5qC45b+D5oCd6Lev5rKh5Y+Y77yM5Yip55So6YCS5b2S5ben5aaZ55qE5a+55bqU5LqG5Y+M5oyH6ZKIIHdoaWxlIOW+queOr+OAglxuXG5jbGFzcyBzb2x1dGlvbiB7XG5wdWJsaWM6XG4gICAgbGlzdG5vZGUqIHJldmVyc2UobGlzdG5vZGUqIHByZSxsaXN0bm9kZSogY3VyKSB7XG5cbiAgICAgICAgLy8g5a+55bqU5Y+M5oyH6ZKI55qEcmV0dXJuIHByZTtcbiAgICAgICAgaWYoY3VyID09IG51bGwpe3JldHVybiBwcmU7fVxuICAgICAgICBcbiAgICAgICAgbGlzdG5vZGUqIHRtcCA9IGN1ci0+bmV4dDtcbiAgICAgICAgY3VyLT5uZXh0ID0gcHJlO1xuICAgICAgICBcbiAgICAgICAgLy8g5ben5aaZ55qE5a+55bqUXG4gICAgICAgIC8vIHByZSA9IGN1cjtcbiAgICAgICAgLy8gY3VyID0gdG1wO1xuICAgICAgICByZXR1cm4gcmV2ZXJzZShjdXIsdG1wKTtcblxuICAgIH1cblxuICAgIGxpc3Rub2RlKiByZXZlcnNlbGlzdChsaXN0bm9kZSogaGVhZCkge1xuXG4gICAgICAgIHJldHVybiByZXZlcnNlKG51bGwsaGVhZCk7XG4gICAgfVxufTtcblxuXG4xXG4yXG4zXG40XG41XG42XG43XG44XG45XG4xMFxuMTFcbjEyXG4xM1xuMTRcbjE1XG4xNlxuMTdcbjE4XG4xOVxuMjBcbjIxXG4yMlxuXG4gKiDml7bpl7TlpI3mnYLluqY6IG8gKG4pXG4gKiDnqbrpl7TlpI3mnYLluqY6IG8gKG4pXG5cblxuIyDmgLvnu5NcblxuICog5Y+N6L2s77ya5ZCOIC0+IOWJjVxuXG5cbiMg5oC757uTXG5cbui/measoeWGmeeahOaXtumXtOavlOi+g+S5he+8jOWcqOS4remXtOiuvuiuoemTvuihqOmDqOWIhuWNoeeahOaXtumXtOmVv++8jOeci+S8vOmTvuihqOeahOmCo+S6m+WfuuehgOaTjeS9nOWuueaYk++8jOiHquW3seS4iuaJi+WGmeWkp+Wkp+Wwj+Wwj+eahOmUmeivr+WwseWHuuadpeS6huOAglxuXG7lrrnmmJPplJnnmoTngrnvvJpcblxuIDEuIOW/mOiusOWIoOmZpOWujOWFg+e0oOimgSBkZWxldGXvvIzkuJTnva7kuLrnqbpcbiAyLiDmmK/lkKbpnIDopoHomZrmi5/lpLToioLngrnvvJ8iLAogICAgImNoYXJzZXRzIjogewogICAgICAiY2prIjogdHJ1ZQogICAgfQogIH0sIHsKICAgICJ0aXRsZSI6ICJEYXkwMC3lh4blpIciLAogICAgImZyb250bWF0dGVyIjogewogICAgICAidGl0bGUiOiAiRGF5MDAt5YeG5aSHIiwKICAgICAgImRhdGUiOiAiMjAyMy0wNS0yNlQyMzozNTo0OS4wMDBaIiwKICAgICAgInBlcm1hbGluayI6ICIvcGFnZXMvZmM4MGRkLyIsCiAgICAgICJjYXRlZ29yaWVzIjogWyLnrpfms5UiLCAi566X5rOV5omT5Y2hIl0sCiAgICAgICJ0YWdzIjogW251bGxdCiAgICB9LAogICAgInJlZ3VsYXJQYXRoIjogIi8wMi4lRTclQUUlOTclRTYlQjMlOTUvMDEuJUU3JUFFJTk3JUU2JUIzJTk1JUU2JTg5JTkzJUU1JThEJUExLzAwLkRheTAwLSVFNSU4NyU4NiVFNSVBNCU4Ny5odG1sIiwKICAgICJyZWxhdGl2ZVBhdGgiOiAiMDIu566X5rOVLzAxLueul+azleaJk+WNoS8wMC5EYXkwMC3lh4blpIcubWQiLAogICAgImtleSI6ICJ2LTJlZTkwMjdhIiwKICAgICJwYXRoIjogIi9wYWdlcy9mYzgwZGQvIiwKICAgICJoZWFkZXJzIjogW3sKICAgICAgImxldmVsIjogMiwKICAgICAgInRpdGxlIjogIuagvOW8jyIsCiAgICAgICJzbHVnIjogIuagvOW8jyIsCiAgICAgICJub3JtYWxpemVkVGl0bGUiOiAi5qC85byPIiwKICAgICAgImNoYXJJbmRleCI6IDExCiAgICB9LCB7CiAgICAgICJsZXZlbCI6IDMsCiAgICAgICJ0aXRsZSI6ICLlvZXliY3mg7Pms5UiLAogICAgICAic2x1ZyI6ICLlvZXliY3mg7Pms5UiLAogICAgICAibm9ybWFsaXplZFRpdGxlIjogIuW9leWJjeaDs+azlSIsCiAgICAgICJjaGFySW5kZXgiOiA2MAogICAgfSwgewogICAgICAibGV2ZWwiOiAzLAogICAgICAidGl0bGUiOiAi5b2V5ZCO5oOz5rOVIiwKICAgICAgInNsdWciOiAi5b2V5ZCO5oOz5rOVIiwKICAgICAgIm5vcm1hbGl6ZWRUaXRsZSI6ICLlvZXlkI7mg7Pms5UiLAogICAgICAiY2hhckluZGV4IjogNjkKICAgIH0sIHsKICAgICAgImxldmVsIjogMywKICAgICAgInRpdGxlIjogIuaAu+e7kyIsCiAgICAgICJzbHVnIjogIuaAu+e7kyIsCiAgICAgICJub3JtYWxpemVkVGl0bGUiOiAi5oC757uTIiwKICAgICAgImNoYXJJbmRleCI6IDc4CiAgICB9LCB7CiAgICAgICJsZXZlbCI6IDIsCiAgICAgICJ0aXRsZSI6ICLluLjnlKjooajmg4UiLAogICAgICAic2x1ZyI6ICLluLjnlKjooajmg4UiLAogICAgICAibm9ybWFsaXplZFRpdGxlIjogIuW4uOeUqOihqOaDhSIsCiAgICAgICJjaGFySW5kZXgiOiA4NQogICAgfV0sCiAgICAiZXhjZXJwdCI6ICI8YmxvY2txdW90ZT5cbjxwPuWJjee9ruWHhuWkhzwvcD5cbjwvYmxvY2txdW90ZT5cbiIsCiAgICAibGFzdFVwZGF0ZWQiOiAiNi8yLzIwMjMsIDY6MzQ6MDAgUE0iLAogICAgImxhc3RVcGRhdGVkVGltZXN0YW1wIjogMTY4NTcwMjA0MDAwMCwKICAgICJoZWFkZXJzU3RyIjogIuagvOW8jyDlvZXliY3mg7Pms5Ug5b2V5ZCO5oOz5rOVIOaAu+e7kyDluLjnlKjooajmg4UiLAogICAgImNvbnRlbnQiOiAiPiDliY3nva7lh4blpIdcblxuXG4jIOagvOW8j1xuXG4gKiDpopjnm67vvJo3MDQuIOS6jOWIhuafpeaJvlxuXG4gKiDorrLop6PvvJrmlofnq6DorrLop6PjgIHop4bpopHorrLop6NcblxuICog6KaB5rGC77yaXG5cblxuIyDlvZXliY3mg7Pms5VcblxuXG4jIOW9leWQjuaDs+azlVxuXG5cbiMg5oC757uTXG5cblxuIyDluLjnlKjooajmg4Vcblxu4p2MXG5cbuKclO+4j1xuXG7wn5iCXG5cbvCfmLBcblxu8J+Yk1xuXG7inIzvuI9cblxu4p2X77iPXG5cbuKAvO+4jyIsCiAgICAibm9ybWFsaXplZENvbnRlbnQiOiAiPiDliY3nva7lh4blpIdcblxuXG4jIOagvOW8j1xuXG4gKiDpopjnm67vvJo3MDQuIOS6jOWIhuafpeaJvlxuXG4gKiDorrLop6PvvJrmlofnq6DorrLop6PjgIHop4bpopHorrLop6NcblxuICog6KaB5rGC77yaXG5cblxuIyDlvZXliY3mg7Pms5VcblxuXG4jIOW9leWQjuaDs+azlVxuXG5cbiMg5oC757uTXG5cblxuIyDluLjnlKjooajmg4Vcblxu4p2MXG5cbuKclO+4j1xuXG7wn5iCXG5cbvCfmLBcblxu8J+Yk1xuXG7inIzvuI9cblxu4p2X77iPXG5cbuKAvO+4jyIsCiAgICAiY2hhcnNldHMiOiB7CiAgICAgICJjamsiOiB0cnVlCiAgICB9CiAgfSwgewogICAgInRpdGxlIjogInN0cmluZ+exu+WeiyIsCiAgICAiZnJvbnRtYXR0ZXIiOiB7CiAgICAgICJ0aXRsZSI6ICJzdHJpbmfnsbvlnosiLAogICAgICAiZGF0ZSI6ICIyMDIzLTA1LTMxVDE0OjI4OjM2LjAwMFoiLAogICAgICAicGVybWFsaW5rIjogIi9wYWdlcy9iNmJhNjcvIiwKICAgICAgImNhdGVnb3JpZXMiOiBbIkdvIiwgIua3seWFpUdvIl0sCiAgICAgICJ0YWdzIjogWyLmjqLntKItR08iXQogICAgfSwKICAgICJyZWd1bGFyUGF0aCI6ICIvMDEuR28vMDMuJUU2JUI3JUIxJUU1JTg1JUE1R28vMDEuc3RyaW5nJUU3JUIxJUJCJUU1JTlFJThCLmh0bWwiLAogICAgInJlbGF0aXZlUGF0aCI6ICIwMS5Hby8wMy7mt7HlhaVHby8wMS5zdHJpbmfnsbvlnosubWQiLAogICAgImtleSI6ICJ2LTI2NTg2MjhjIiwKICAgICJwYXRoIjogIi9wYWdlcy9iNmJhNjcvIiwKICAgICJoZWFkZXJzIjogW3sKICAgICAgImxldmVsIjogMiwKICAgICAgInRpdGxlIjogIuWtl+espuWSi+WtmOKdkyIsCiAgICAgICJzbHVnIjogIuWtl+espuWSi+WtmCIsCiAgICAgICJub3JtYWxpemVkVGl0bGUiOiAi5a2X56ym5ZKL5a2Y4p2TIiwKICAgICAgImNoYXJJbmRleCI6IDQ4CiAgICB9LCB7CiAgICAgICJsZXZlbCI6IDIsCiAgICAgICJ0aXRsZSI6ICJ1dGY45ZKL57yW56CB4p2TIiwKICAgICAgInNsdWciOiAidXRmOOWSi+e8lueggSIsCiAgICAgICJub3JtYWxpemVkVGl0bGUiOiAidXRmOCDlkovnvJbnoIHinZMiLAogICAgICAiY2hhckluZGV4IjogMTEyCiAgICB9LCB7CiAgICAgICJsZXZlbCI6IDMsCiAgICAgICJ0aXRsZSI6ICLlrprplb/nvJbnoIEiLAogICAgICAic2x1ZyI6ICLlrprplb/nvJbnoIEiLAogICAgICAibm9ybWFsaXplZFRpdGxlIjogIuWumumVv+e8lueggSIsCiAgICAgICJjaGFySW5kZXgiOiAxNzQKICAgIH0sIHsKICAgICAgImxldmVsIjogMywKICAgICAgInRpdGxlIjogIuWPmOaIkOe8lueggSIsCiAgICAgICJzbHVnIjogIuWPmOaIkOe8lueggSIsCiAgICAgICJub3JtYWxpemVkVGl0bGUiOiAi5Y+Y5oiQ57yW56CBIiwKICAgICAgImNoYXJJbmRleCI6IDE4NQogICAgfSwgewogICAgICAibGV2ZWwiOiAzLAogICAgICAidGl0bGUiOiAi5oC757uTIiwKICAgICAgInNsdWciOiAi5oC757uTIiwKICAgICAgIm5vcm1hbGl6ZWRUaXRsZSI6ICLmgLvnu5MiLAogICAgICAiY2hhckluZGV4IjogNDA3CiAgICB9LCB7CiAgICAgICJsZXZlbCI6IDIsCiAgICAgICJ0aXRsZSI6ICJzdHJpbmfllaXnu5PmnoTinZMiLAogICAgICAic2x1ZyI6ICJzdHJpbmfllaXnu5PmnoQiLAogICAgICAibm9ybWFsaXplZFRpdGxlIjogInN0cmluZyDllaXnu5PmnoTinZMiLAogICAgICAiY2hhckluZGV4IjogNDczCiAgICB9LCB7CiAgICAgICJsZXZlbCI6IDMsCiAgICAgICJ0aXRsZSI6ICLplb/luqblkozljaDnlKjnqbrpl7QiLAogICAgICAic2x1ZyI6ICLplb/luqblkozljaDnlKjnqbrpl7QiLAogICAgICAibm9ybWFsaXplZFRpdGxlIjogIumVv+W6puWSjOWNoOeUqOepuumXtCIsCiAgICAgICJjaGFySW5kZXgiOiA5NjAKICAgIH1dLAogICAgImV4Y2VycHQiOiAiPGJsb2NrcXVvdGU+XG48cD7lrZfnrKblkovlrZjvvJ91dGY4IOWSi+e8luegge+8n3N0cmluZyDllaXnu5PmnoTvvJ88L3A+XG48cD5mb3Jt77yaPGEgaHJlZj1cImh0dHBzOi8vc3BhY2UuYmlsaWJpbGkuY29tLzU2NzE5NTQzN1wiIHRhcmdldD1cIl9ibGFua1wiIHJlbD1cIm5vb3BlbmVyIG5vcmVmZXJyZXJcIj7lubzpup/lrp7pqozlrqQ8T3V0Ym91bmRMaW5rLz48L2E+PC9wPlxuPC9ibG9ja3F1b3RlPlxuIiwKICAgICJsYXN0VXBkYXRlZCI6ICI2LzIvMjAyMywgNjozNDowMCBQTSIsCiAgICAibGFzdFVwZGF0ZWRUaW1lc3RhbXAiOiAxNjg1NzAyMDQwMDAwLAogICAgImhlYWRlcnNTdHIiOiAi5a2X56ym5ZKL5a2Y4p2TIHV0ZjjlkovnvJbnoIHinZMg5a6a6ZW/57yW56CBIOWPmOaIkOe8lueggSDmgLvnu5Mgc3RyaW5n5ZWl57uT5p6E4p2TIOmVv+W6puWSjOWNoOeUqOepuumXtCIsCiAgICAiY29udGVudCI6ICI+IOWtl+espuWSi+WtmO+8n3V0Zjgg5ZKL57yW56CB77yfc3RyaW5nIOWVpee7k+aehO+8n1xuPiBcbj4gZm9ybe+8muW5vOm6n+WunumqjOWupFxuXG5cbiMg5a2X56ym5ZKL5a2Y4p2TXG5cbuWQjOagt+aYr+S6jOi/m+WItuWtmOWCqO+8jOmAmui/h+e8luegge+8iOaMh+WumueJueWumiAwMSDmjpLliJfpobrluo/kuLrmn5DkuIDlrZfnrKbvvInlpoLluLjop4HnmoQgQVNDSUnjgIFHQkvjgIFVVEYtOFxuXG5cbiMgdXRmOCDlkovnvJbnoIHinZNcblxu55Sx5LiK6Z2i55qE55qE6Zeu6aKY5oiR5Lus55+l6YGT5LqG77yM5a2Y5YKo5a2X56ym5pys6LSo5bCx5piv5L+d5a2Y57yW56CBXG5cbj4g5bi46KeB55qE5Lik56eN5L+d5a2Y57yW56CB55qE5pa55byPXG4+IFxuPiAgMS4g5a6a6ZW/57yW56CBXG4+ICAyLiDlj5jmiJDnvJbnoIFcblxuXG4jIOWumumVv+e8lueggVxuXG7kuI3nrqHplb/nn63pg73pg73mjInmnIDplb/nmoTnvJbnoIHvvIzlj6/ku6XnnIvlh7rpnZ7luLjnmoTmtarotLnlhoXlrZjvvIzlpoLkuIvlm75cblxuXG5cblxuIyDlj5jmiJDnvJbnoIFcblxu5qC55o2u54m55a6a55qE5YmN57yA57yW5Y+35p2l5a2Y5YKo77yM5aaC5LiL5Zu+XG5cblxuXG7lsI/nu4PkuaBcblxu5a2X56ymICAg5Y2B6L+b5Yi2ICAgICDkuozov5vliLYgICAgICAgICAgICAgICAg5pyA57uI5a2Y5YKoXG5lICAgIDEwMSAgICAgMTEwMDEwMSAgICAgICAgICAgIDAxMTAwMTAxXG7kuJYgICAgMTk5OTAgICAwMTAwMTExMDAwMDEwMTEwICAgMTExMDAxMDAgMTAxMTEwMDAgMTAwMTAxMTBcblxuXG4jIOaAu+e7k1xuXG4gKiDlnKggR28g6K+t6KiA5Lit6buY6K6k6YeH55So55qE5bCx5pivIFVURi04IOeahOe8luino+eggeaWueW8j+OAglxuXG4gKiDlrZfnrKbpm4YgKyDnvJbnoIHmlrnlvI8gPT4g5q2j56Gu5a2Y5YKo5a2X56ymXG5cblxuIyBzdHJpbmcg5ZWl57uT5p6E4p2TXG5cbuaguOW/g+mXrumimOWwseaYr++8muKAnOWmguS9leWIpOaWreWtl+espue7k+adn+KAne+8n1xuXG4gKiBDIOivreiogOaYr+aciSAnXFwwJyDnmoTnibnlrprmoIfor4bnrKZcblxuICogR28g6K+t6KiA5Lit6YeH55So55qE5piv77yaZGF0YSArIGxlbiDvvIgxNiDlrZfoioLvvIlcbiAgIFxuICAgdHlwZSBTdHJpbmdIZWFkZXIgc3RydWN0IHtcbiAgICAgICBEYXRhIHVpbnRwdHJcbiAgICAgICBMZW4gIGludFxuICAgfVxuICAgXG4gICBcbiAgIDFcbiAgIDJcbiAgIDNcbiAgIDRcbiAgIFxuXG7ms6jmhI9cblxuIDEuIOWcqCBHbyDor63oqIDkuK3vvIznvJbor5HlmajkvJrlsIblrZfnrKbkuLLlhoXlrrnmlL7lhaXlj6ror7vlhoXlrZjmrrXvvIzmiYDku6XkuI3lhYHorrjkv67mlLlcblxuIDIuIOWtl+espuS4suWPmOmHj+WPr+S7peWFseeUqOW6leWxguWtl+espuS4suWGheWuuVxuXG5cblxuIDMuIOmdnuimgeS/ruaUuVxuICAgIFxuICAgIDEuIOWPr+S7pemHjeaWsOi1i+WAvFxuICAgIFxuICAgIHMxID0gXCJoZWxsb1wiXG4gICAgXG4gICAgXG4gICAgMVxuICAgIFxuICAgIDIuIOW8uuWItuexu+Wei+i9rOaNouS4uiBzbGljZe+8jOWOn+eQhuaYr+mHjeaWsOWIhumFjeWGheWtmOW5tuaLt+i0neWOn+adpeWtl+espuS4suWGheWuuVxuICAgIFxuICAgIGJzIDo9IChbXWJ5dGUpKHMxKVxuICAgIGJzWzJdID0gJ28nXG4gICAgZm10LlByaW50ZihcIiVjXFxuXCIsYnNbMl0pXG4gICAgXG4gICAgXG4gICAgMVxuICAgIDJcbiAgICAzXG4gICAgXG5cblxuIyDplb/luqblkozljaDnlKjnqbrpl7Rcblxu5ZyoIEdvIOivreiogOS4re+8jOS4gOS4qiBVVEYtOCDnvJbnoIHnmoTlrZfnrKblj6/og73nlLEgMSDliLAgNCDkuKrlrZfoioLnu4TmiJDvvIzlm6DmraTlrZfnrKbkuLLnmoTplb/luqblkozljaDnlKjnmoTlhoXlrZjnqbrpl7TlubbkuI3kuIDlrprnm7jlkIzjgIIiLAogICAgIm5vcm1hbGl6ZWRDb250ZW50IjogIj4g5a2X56ym5ZKL5a2Y77yfdXRmOCDlkovnvJbnoIHvvJ9zdHJpbmcg5ZWl57uT5p6E77yfXG4+IFxuPiBmb3Jt77ya5bm86bqf5a6e6aqM5a6kXG5cblxuIyDlrZfnrKblkovlrZjinZNcblxu5ZCM5qC35piv5LqM6L+b5Yi25a2Y5YKo77yM6YCa6L+H57yW56CB77yI5oyH5a6a54m55a6aIDAxIOaOkuWIl+mhuuW6j+S4uuafkOS4gOWtl+espu+8ieWmguW4uOingeeahCBhc2NpaeOAgWdia+OAgXV0Zi04XG5cblxuIyB1dGY4IOWSi+e8lueggeKdk1xuXG7nlLHkuIrpnaLnmoTnmoTpl67popjmiJHku6znn6XpgZPkuobvvIzlrZjlgqjlrZfnrKbmnKzotKjlsLHmmK/kv53lrZjnvJbnoIFcblxuPiDluLjop4HnmoTkuKTnp43kv53lrZjnvJbnoIHnmoTmlrnlvI9cbj4gXG4+ICAxLiDlrprplb/nvJbnoIFcbj4gIDIuIOWPmOaIkOe8lueggVxuXG5cbiMg5a6a6ZW/57yW56CBXG5cbuS4jeeuoemVv+efremDvemDveaMieacgOmVv+eahOe8luegge+8jOWPr+S7peeci+WHuumdnuW4uOeahOa1qui0ueWGheWtmO+8jOWmguS4i+WbvlxuXG5cblxuXG4jIOWPmOaIkOe8lueggVxuXG7moLnmja7nibnlrprnmoTliY3nvIDnvJblj7fmnaXlrZjlgqjvvIzlpoLkuIvlm75cblxuXG5cbuWwj+e7g+S5oFxuXG7lrZfnrKYgICDljYHov5vliLYgICAgIOS6jOi/m+WItiAgICAgICAgICAgICAgICDmnIDnu4jlrZjlgqhcbmUgICAgMTAxICAgICAxMTAwMTAxICAgICAgICAgICAgMDExMDAxMDFcbuS4liAgICAxOTk5MCAgIDAxMDAxMTEwMDAwMTAxMTAgICAxMTEwMDEwMCAxMDExMTAwMCAxMDAxMDExMFxuXG5cbiMg5oC757uTXG5cbiAqIOWcqCBnbyDor63oqIDkuK3pu5jorqTph4fnlKjnmoTlsLHmmK8gdXRmLTgg55qE57yW6Kej56CB5pa55byP44CCXG5cbiAqIOWtl+espumbhiArIOe8lueggeaWueW8jyA9PiDmraPnoa7lrZjlgqjlrZfnrKZcblxuXG4jIHN0cmluZyDllaXnu5PmnoTinZNcblxu5qC45b+D6Zeu6aKY5bCx5piv77ya4oCc5aaC5L2V5Yik5pat5a2X56ym57uT5p2f4oCd77yfXG5cbiAqIGMg6K+t6KiA5piv5pyJICdcXDAnIOeahOeJueWumuagh+ivhuesplxuXG4gKiBnbyDor63oqIDkuK3ph4fnlKjnmoTmmK/vvJpkYXRhICsgbGVuIO+8iDE2IOWtl+iKgu+8iVxuICAgXG4gICB0eXBlIHN0cmluZ2hlYWRlciBzdHJ1Y3Qge1xuICAgICAgIGRhdGEgdWludHB0clxuICAgICAgIGxlbiAgaW50XG4gICB9XG4gICBcbiAgIFxuICAgMVxuICAgMlxuICAgM1xuICAgNFxuICAgXG5cbuazqOaEj1xuXG4gMS4g5ZyoIGdvIOivreiogOS4re+8jOe8luivkeWZqOS8muWwhuWtl+espuS4suWGheWuueaUvuWFpeWPquivu+WGheWtmOaute+8jOaJgOS7peS4jeWFgeiuuOS/ruaUuVxuXG4gMi4g5a2X56ym5Liy5Y+Y6YeP5Y+v5Lul5YWx55So5bqV5bGC5a2X56ym5Liy5YaF5a65XG5cblxuXG4gMy4g6Z2e6KaB5L+u5pS5XG4gICAgXG4gICAgMS4g5Y+v5Lul6YeN5paw6LWL5YC8XG4gICAgXG4gICAgczEgPSBcImhlbGxvXCJcbiAgICBcbiAgICBcbiAgICAxXG4gICAgXG4gICAgMi4g5by65Yi257G75Z6L6L2s5o2i5Li6IHNsaWNl77yM5Y6f55CG5piv6YeN5paw5YiG6YWN5YaF5a2Y5bm25ou36LSd5Y6f5p2l5a2X56ym5Liy5YaF5a65XG4gICAgXG4gICAgYnMgOj0gKFtdYnl0ZSkoczEpXG4gICAgYnNbMl0gPSAnbydcbiAgICBmbXQucHJpbnRmKFwiJWNcXG5cIixic1syXSlcbiAgICBcbiAgICBcbiAgICAxXG4gICAgMlxuICAgIDNcbiAgICBcblxuXG4jIOmVv+W6puWSjOWNoOeUqOepuumXtFxuXG7lnKggZ28g6K+t6KiA5Lit77yM5LiA5LiqIHV0Zi04IOe8lueggeeahOWtl+espuWPr+iDveeUsSAxIOWIsCA0IOS4quWtl+iKgue7hOaIkO+8jOWboOatpOWtl+espuS4sueahOmVv+W6puWSjOWNoOeUqOeahOWGheWtmOepuumXtOW5tuS4jeS4gOWumuebuOWQjOOAgiIsCiAgICAiY2hhcnNldHMiOiB7CiAgICAgICJjamsiOiB0cnVlCiAgICB9CiAgfSwgewogICAgInRpdGxlIjogIkRheTAxLeaVsOe7hCIsCiAgICAiZnJvbnRtYXR0ZXIiOiB7CiAgICAgICJ0aXRsZSI6ICJEYXkwMS3mlbDnu4QiLAogICAgICAiZGF0ZSI6ICIyMDIzLTA1LTI0VDE2OjIwOjMzLjAwMFoiLAogICAgICAicGVybWFsaW5rIjogIi9wYWdlcy84YWFiN2IvIiwKICAgICAgImNhdGVnb3JpZXMiOiBbIueul+azlSIsICLnrpfms5XmiZPljaEiXSwKICAgICAgInRhZ3MiOiBbIuaJk+WNoSJdCiAgICB9LAogICAgInJlZ3VsYXJQYXRoIjogIi8wMi4lRTclQUUlOTclRTYlQjMlOTUvMDEuJUU3JUFFJTk3JUU2JUIzJTk1JUU2JTg5JTkzJUU1JThEJUExLzAxLkRheTAxLSVFNiU5NSVCMCVFNyVCQiU4NC5odG1sIiwKICAgICJyZWxhdGl2ZVBhdGgiOiAiMDIu566X5rOVLzAxLueul+azleaJk+WNoS8wMS5EYXkwMS3mlbDnu4QubWQiLAogICAgImtleSI6ICJ2LTZmMTBlZTUwIiwKICAgICJwYXRoIjogIi9wYWdlcy84YWFiN2IvIiwKICAgICJoZWFkZXJzIjogW3sKICAgICAgImxldmVsIjogMiwKICAgICAgInRpdGxlIjogIjcwNC7kuozliIbmn6Xmib4iLAogICAgICAic2x1ZyI6ICJfNzA0LeS6jOWIhuafpeaJviIsCiAgICAgICJub3JtYWxpemVkVGl0bGUiOiAiNzA0LiDkuozliIbmn6Xmib4iLAogICAgICAiY2hhckluZGV4IjogMgogICAgfSwgewogICAgICAibGV2ZWwiOiAzLAogICAgICAidGl0bGUiOiAi5b2V5YmN5oOz5rOVIiwKICAgICAgInNsdWciOiAi5b2V5YmN5oOz5rOVIiwKICAgICAgIm5vcm1hbGl6ZWRUaXRsZSI6ICLlvZXliY3mg7Pms5UiLAogICAgICAiY2hhckluZGV4IjogOTIKICAgIH0sIHsKICAgICAgImxldmVsIjogMywKICAgICAgInRpdGxlIjogIuW9leWQjuaDs+azlSIsCiAgICAgICJzbHVnIjogIuW9leWQjuaDs+azlSIsCiAgICAgICJub3JtYWxpemVkVGl0bGUiOiAi5b2V5ZCO5oOz5rOVIiwKICAgICAgImNoYXJJbmRleCI6IDEyNjUKICAgIH0sIHsKICAgICAgImxldmVsIjogMywKICAgICAgInRpdGxlIjogIuWbsOmavueCuSIsCiAgICAgICJzbHVnIjogIuWbsOmavueCuSIsCiAgICAgICJub3JtYWxpemVkVGl0bGUiOiAi5Zuw6Zq+54K5IiwKICAgICAgImNoYXJJbmRleCI6IDE0MjgKICAgIH0sIHsKICAgICAgImxldmVsIjogMiwKICAgICAgInRpdGxlIjogIjI3LiDnp7vpmaTlhYPntKAiLAogICAgICAic2x1ZyI6ICJfMjct56e76Zmk5YWD57SgIiwKICAgICAgIm5vcm1hbGl6ZWRUaXRsZSI6ICIyNy4g56e76Zmk5YWD57SgIiwKICAgICAgImNoYXJJbmRleCI6IDEyCiAgICB9LCB7CiAgICAgICJsZXZlbCI6IDMsCiAgICAgICJ0aXRsZSI6ICLlvZXliY3mg7Pms5UiLAogICAgICAic2x1ZyI6ICLlvZXliY3mg7Pms5UtMiIsCiAgICAgICJub3JtYWxpemVkVGl0bGUiOiAi5b2V5YmN5oOz5rOVIiwKICAgICAgImNoYXJJbmRleCI6IDkyCiAgICB9LCB7CiAgICAgICJsZXZlbCI6IDMsCiAgICAgICJ0aXRsZSI6ICLlvZXlkI7mg7Pms5UiLAogICAgICAic2x1ZyI6ICLlvZXlkI7mg7Pms5UtMiIsCiAgICAgICJub3JtYWxpemVkVGl0bGUiOiAi5b2V5ZCO5oOz5rOVIiwKICAgICAgImNoYXJJbmRleCI6IDEyNjUKICAgIH0sIHsKICAgICAgImxldmVsIjogMywKICAgICAgInRpdGxlIjogIuWbsOmavueCuSIsCiAgICAgICJzbHVnIjogIuWbsOmavueCuS0yIiwKICAgICAgIm5vcm1hbGl6ZWRUaXRsZSI6ICLlm7Dpmr7ngrkiLAogICAgICAiY2hhckluZGV4IjogMTQyOAogICAgfSwgewogICAgICAibGV2ZWwiOiAyLAogICAgICAidGl0bGUiOiAi5ouT5bGVIiwKICAgICAgInNsdWciOiAi5ouT5bGVIiwKICAgICAgIm5vcm1hbGl6ZWRUaXRsZSI6ICLmi5PlsZUiLAogICAgICAiY2hhckluZGV4IjogNDA2NwogICAgfSwgewogICAgICAibGV2ZWwiOiAzLAogICAgICAidGl0bGUiOiAiMzUu5pCc57Si5o+S5YWl5L2N572uIiwKICAgICAgInNsdWciOiAiXzM1LeaQnOe0ouaPkuWFpeS9jee9riIsCiAgICAgICJub3JtYWxpemVkVGl0bGUiOiAiMzUuIOaQnOe0ouaPkuWFpeS9jee9riIsCiAgICAgICJjaGFySW5kZXgiOiA0MDc0CiAgICB9LCB7CiAgICAgICJsZXZlbCI6IDMsCiAgICAgICJ0aXRsZSI6ICIzNC4g5Zyo5o6S5bqP5pWw57uE5Lit5p+l5om+5YWD57Sg55qE56ys5LiA5Liq5ZKM5pyA5ZCO5LiA5Liq5L2N572uIiwKICAgICAgInNsdWciOiAiXzM0LeWcqOaOkuW6j+aVsOe7hOS4reafpeaJvuWFg+e0oOeahOesrOS4gOS4quWSjOacgOWQjuS4gOS4quS9jee9riIsCiAgICAgICJub3JtYWxpemVkVGl0bGUiOiAiMzQuIOWcqOaOkuW6j+aVsOe7hOS4reafpeaJvuWFg+e0oOeahOesrOS4gOS4quWSjOacgOWQjuS4gOS4quS9jee9riIsCiAgICAgICJjaGFySW5kZXgiOiA0MDg5CiAgICB9LCB7CiAgICAgICJsZXZlbCI6IDIsCiAgICAgICJ0aXRsZSI6ICLmgLvnu5MiLAogICAgICAic2x1ZyI6ICLmgLvnu5MiLAogICAgICAibm9ybWFsaXplZFRpdGxlIjogIuaAu+e7kyIsCiAgICAgICJjaGFySW5kZXgiOiA0MTE5CiAgICB9XSwKICAgICJleGNlcnB0IjogIjxibG9ja3F1b3RlPlxuPHA+NzA0LiDkuozliIbmn6Xmib7jgIEyNy4g56e76Zmk5YWD57SgPC9wPlxuPC9ibG9ja3F1b3RlPlxuIiwKICAgICJsYXN0VXBkYXRlZCI6ICI1LzI1LzIwMjMsIDE6MTk6MDEgQU0iLAogICAgImxhc3RVcGRhdGVkVGltZXN0YW1wIjogMTY4NDk0ODc0MTAwMCwKICAgICJoZWFkZXJzU3RyIjogIjcwNC7kuozliIbmn6Xmib4g5b2V5YmN5oOz5rOVIOW9leWQjuaDs+azlSDlm7Dpmr7ngrkgMjcuIOenu+mZpOWFg+e0oCDlvZXliY3mg7Pms5Ug5b2V5ZCO5oOz5rOVIOWbsOmavueCuSDmi5PlsZUgMzUu5pCc57Si5o+S5YWl5L2N572uIDM0LiDlnKjmjpLluo/mlbDnu4TkuK3mn6Xmib7lhYPntKDnmoTnrKzkuIDkuKrlkozmnIDlkI7kuIDkuKrkvY3nva4g5oC757uTIiwKICAgICJjb250ZW50IjogIj4gNzA0LiDkuozliIbmn6Xmib7jgIEyNy4g56e76Zmk5YWD57SgXG5cblxuIyA3MDQuIOS6jOWIhuafpeaJvlxuXG4gKiDpopjnm67vvJo3MDQuIOS6jOWIhuafpeaJvlxuXG4gKiDorrLop6PvvJrmlofnq6DorrLop6PjgIHop4bpopHorrLop6NcblxuICog6KaB5rGC77ya54af5oKJ5bem6Zet5Y+z5byA77yM5bem6Zet5Y+z6ZetXG5cblxuIyDlvZXliY3mg7Pms5VcblxuICog6aaW5YWI5LqM5YiG5p+l5om+55qE5YmN572u5p2h5Lu25piv5bey5o6S5bqP44CCXG5cbiAqIOWFtuasoeS4uuS7gOS5iOS8muacieW3pumXreWPs+W8gOS4juW3puW8gOWPs+mXreeahOWMuuWIhu+8jOaIkeiupOS4uuaYr+Wlh+aVsOS4quaVsOmZpCAyIOWQjuWBj+W3puS4juWBj+WPs+eahOmXrumimFxuXG4gKiDwn5ii5LiN5piO55m95Li65LuA5LmIIG1pZCA9IGwgKyAociAtIGwpID4+IDEg5Lya6LaF5pe277yfXG4gICBcbiAgICog5Zug5Li65bCR5LqG5ous5Y+344CQICgociAtIGwpID4+IDEpIOOAkVxuXG4+IOW3pumXreWPs+W8gFxuXG5jbGFzcyBTb2x1dGlvbiB7XG5wdWJsaWM6XG4gICAgaW50IHNlYXJjaCh2ZWN0b3I8aW50PiYgbnVtcywgaW50IHRhcmdldCkge1xuICAgICAgICBpbnQgbCA9IDAsciA9IG51bXMuc2l6ZSgpLG1pZCA9IDA7XG5cbiAgICAgICAgd2hpbGUoIGwgPCByKXtcbiAgICAgICAgICAgIG1pZCA9IGwgKyAociAtIGwpIC8gMjtcbiAgICAgICAgICAgIC8vbWlkID0gbCArICgociAtIGwpID4+IDEpO1xuICAgICAgICAgICAgaWYgKG51bXNbbWlkXSA+IHRhcmdldCl7XG4gICAgICAgICAgICAgICAgciA9IG1pZDtcbiAgICAgICAgICAgIH1lbHNlIGlmKG51bXNbbWlkXSA8IHRhcmdldCl7XG4gICAgICAgICAgICAgICAgbCA9IG1pZCArIDE7XG4gICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICByZXR1cm4gbWlkO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiAtMTtcbiAgICB9XG59O1xuXG5cbjFcbjJcbjNcbjRcbjVcbjZcbjdcbjhcbjlcbjEwXG4xMVxuMTJcbjEzXG4xNFxuMTVcbjE2XG4xN1xuMThcbjE5XG5cblxuPiDlt6bpl63lj7Ppl61cblxuY2xhc3MgU29sdXRpb24ge1xucHVibGljOlxuICAgIGludCBzZWFyY2godmVjdG9yPGludD4mIG51bXMsIGludCB0YXJnZXQpIHtcbiAgICAgICAgaW50IGwgPSAwLHIgPSBudW1zLnNpemUoKS0xLG1pZCA9IDA7XG5cbiAgICAgICAgd2hpbGUoIGwgPD0gciApe1xuICAgICAgICAgICAgbWlkID0gbCArIChyIC0gbCkgLyAyO1xuICAgICAgICAgICAgLy9taWQgPSBsICsgKChyIC0gbCkgPj4gMSk7XG4gICAgICAgICAgICBpZiAobnVtc1ttaWRdID4gdGFyZ2V0KXtcbiAgICAgICAgICAgICAgICByID0gbWlkIC0gMTtcbiAgICAgICAgICAgIH1lbHNlIGlmKG51bXNbbWlkXSA8IHRhcmdldCl7XG4gICAgICAgICAgICAgICAgbCA9IG1pZCArIDE7XG4gICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICByZXR1cm4gbWlkO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiAtMTtcbiAgICB9XG59O1xuXG5cbjFcbjJcbjNcbjRcbjVcbjZcbjdcbjhcbjlcbjEwXG4xMVxuMTJcbjEzXG4xNFxuMTVcbjE2XG4xN1xuMThcbjE5XG5cblxuXG4jIOW9leWQjuaDs+azlVxuXG4gMS4g5a+55Y+z5byA5ZKM5Y+z6Zet55CG6Kej55qE5pu05rex5Yi75LqG77yM5oiR5piv6L+Z5LmI55CG6Kej55qEXG4gICAgXG4gICAgMS4g5Y+z6Zet6K+05piO5Y+W5b6X5YiwIHJpZ2h0LCDlpoLmnpwgbWlkIOWPluS4jeWIsO+8jOWImSByaWdodCA9IG1pZCAtIDFcbiAgICAyLiDlj7PlvIDor7TmmI7lj5bkuI3liLAgcmlnaHQsIOWmguaenCBtaWQg5Y+W5LiN5Yiw77yM5YiZIHJpZ2h0ID0gbWlkXG5cbiAyLiDml7bpl7TlpI3mnYLluqbvvIzlhpnlrozkuIDkuKrnrpfms5XopoHooajmmI7lpI3mnYLluqZcblxuXG4jIOWbsOmavueCuVxuXG4+IOS4uuS7gOS5iCBtaWQgPSBsICsgKHIgLSBsKSA+PiAxIOS8mui2heaXtu+8jOiAjCBtaWQgPSBsICsgKHIgLSBsKSAvIDIg5LiN5Lya77yfXG5cbuWboOS4uu+8jG1pZCA9IGwgKyAociAtIGwpID4+IDEg6ZyA6KaB5Yqg5LiK5ous5Y+377yaIG1pZCA9IGwgKyAoKHIgLSBsKSA+PiAxKVxuXG5cbiMgMjcuIOenu+mZpOWFg+e0oFxuXG4gKiDpopjnm67vvJoyNy4g56e76Zmk5YWD57SgXG5cbiAqIOiusuino++8muaWh+eroOiusuino+OAgeinhumikeiusuino1xuXG4gKiDopoHmsYLvvJrlhYjmmrTlipvlkI7lj4zmjIfpkohcblxuXG4jIOW9leWJjeaDs+azlVxuXG7mmrTlipvop6Pms5XvvIznp7vliqjlhYPntKDvvIzpl67popjljaHlnKjlh7rnjrDph43lpI3lhYPntKDml7bvvIzkuIDnm7TkvJrnlZnnnYDkuIDkuKrlhYPntKDvvIzku6XkuIvmmK/miJHnmoTku6PnoIHvvIjplJnor6/ku6PnoIHinYzvvIlcblxuY2xhc3MgU29sdXRpb24ge1xucHVibGljOlxuICAgIGludCByZW1vdmVFbGVtZW50KHZlY3RvcjxpbnQ+JiBudW1zLCBpbnQgdmFsKSB7XG4gICAgICAgIGludCBzaXplID0gbnVtcy5zaXplKCk7XG5cbiAgICAgICAgZm9yIChpbnQgaSA9IDA7aSA8IHNpemU7KytpKXtcbiAgICAgICAgICAgIGlmIChudW1zW2ldID09IHZhbCl7XG4gICAgICAgICAgICAgICAgZm9yIChpbnQgaiA9IGk7aiA8IHNpemUgLSAxOysrail7XG4gICAgICAgICAgICAgICAgICAgIG51bXNbal0gPSBudW1zW2orMV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC0tc2l6ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2l6ZTtcbiAgICB9XG59O1xuXG5cbjFcbjJcbjNcbjRcbjVcbjZcbjdcbjhcbjlcbjEwXG4xMVxuMTJcbjEzXG4xNFxuMTVcbjE2XG5cblxuXG4jIOW9leWQjuaDs+azlVxuXG4gMS4g5pq05Yqb6Kej5rOVXG5cbueci+i/h+iusuino+WQjuWPkeWFiOaYr+iuqSBpIOebtOaOpeWJjei/m+S6hu+8jOayoeacieiAg+iZkeWIsOimhuebluS4iuadpeeahOWFg+e0oOWPr+iDveaYr+W+heWIoOmZpOeahOWAvO+8jCjmraPnoa7ku6PnoIHinIUpXG5cbmNsYXNzIFNvbHV0aW9uIHtcbnB1YmxpYzpcbiAgICBpbnQgcmVtb3ZlRWxlbWVudCh2ZWN0b3I8aW50PiYgbnVtcywgaW50IHZhbCkge1xuICAgICAgICBpbnQgc2l6ZSA9IG51bXMuc2l6ZSgpO1xuXG4gICAgICAgIGZvciAoaW50IGkgPSAwO2kgPCBzaXplOysraSl7XG4gICAgICAgICAgICBpZiAobnVtc1tpXSA9PSB2YWwpe1xuICAgICAgICAgICAgICAgIGZvciAoaW50IGogPSBpO2ogPCBzaXplIC0gMTsrK2ope1xuICAgICAgICAgICAgICAgICAgICBudW1zW2pdID0gbnVtc1tqKzFdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAtLXNpemU7XG4gICAgICAgICAgICAgICAgLS1pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHNpemU7XG4gICAgfVxufTtcblxuXG4xXG4yXG4zXG40XG41XG42XG43XG44XG45XG4xMFxuMTFcbjEyXG4xM1xuMTRcbjE1XG4xNlxuMTdcbjE4XG5cbiAqIOaXtumXtOWkjeadguW6pu+8mk8gKG5eMilcbiAqIOepuumXtOWkjeadguW6pu+8mk8gKDEpXG5cbiAyLiDlj4zmjIfpkohcblxu5Y+M5oyH6ZKI5rOV77yI5b+r5oWi5oyH6ZKI5rOV77yJ77yaIOmAmui/h+S4gOS4quW/q+aMh+mSiOWSjOaFouaMh+mSiOWcqOS4gOS4qiBmb3Ig5b6q546v5LiL5a6M5oiQ5Lik5LiqIGZvciDlvqrnjq/nmoTlt6XkvZzjgIJcblxu5a6a5LmJ5b+r5oWi5oyH6ZKIXG5cbiAqIOW/q+aMh+mSiO+8mueUqOS6juabtOaWsFxuICog5oWi5oyH6ZKI77ya6KKr5pu05pawXG5cbmNsYXNzIFNvbHV0aW9uIHtcbnB1YmxpYzpcbiAgICBpbnQgcmVtb3ZlRWxlbWVudCh2ZWN0b3I8aW50PiYgbnVtcywgaW50IHZhbCkge1xuICAgICAgICBpbnQgc2l6ZSA9IG51bXMuc2l6ZSgpO1xuICAgICAgICBpbnQgc2xvdyA9IDA7XG5cbiAgICAgICAgZm9yIChpbnQgZmFzdCA9IDA7IGZhc3QgPCBzaXplOyArK2Zhc3Qpe1xuICAgICAgICAgICAgLy8g6L+Z5LiqICE9IOWPr+S7peWGmeeahOi/meS5iOeugOa0ge+8gVxuICAgICAgICAgICAgaWYgKG51bXNbZmFzdF0gIT0gdmFsKXtcbiAgICAgICAgICAgICAgIG51bXNbc2xvdysrXSA9IG51bXNbZmFzdF07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gc2xvdztcbiAgICB9XG59O1xuXG5cbjFcbjJcbjNcbjRcbjVcbjZcbjdcbjhcbjlcbjEwXG4xMVxuMTJcbjEzXG4xNFxuMTVcbjE2XG5cbiAqIOaXtumXtOWkjeadguW6pu+8mk8gKG4pXG4gKiDnqbrpl7TlpI3mnYLluqbvvJpPICgxKVxuXG4gMy4g55u45ZCR5Y+M5oyH6ZKI5pa55rOVXG5cbuWfuuS6juWFg+e0oOmhuuW6j+WPr+S7peaUueWPmOeahOmimOebruaPj+i/sOaUueWPmOS6huWFg+e0oOebuOWvueS9jee9ru+8jOehruS/neS6huenu+WKqOacgOWwkeWFg+e0oOOAglxuXG7mk43kvZzlpoLkuIvvvJpcblxuICog5om+5bem6L65562J5LqOIHZhbCDnmoTlhYPntKBcbiAqIOaJvuWPs+i+ueS4jeetieS6jiB2YWwg55qE5YWD57SgXG4gKiDlsIblj7PovrnkuI3nrYnkuo4gdmFsIOeahOWFg+e0oOimhuebluW3pui+ueetieS6jiB2YWwg55qE5YWD57SgXG5cbmNsYXNzIFNvbHV0aW9uIHtcbnB1YmxpYzpcbiAgICBpbnQgcmVtb3ZlRWxlbWVudCh2ZWN0b3I8aW50PiYgbnVtcywgaW50IHZhbCkge1xuICAgICAgICBpbnQgc2l6ZSA9IG51bXMuc2l6ZSgpO1xuICAgICAgICBpbnQgcmlnaHQgPSBzaXplIC0gMSxsZWZ0ID0gMDtcblxuICAgICAgICB3aGlsZShsZWZ0IDw9IHJpZ2h0KXtcbiAgICAgICAgICAgIC8vIOaJvuW3pui+ueetieS6jnZhbOeahOWFg+e0oFxuICAgICAgICAgICAgd2hpbGUobGVmdCA8PSByaWdodCAmJiBudW1zW2xlZnRdICE9IHZhbCl7IFxuICAgICAgICAgICAgICAgICsrbGVmdDsgXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyDmib7lj7PovrnkuI3nrYnkuo52YWznmoTlhYPntKBcbiAgICAgICAgICAgIHdoaWxlKGxlZnQgPD0gcmlnaHQgJiYgbnVtc1tyaWdodF0gPT0gdmFsKXtcbiAgICAgICAgICAgICAgICAtLXJpZ2h0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8g5bCG5Y+z6L655LiN562J5LqOdmFs55qE5YWD57Sg6KaG55uW5bem6L65562J5LqOdmFs55qE5YWD57SgXG4gICAgICAgICAgICBpZihsZWZ0IDw9IHJpZ2h0KXtcbiAgICAgICAgICAgICAgICBudW1zW2xlZnQrK10gPSBudW1zW3JpZ2h0LS1dO1xuICAgICAgICAgICAgfVxuICAgICAgIH1cblxuICAgICAgIHJldHVybiBsZWZ0OyAvLyBudW1zW2xlZnQrK10s5Yia5aW95oyH5ZCR5LqG5LiL5LiA5Liq5YWD57Sg77yM5LiL5qCHID0g5YWD57Sg5Liq5pWwXG4gICAgICAgIFx0XHRcdC8vIHJpZ2h05oyH5ZCR5LiK5LiA5Liq5YWD57Sg77yM6ZyA6KaBKzFcbiAgICB9XG59O1xuXG5cbjFcbjJcbjNcbjRcbjVcbjZcbjdcbjhcbjlcbjEwXG4xMVxuMTJcbjEzXG4xNFxuMTVcbjE2XG4xN1xuMThcbjE5XG4yMFxuMjFcbjIyXG4yM1xuMjRcbjI1XG5cblxuXG4jIOWbsOmavueCuVxuXG4gMS4g5pq05Yqb56e75Yqo5YWD57Sg5pe26ICD6JmR5LiN5a6M5ZaE77yM5rKh5pyJ6ICD6JmR5Yiw5oyo552A55qE6YeN5aSN5YWD57Sg77yM55u05o6lICsraSDot7Pov4fkuobjgIJcbiAyLiDlj4zmjIfpkojkuK3vvIE9IOWGmeazleW+iOeugOa0ge+8jOayoeacieaDs+WIsFxuXG5cbiMg5ouT5bGVXG5cblxuIyAzNS4g5pCc57Si5o+S5YWl5L2N572uXG5cblxuIyAzNC4g5Zyo5o6S5bqP5pWw57uE5Lit5p+l5om+5YWD57Sg55qE56ys5LiA5Liq5ZKM5pyA5ZCO5LiA5Liq5L2N572uXG5cblxuIyDmgLvnu5NcblxuIDEuIOaVsOe7hOeahOWFg+e0oOaYr+S4jeiDveWIoOeahO+8jOWPquiDveimhuebluOAglxuIDIuIOe7huiKguiAg+iZkeS4jeWRqOOAgiIsCiAgICAibm9ybWFsaXplZENvbnRlbnQiOiAiPiA3MDQuIOS6jOWIhuafpeaJvuOAgTI3LiDnp7vpmaTlhYPntKBcblxuXG4jIDcwNC4g5LqM5YiG5p+l5om+XG5cbiAqIOmimOebru+8mjcwNC4g5LqM5YiG5p+l5om+XG5cbiAqIOiusuino++8muaWh+eroOiusuino+OAgeinhumikeiusuino1xuXG4gKiDopoHmsYLvvJrnhp/mgonlt6bpl63lj7PlvIDvvIzlt6bpl63lj7Ppl61cblxuXG4jIOW9leWJjeaDs+azlVxuXG4gKiDpppblhYjkuozliIbmn6Xmib7nmoTliY3nva7mnaHku7bmmK/lt7LmjpLluo/jgIJcblxuICog5YW25qyh5Li65LuA5LmI5Lya5pyJ5bem6Zet5Y+z5byA5LiO5bem5byA5Y+z6Zet55qE5Yy65YiG77yM5oiR6K6k5Li65piv5aWH5pWw5Liq5pWw6ZmkIDIg5ZCO5YGP5bem5LiO5YGP5Y+z55qE6Zeu6aKYXG5cbiAqIPCfmKLkuI3mmI7nmb3kuLrku4DkuYggbWlkID0gbCArIChyIC0gbCkgPj4gMSDkvJrotoXml7bvvJ9cbiAgIFxuICAgKiDlm6DkuLrlsJHkuobmi6zlj7fjgJAgKChyIC0gbCkgPj4gMSkg44CRXG5cbj4g5bem6Zet5Y+z5byAXG5cbmNsYXNzIHNvbHV0aW9uIHtcbnB1YmxpYzpcbiAgICBpbnQgc2VhcmNoKHZlY3RvcjxpbnQ+JiBudW1zLCBpbnQgdGFyZ2V0KSB7XG4gICAgICAgIGludCBsID0gMCxyID0gbnVtcy5zaXplKCksbWlkID0gMDtcblxuICAgICAgICB3aGlsZSggbCA8IHIpe1xuICAgICAgICAgICAgbWlkID0gbCArIChyIC0gbCkgLyAyO1xuICAgICAgICAgICAgLy9taWQgPSBsICsgKChyIC0gbCkgPj4gMSk7XG4gICAgICAgICAgICBpZiAobnVtc1ttaWRdID4gdGFyZ2V0KXtcbiAgICAgICAgICAgICAgICByID0gbWlkO1xuICAgICAgICAgICAgfWVsc2UgaWYobnVtc1ttaWRdIDwgdGFyZ2V0KXtcbiAgICAgICAgICAgICAgICBsID0gbWlkICsgMTtcbiAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgIHJldHVybiBtaWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIC0xO1xuICAgIH1cbn07XG5cblxuMVxuMlxuM1xuNFxuNVxuNlxuN1xuOFxuOVxuMTBcbjExXG4xMlxuMTNcbjE0XG4xNVxuMTZcbjE3XG4xOFxuMTlcblxuXG4+IOW3pumXreWPs+mXrVxuXG5jbGFzcyBzb2x1dGlvbiB7XG5wdWJsaWM6XG4gICAgaW50IHNlYXJjaCh2ZWN0b3I8aW50PiYgbnVtcywgaW50IHRhcmdldCkge1xuICAgICAgICBpbnQgbCA9IDAsciA9IG51bXMuc2l6ZSgpLTEsbWlkID0gMDtcblxuICAgICAgICB3aGlsZSggbCA8PSByICl7XG4gICAgICAgICAgICBtaWQgPSBsICsgKHIgLSBsKSAvIDI7XG4gICAgICAgICAgICAvL21pZCA9IGwgKyAoKHIgLSBsKSA+PiAxKTtcbiAgICAgICAgICAgIGlmIChudW1zW21pZF0gPiB0YXJnZXQpe1xuICAgICAgICAgICAgICAgIHIgPSBtaWQgLSAxO1xuICAgICAgICAgICAgfWVsc2UgaWYobnVtc1ttaWRdIDwgdGFyZ2V0KXtcbiAgICAgICAgICAgICAgICBsID0gbWlkICsgMTtcbiAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgIHJldHVybiBtaWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIC0xO1xuICAgIH1cbn07XG5cblxuMVxuMlxuM1xuNFxuNVxuNlxuN1xuOFxuOVxuMTBcbjExXG4xMlxuMTNcbjE0XG4xNVxuMTZcbjE3XG4xOFxuMTlcblxuXG5cbiMg5b2V5ZCO5oOz5rOVXG5cbiAxLiDlr7nlj7PlvIDlkozlj7Ppl63nkIbop6PnmoTmm7Tmt7HliLvkuobvvIzmiJHmmK/ov5nkuYjnkIbop6PnmoRcbiAgICBcbiAgICAxLiDlj7Ppl63or7TmmI7lj5blvpfliLAgcmlnaHQsIOWmguaenCBtaWQg5Y+W5LiN5Yiw77yM5YiZIHJpZ2h0ID0gbWlkIC0gMVxuICAgIDIuIOWPs+W8gOivtOaYjuWPluS4jeWIsCByaWdodCwg5aaC5p6cIG1pZCDlj5bkuI3liLDvvIzliJkgcmlnaHQgPSBtaWRcblxuIDIuIOaXtumXtOWkjeadguW6pu+8jOWGmeWujOS4gOS4queul+azleimgeihqOaYjuWkjeadguW6plxuXG5cbiMg5Zuw6Zq+54K5XG5cbj4g5Li65LuA5LmIIG1pZCA9IGwgKyAociAtIGwpID4+IDEg5Lya6LaF5pe277yM6ICMIG1pZCA9IGwgKyAociAtIGwpIC8gMiDkuI3kvJrvvJ9cblxu5Zug5Li677yMbWlkID0gbCArIChyIC0gbCkgPj4gMSDpnIDopoHliqDkuIrmi6zlj7fvvJogbWlkID0gbCArICgociAtIGwpID4+IDEpXG5cblxuIyAyNy4g56e76Zmk5YWD57SgXG5cbiAqIOmimOebru+8mjI3LiDnp7vpmaTlhYPntKBcblxuICog6K6y6Kej77ya5paH56ug6K6y6Kej44CB6KeG6aKR6K6y6KejXG5cbiAqIOimgeaxgu+8muWFiOaatOWKm+WQjuWPjOaMh+mSiFxuXG5cbiMg5b2V5YmN5oOz5rOVXG5cbuaatOWKm+ino+azle+8jOenu+WKqOWFg+e0oO+8jOmXrumimOWNoeWcqOWHuueOsOmHjeWkjeWFg+e0oOaXtu+8jOS4gOebtOS8mueVmeedgOS4gOS4quWFg+e0oO+8jOS7peS4i+aYr+aIkeeahOS7o+egge+8iOmUmeivr+S7o+eggeKdjO+8iVxuXG5jbGFzcyBzb2x1dGlvbiB7XG5wdWJsaWM6XG4gICAgaW50IHJlbW92ZWVsZW1lbnQodmVjdG9yPGludD4mIG51bXMsIGludCB2YWwpIHtcbiAgICAgICAgaW50IHNpemUgPSBudW1zLnNpemUoKTtcblxuICAgICAgICBmb3IgKGludCBpID0gMDtpIDwgc2l6ZTsrK2kpe1xuICAgICAgICAgICAgaWYgKG51bXNbaV0gPT0gdmFsKXtcbiAgICAgICAgICAgICAgICBmb3IgKGludCBqID0gaTtqIDwgc2l6ZSAtIDE7KytqKXtcbiAgICAgICAgICAgICAgICAgICAgbnVtc1tqXSA9IG51bXNbaisxXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLS1zaXplO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzaXplO1xuICAgIH1cbn07XG5cblxuMVxuMlxuM1xuNFxuNVxuNlxuN1xuOFxuOVxuMTBcbjExXG4xMlxuMTNcbjE0XG4xNVxuMTZcblxuXG5cbiMg5b2V5ZCO5oOz5rOVXG5cbiAxLiDmmrTlipvop6Pms5Vcblxu55yL6L+H6K6y6Kej5ZCO5Y+R5YWI5piv6K6pIGkg55u05o6l5YmN6L+b5LqG77yM5rKh5pyJ6ICD6JmR5Yiw6KaG55uW5LiK5p2l55qE5YWD57Sg5Y+v6IO95piv5b6F5Yig6Zmk55qE5YC877yMKOato+ehruS7o+eggeKchSlcblxuY2xhc3Mgc29sdXRpb24ge1xucHVibGljOlxuICAgIGludCByZW1vdmVlbGVtZW50KHZlY3RvcjxpbnQ+JiBudW1zLCBpbnQgdmFsKSB7XG4gICAgICAgIGludCBzaXplID0gbnVtcy5zaXplKCk7XG5cbiAgICAgICAgZm9yIChpbnQgaSA9IDA7aSA8IHNpemU7KytpKXtcbiAgICAgICAgICAgIGlmIChudW1zW2ldID09IHZhbCl7XG4gICAgICAgICAgICAgICAgZm9yIChpbnQgaiA9IGk7aiA8IHNpemUgLSAxOysrail7XG4gICAgICAgICAgICAgICAgICAgIG51bXNbal0gPSBudW1zW2orMV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC0tc2l6ZTtcbiAgICAgICAgICAgICAgICAtLWk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gc2l6ZTtcbiAgICB9XG59O1xuXG5cbjFcbjJcbjNcbjRcbjVcbjZcbjdcbjhcbjlcbjEwXG4xMVxuMTJcbjEzXG4xNFxuMTVcbjE2XG4xN1xuMThcblxuICog5pe26Ze05aSN5p2C5bqm77yabyAobl4yKVxuICog56m66Ze05aSN5p2C5bqm77yabyAoMSlcblxuIDIuIOWPjOaMh+mSiFxuXG7lj4zmjIfpkojms5XvvIjlv6vmhaLmjIfpkojms5XvvInvvJog6YCa6L+H5LiA5Liq5b+r5oyH6ZKI5ZKM5oWi5oyH6ZKI5Zyo5LiA5LiqIGZvciDlvqrnjq/kuIvlrozmiJDkuKTkuKogZm9yIOW+queOr+eahOW3peS9nOOAglxuXG7lrprkuYnlv6vmhaLmjIfpkohcblxuICog5b+r5oyH6ZKI77ya55So5LqO5pu05pawXG4gKiDmhaLmjIfpkojvvJrooqvmm7TmlrBcblxuY2xhc3Mgc29sdXRpb24ge1xucHVibGljOlxuICAgIGludCByZW1vdmVlbGVtZW50KHZlY3RvcjxpbnQ+JiBudW1zLCBpbnQgdmFsKSB7XG4gICAgICAgIGludCBzaXplID0gbnVtcy5zaXplKCk7XG4gICAgICAgIGludCBzbG93ID0gMDtcblxuICAgICAgICBmb3IgKGludCBmYXN0ID0gMDsgZmFzdCA8IHNpemU7ICsrZmFzdCl7XG4gICAgICAgICAgICAvLyDov5nkuKogIT0g5Y+v5Lul5YaZ55qE6L+Z5LmI566A5rSB77yBXG4gICAgICAgICAgICBpZiAobnVtc1tmYXN0XSAhPSB2YWwpe1xuICAgICAgICAgICAgICAgbnVtc1tzbG93KytdID0gbnVtc1tmYXN0XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBzbG93O1xuICAgIH1cbn07XG5cblxuMVxuMlxuM1xuNFxuNVxuNlxuN1xuOFxuOVxuMTBcbjExXG4xMlxuMTNcbjE0XG4xNVxuMTZcblxuICog5pe26Ze05aSN5p2C5bqm77yabyAobilcbiAqIOepuumXtOWkjeadguW6pu+8mm8gKDEpXG5cbiAzLiDnm7jlkJHlj4zmjIfpkojmlrnms5Vcblxu5Z+65LqO5YWD57Sg6aG65bqP5Y+v5Lul5pS55Y+Y55qE6aKY55uu5o+P6L+w5pS55Y+Y5LqG5YWD57Sg55u45a+55L2N572u77yM56Gu5L+d5LqG56e75Yqo5pyA5bCR5YWD57Sg44CCXG5cbuaTjeS9nOWmguS4i++8mlxuXG4gKiDmib7lt6bovrnnrYnkuo4gdmFsIOeahOWFg+e0oFxuICog5om+5Y+z6L655LiN562J5LqOIHZhbCDnmoTlhYPntKBcbiAqIOWwhuWPs+i+ueS4jeetieS6jiB2YWwg55qE5YWD57Sg6KaG55uW5bem6L65562J5LqOIHZhbCDnmoTlhYPntKBcblxuY2xhc3Mgc29sdXRpb24ge1xucHVibGljOlxuICAgIGludCByZW1vdmVlbGVtZW50KHZlY3RvcjxpbnQ+JiBudW1zLCBpbnQgdmFsKSB7XG4gICAgICAgIGludCBzaXplID0gbnVtcy5zaXplKCk7XG4gICAgICAgIGludCByaWdodCA9IHNpemUgLSAxLGxlZnQgPSAwO1xuXG4gICAgICAgIHdoaWxlKGxlZnQgPD0gcmlnaHQpe1xuICAgICAgICAgICAgLy8g5om+5bem6L65562J5LqOdmFs55qE5YWD57SgXG4gICAgICAgICAgICB3aGlsZShsZWZ0IDw9IHJpZ2h0ICYmIG51bXNbbGVmdF0gIT0gdmFsKXsgXG4gICAgICAgICAgICAgICAgKytsZWZ0OyBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIOaJvuWPs+i+ueS4jeetieS6jnZhbOeahOWFg+e0oFxuICAgICAgICAgICAgd2hpbGUobGVmdCA8PSByaWdodCAmJiBudW1zW3JpZ2h0XSA9PSB2YWwpe1xuICAgICAgICAgICAgICAgIC0tcmlnaHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyDlsIblj7PovrnkuI3nrYnkuo52YWznmoTlhYPntKDopobnm5blt6bovrnnrYnkuo52YWznmoTlhYPntKBcbiAgICAgICAgICAgIGlmKGxlZnQgPD0gcmlnaHQpe1xuICAgICAgICAgICAgICAgIG51bXNbbGVmdCsrXSA9IG51bXNbcmlnaHQtLV07XG4gICAgICAgICAgICB9XG4gICAgICAgfVxuXG4gICAgICAgcmV0dXJuIGxlZnQ7IC8vIG51bXNbbGVmdCsrXSzliJrlpb3mjIflkJHkuobkuIvkuIDkuKrlhYPntKDvvIzkuIvmoIcgPSDlhYPntKDkuKrmlbBcbiAgICAgICAgXHRcdFx0Ly8gcmlnaHTmjIflkJHkuIrkuIDkuKrlhYPntKDvvIzpnIDopoErMVxuICAgIH1cbn07XG5cblxuMVxuMlxuM1xuNFxuNVxuNlxuN1xuOFxuOVxuMTBcbjExXG4xMlxuMTNcbjE0XG4xNVxuMTZcbjE3XG4xOFxuMTlcbjIwXG4yMVxuMjJcbjIzXG4yNFxuMjVcblxuXG5cbiMg5Zuw6Zq+54K5XG5cbiAxLiDmmrTlipvnp7vliqjlhYPntKDml7bogIPomZHkuI3lrozlloTvvIzmsqHmnInogIPomZHliLDmjKjnnYDnmoTph43lpI3lhYPntKDvvIznm7TmjqUgKytpIOi3s+i/h+S6huOAglxuIDIuIOWPjOaMh+mSiOS4re+8gT0g5YaZ5rOV5b6I566A5rSB77yM5rKh5pyJ5oOz5YiwXG5cblxuIyDmi5PlsZVcblxuXG4jIDM1LiDmkJzntKLmj5LlhaXkvY3nva5cblxuXG4jIDM0LiDlnKjmjpLluo/mlbDnu4TkuK3mn6Xmib7lhYPntKDnmoTnrKzkuIDkuKrlkozmnIDlkI7kuIDkuKrkvY3nva5cblxuXG4jIOaAu+e7k1xuXG4gMS4g5pWw57uE55qE5YWD57Sg5piv5LiN6IO95Yig55qE77yM5Y+q6IO96KaG55uW44CCXG4gMi4g57uG6IqC6ICD6JmR5LiN5ZGo44CCIiwKICAgICJjaGFyc2V0cyI6IHsKICAgICAgImNqayI6IHRydWUKICAgIH0KICB9LCB7CiAgICAidGl0bGUiOiAiRGF5MDIt5pWw57uEIiwKICAgICJmcm9udG1hdHRlciI6IHsKICAgICAgInRpdGxlIjogIkRheTAyLeaVsOe7hCIsCiAgICAgICJkYXRlIjogIjIwMjMtMDUtMjVUMDE6Mjg6NDEuMDAwWiIsCiAgICAgICJwZXJtYWxpbmsiOiAiL3BhZ2VzL2YyZDNhYS8iLAogICAgICAiY2F0ZWdvcmllcyI6IFsi566X5rOVIiwgIueul+azleaJk+WNoSJdLAogICAgICAidGFncyI6IFsi5omT5Y2hIl0KICAgIH0sCiAgICAicmVndWxhclBhdGgiOiAiLzAyLiVFNyVBRSU5NyVFNiVCMyU5NS8wMS4lRTclQUUlOTclRTYlQjMlOTUlRTYlODklOTMlRTUlOEQlQTEvMDIuRGF5MDItJUU2JTk1JUIwJUU3JUJCJTg0Lmh0bWwiLAogICAgInJlbGF0aXZlUGF0aCI6ICIwMi7nrpfms5UvMDEu566X5rOV5omT5Y2hLzAyLkRheTAyLeaVsOe7hC5tZCIsCiAgICAia2V5IjogInYtMjFiZTk3ZDAiLAogICAgInBhdGgiOiAiL3BhZ2VzL2YyZDNhYS8iLAogICAgImhlYWRlcnMiOiBbewogICAgICAibGV2ZWwiOiAyLAogICAgICAidGl0bGUiOiAiOTc3LuacieW6j+aVsOe7hOeahOW5s+aWuSIsCiAgICAgICJzbHVnIjogIl85Nzct5pyJ5bqP5pWw57uE55qE5bmz5pa5IiwKICAgICAgIm5vcm1hbGl6ZWRUaXRsZSI6ICI5NzcuIOacieW6j+aVsOe7hOeahOW5s+aWuSIsCiAgICAgICJjaGFySW5kZXgiOiAyCiAgICB9LCB7CiAgICAgICJsZXZlbCI6IDMsCiAgICAgICJ0aXRsZSI6ICLlvZXliY3mg7Pms5UiLAogICAgICAic2x1ZyI6ICLlvZXliY3mg7Pms5UiLAogICAgICAibm9ybWFsaXplZFRpdGxlIjogIuW9leWJjeaDs+azlSIsCiAgICAgICJjaGFySW5kZXgiOiAxMjAKICAgIH0sIHsKICAgICAgImxldmVsIjogMywKICAgICAgInRpdGxlIjogIuW9leWQjuaDs+azlSIsCiAgICAgICJzbHVnIjogIuW9leWQjuaDs+azlSIsCiAgICAgICJub3JtYWxpemVkVGl0bGUiOiAi5b2V5ZCO5oOz5rOVIiwKICAgICAgImNoYXJJbmRleCI6IDEzODIKICAgIH0sIHsKICAgICAgImxldmVsIjogMywKICAgICAgInRpdGxlIjogIuWbsOmavueCuSIsCiAgICAgICJzbHVnIjogIuWbsOmavueCuSIsCiAgICAgICJub3JtYWxpemVkVGl0bGUiOiAi5Zuw6Zq+54K5IiwKICAgICAgImNoYXJJbmRleCI6IDIxMTAKICAgIH0sIHsKICAgICAgImxldmVsIjogMiwKICAgICAgInRpdGxlIjogIjIwOS7plb/luqbmnIDlsI/nmoTlrZDmlbDnu4QiLAogICAgICAic2x1ZyI6ICJfMjA5LemVv+W6puacgOWwj+eahOWtkOaVsOe7hCIsCiAgICAgICJub3JtYWxpemVkVGl0bGUiOiAiMjA5LiDplb/luqbmnIDlsI/nmoTlrZDmlbDnu4QiLAogICAgICAiY2hhckluZGV4IjogMTYKICAgIH0sIHsKICAgICAgImxldmVsIjogMywKICAgICAgInRpdGxlIjogIuW9leWJjeaDs+azlSIsCiAgICAgICJzbHVnIjogIuW9leWJjeaDs+azlS0yIiwKICAgICAgIm5vcm1hbGl6ZWRUaXRsZSI6ICLlvZXliY3mg7Pms5UiLAogICAgICAiY2hhckluZGV4IjogMTIwCiAgICB9LCB7CiAgICAgICJsZXZlbCI6IDMsCiAgICAgICJ0aXRsZSI6ICLlvZXlkI7mg7Pms5UiLAogICAgICAic2x1ZyI6ICLlvZXlkI7mg7Pms5UtMiIsCiAgICAgICJub3JtYWxpemVkVGl0bGUiOiAi5b2V5ZCO5oOz5rOVIiwKICAgICAgImNoYXJJbmRleCI6IDEzODIKICAgIH0sIHsKICAgICAgImxldmVsIjogMywKICAgICAgInRpdGxlIjogIuWbsOmavueCuSIsCiAgICAgICJzbHVnIjogIuWbsOmavueCuS0yIiwKICAgICAgIm5vcm1hbGl6ZWRUaXRsZSI6ICLlm7Dpmr7ngrkiLAogICAgICAiY2hhckluZGV4IjogMjExMAogICAgfSwgewogICAgICAibGV2ZWwiOiAyLAogICAgICAidGl0bGUiOiAiNTku6J665peL55+p6Zi1SUkiLAogICAgICAic2x1ZyI6ICJfNTkt6J665peL55+p6Zi1aWkiLAogICAgICAibm9ybWFsaXplZFRpdGxlIjogIjU5LiDonrrml4vnn6npmLUgaWkiLAogICAgICAiY2hhckluZGV4IjogMzEKICAgIH0sIHsKICAgICAgImxldmVsIjogMywKICAgICAgInRpdGxlIjogIuW9leWJjeaDs+azlSIsCiAgICAgICJzbHVnIjogIuW9leWJjeaDs+azlS0zIiwKICAgICAgIm5vcm1hbGl6ZWRUaXRsZSI6ICLlvZXliY3mg7Pms5UiLAogICAgICAiY2hhckluZGV4IjogMTIwCiAgICB9LCB7CiAgICAgICJsZXZlbCI6IDMsCiAgICAgICJ0aXRsZSI6ICLlvZXlkI7mg7Pms5UiLAogICAgICAic2x1ZyI6ICLlvZXlkI7mg7Pms5UtMyIsCiAgICAgICJub3JtYWxpemVkVGl0bGUiOiAi5b2V5ZCO5oOz5rOVIiwKICAgICAgImNoYXJJbmRleCI6IDEzODIKICAgIH0sIHsKICAgICAgImxldmVsIjogMywKICAgICAgInRpdGxlIjogIuWbsOmavueCuSIsCiAgICAgICJzbHVnIjogIuWbsOmavueCuS0zIiwKICAgICAgIm5vcm1hbGl6ZWRUaXRsZSI6ICLlm7Dpmr7ngrkiLAogICAgICAiY2hhckluZGV4IjogMjExMAogICAgfSwgewogICAgICAibGV2ZWwiOiAyLAogICAgICAidGl0bGUiOiAi5oC757uTIiwKICAgICAgInNsdWciOiAi5oC757uTIiwKICAgICAgIm5vcm1hbGl6ZWRUaXRsZSI6ICLmgLvnu5MiLAogICAgICAiY2hhckluZGV4IjogNDQKICAgIH1dLAogICAgImV4Y2VycHQiOiAiPGJsb2NrcXVvdGU+XG48cD45NzcuIOacieW6j+aVsOe7hOeahOW5s+aWuSDjgIEyMDkuIOmVv+W6puacgOWwj+eahOWtkOaVsOe7hCDjgIE1OS4g6J665peL55+p6Zi1IElJIOOAgeaAu+e7kzwvcD5cbjwvYmxvY2txdW90ZT5cbiIsCiAgICAibGFzdFVwZGF0ZWQiOiAiNi8yLzIwMjMsIDY6MzQ6MDAgUE0iLAogICAgImxhc3RVcGRhdGVkVGltZXN0YW1wIjogMTY4NTcwMjA0MDAwMCwKICAgICJoZWFkZXJzU3RyIjogIjk3Ny7mnInluo/mlbDnu4TnmoTlubPmlrkg5b2V5YmN5oOz5rOVIOW9leWQjuaDs+azlSDlm7Dpmr7ngrkgMjA5LumVv+W6puacgOWwj+eahOWtkOaVsOe7hCDlvZXliY3mg7Pms5Ug5b2V5ZCO5oOz5rOVIOWbsOmavueCuSA1OS7onrrml4vnn6npmLVJSSDlvZXliY3mg7Pms5Ug5b2V5ZCO5oOz5rOVIOWbsOmavueCuSDmgLvnu5MiLAogICAgImNvbnRlbnQiOiAiPiA5NzcuIOacieW6j+aVsOe7hOeahOW5s+aWuSDjgIEyMDkuIOmVv+W6puacgOWwj+eahOWtkOaVsOe7hCDjgIE1OS4g6J665peL55+p6Zi1IElJIOOAgeaAu+e7k1xuXG5cbiMgOTc3LiDmnInluo/mlbDnu4TnmoTlubPmlrlcblxuICog6aKY55uu77yaOTc3LiDmnInluo/mlbDnu4TnmoTlubPmlrlcblxuICog6K6y6Kej77ya5paH56ug6K6y6Kej44CB6KeG6aKR6K6y6KejXG5cbiAqIOimgeaxgu+8mueQhuino+WPjOaMh+mSiOaAneaDs1xuXG5cbiMg5b2V5YmN5oOz5rOVXG5cbuaIkeeahOaAnei3r+aYr+eUqOWPjOaMh+mSiO+8jOaJvuWIsOi0n+aVsOeahOacgOWkp+WAvO+8jOato+aVsOeahOacgOWwj+WAvO+8jOeEtuWQjuS6pOaNou+8jOS4jemineWklueUs+ivt+aWsOeahOepuumXtOOAkOacquWunueOsOKdjOOAkVxuXG7nsbvkvLzlhpLniYzmjpLluo/vvIzlsIblpKfnmoTlhYPntKDlhpLms6HkuIrljrvjgIJcblxuY2xhc3MgU29sdXRpb24ge1xucHVibGljOlxuICAgIHZlY3RvcjxpbnQ+IHNvcnRlZFNxdWFyZXModmVjdG9yPGludD4mIG51bXMpIHtcbiAgICAgICAgaW50IGZhc3QgPSAwLHNsb3cgPSAwO1xuICAgICAgICBpbnQgc2l6ZSA9IG51bXMuc2l6ZSgpO1xuICAgICAgICBpbnQgdG1wID0gMDtcblxuICAgICAgICBpZiAobnVtc1tmYXN0XSA+PSAwKXtcbiAgICAgICAgICAgIHJldHVybiBwbHVzKG51bXMsc2l6ZSk7XG4gICAgICAgIH1lbHNle1xuICAgICAgICAgICAgLy8g5om+5Yiw56ys5LiA5Liq5q2j5pWw77yM5YyF5ousMFxuICAgICAgICAgICAgd2hpbGUobnVtc1tmYXN0XSA8IDApeysrZmFzdDt9XG4gICAgICAgIH1cblxuICAgICAgICBmb3IoO2Zhc3QgPCBzaXplLHNsb3cgPiAwOyl7XG4gICAgICAgICAgICAvLyAtNCAtMSAwIDMgMTBcbiAgICAgICAgICAgIC8vIC00ICAwIDEgMyAxMCBcbiAgICAgICAgICAgIC8vIDAgICA0IDEgMyAxMFxuICAgICAgICAgICAgLy8gMCAgIDEgNCAzIDEwXG4gICAgICAgICAgICAvLyAwICAgMSAzIDQgMTBcbiAgICAgICAgICAgIC8vIOW5s+aWuVxuICAgICAgICAgICAgaWYobnVtc1tmYXN0XSA8IC1udW1zW3Nsb3ddKXtcbiAgICAgICAgICAgICAgICB0bXAgPSBudW1zW2Zhc3RdO1xuICAgICAgICAgICAgICAgIG51bXNbZmFzdF0gPSAtbnVtc1tzbG93XTtcbiAgICAgICAgICAgICAgICBudW1zW3Nsb3ddID0gdG1wO1xuICAgICAgICAgICAgICAgIC0tc2xvdztcbiAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgIHRtcCA9IG51bXNbZmFzdF07XG4gICAgICAgICAgICAgICAgbnVtc1tmYXN0XSA9IC1udW1zW3Nsb3ddO1xuICAgICAgICAgICAgICAgIG51bXNbc2xvd10gPSB0bXA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcGx1cyhudW1zLHNpemUpO1xuICAgIH1cblxuICAgIHZlY3RvcjxpbnQ+IHBsdXModmVjdG9yPGludD4mIG51bXMsaW50IHNpemUpe1xuXG4gICAgICAgIGZvcihpbnQgaSA9IDA7aSA8IHNpemU7KytpKXtcbiAgICAgICAgICAgIG51bXNbaV0gPSBudW1zW2ldKm51bXNbaV07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbnVtcztcbiAgICB9XG59O1xuXG5cbjFcbjJcbjNcbjRcbjVcbjZcbjdcbjhcbjlcbjEwXG4xMVxuMTJcbjEzXG4xNFxuMTVcbjE2XG4xN1xuMThcbjE5XG4yMFxuMjFcbjIyXG4yM1xuMjRcbjI1XG4yNlxuMjdcbjI4XG4yOVxuMzBcbjMxXG4zMlxuMzNcbjM0XG4zNVxuMzZcbjM3XG4zOFxuMzlcbjQwXG40MVxuNDJcbjQzXG40NFxuNDVcblxuXG5cbiMg5b2V5ZCO5oOz5rOVXG5cbueci+WujOWNoeWTpeeahOmimOino+WQjuWPkeeOsOiHquW3seWGmeeahOacieeCueeUu+ibh+a3u+i2s++8jOWGkuazoeS4jeWmguaatOWKm+iHquW4pueahOaOkuW6j+aXtumXtOWkjeadguW6puS9jvCfmKVcblxu5Y+R546w6ZqP5oOz5b2V6YeM55qE5Y+M5oyH6ZKI5piv55So5LqG6aKd5aSW56m66Ze055qE77yM5LiL5qyh57uD5Lmg6KaB5YWI6ICD6JmRIEFDIOWGjeiAg+iZkeS8mOWMluOAglxuXG5cblxuY2xhc3MgU29sdXRpb24ge1xucHVibGljOlxuICAgIHZlY3RvcjxpbnQ+IHNvcnRlZFNxdWFyZXModmVjdG9yPGludD4mIG51bXMpIHtcbiAgICAgICBcbiAgICAgICBpbnQgc2l6ZSA9IG51bXMuc2l6ZSgpO1xuICAgICAgIC8vIOmineWkluepuumXtFxuICAgICAgIHZlY3RvcjxpbnQ+IGFucyhzaXplLDApO1xuICAgICAgIC8vIOaMh+WQkeacgOWkp+WFg+e0oFxuICAgICAgIGludCBwID0gc2l6ZSAtIDE7XG5cbiAgICAgICBmb3IoaW50IGxlZnQgPSAwLHJpZ2h0ID0gcDtsZWZ0IDw9IHJpZ2h0Oyl7XG4gICAgICAgICAgIGlmKG51bXNbbGVmdF0qbnVtc1tsZWZ0XSA8IG51bXNbcmlnaHRdKm51bXNbcmlnaHRdKXtcbiAgICAgICAgICAgICAgIGFuc1twLS1dID0gbnVtc1tyaWdodF0qbnVtc1tyaWdodF07XG4gICAgICAgICAgICAgICAtLXJpZ2h0O1xuICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICBhbnNbcC0tXSA9IG51bXNbbGVmdF0qbnVtc1tsZWZ0XTtcbiAgICAgICAgICAgICAgICArK2xlZnQ7XG4gICAgICAgICAgIH1cbiAgICAgICB9XG5cbiAgICAgICByZXR1cm4gYW5zO1xuICAgIH1cblxufTtcblxuXG4xXG4yXG4zXG40XG41XG42XG43XG44XG45XG4xMFxuMTFcbjEyXG4xM1xuMTRcbjE1XG4xNlxuMTdcbjE4XG4xOVxuMjBcbjIxXG4yMlxuMjNcbjI0XG5cbiAqIOaXtumXtOWkjeadguW6pu+8mk8gKG4pXG4gKiDnqbrpl7TlpI3mnYLluqbvvJpPIChuKVxuXG5cbiMg5Zuw6Zq+54K5XG5cbiAqIOaDs+S4jeWIsOWPjOaMh+mSiOeahOenu+WKqFxuXG5cbiMgMjA5LiDplb/luqbmnIDlsI/nmoTlrZDmlbDnu4RcblxuICog6aKY55uu77yaMjA5LiDplb/luqbmnIDlsI/nmoTlrZDmlbDnu4RcblxuICog6K6y6Kej77ya5paH56ug6K6y6Kej44CB6KeG6aKR6K6y6KejXG5cbiAqIOimgeaxgu+8mueQhuino+a7keWKqOeql+WPo1xuXG5cbiMg5b2V5YmN5oOz5rOVXG5cbuaIkeeahOaAnei3r++8muWFiOaOkuW6j+eEtuWQjuS7juWwj+WIsOWkp+S4jeaWree8qeWwj+iMg+WbtOaJvuWIsOacgOWwj+WtkOaVsOe7hFxuXG5jbGFzcyBTb2x1dGlvbiB7XG5wdWJsaWM6XG4gICAgaW50IG1pblN1YkFycmF5TGVuKGludCB0YXJnZXQsIHZlY3RvcjxpbnQ+JiBudW1zKSB7XG5cbiAgICAgICAgaW50IHNpemUgPSBudW1zLnNpemUoKTtcbiAgICAgICAgXG4gICAgICAgIC8vIOaOkuW6j1xuICAgICAgICBzb3J0KG51bXMuYmVnaW4oKSwgbnVtcy5lbmQoKSk7XG5cbiAgICAgICAgLy8g5Y+M5oyH6ZKIXG4gICAgICAgIGludCBhbnMgPSBzaXplICsgMSxzdW0gPSAwO1xuXG4gICAgICAgIGZvciAoaW50IGxlZnQgPSAwLHJpZ2h0ID0gMDsgcmlnaHQgPCBudW1zLnNpemUoKTsgKytyaWdodCl7XG4gICAgICAgICAgICBzdW0gKz0gbnVtc1tyaWdodF07IFxuICAgICAgICAgICAgd2hpbGUoc3VtID49IHRhcmdldCl7XG4gICAgICAgICAgICAgICAgYW5zID0gbWluKHJpZ2h0IC0gbGVmdCArIDEsYW5zKTtcbiAgICAgICAgICAgICAgICBzdW0gLT0gbnVtc1tsZWZ0KytdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGFucyA9PSBzaXplICsgMSl7XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICByZXR1cm4gYW5zO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgIH1cblxuICAgIGludCBtaW4oaW50IGEsaW50IGIpe1xuICAgICAgICByZXR1cm4gYSA+IGIgPyBiIDogYTtcbiAgICB9XG59O1xuXG5cbjFcbjJcbjNcbjRcbjVcbjZcbjdcbjhcbjlcbjEwXG4xMVxuMTJcbjEzXG4xNFxuMTVcbjE2XG4xN1xuMThcbjE5XG4yMFxuMjFcbjIyXG4yM1xuMjRcbjI1XG4yNlxuMjdcbjI4XG4yOVxuMzBcbjMxXG4zMlxuXG4gKiDml7bpl7TlpI3mnYLluqbvvJpPIChuKVxuICog56m66Ze05aSN5p2C5bqm77yaTyAoMSlcblxu5rKh5pyJ6YCa6L+H77yM5Y2h5Zyo5LqG56ysIDE3IOS4qua1i+ivleeUqOS+i1xuXG4yMTNcblsxMiwyOCw4Myw0LDI1LDI2LDI1LDIsMjUsMjUsMjUsMTJdXG4vLyDmraPnoa4gOFxuLy8g5oiR55qEIDdcblxuXG4xXG4yXG4zXG40XG5cblxu57uP6L+H5o6S5p+l77yM5Y+R546w5piv5Zug5Li65o6S5bqP5a+86Ie05LqG6aG65bqP5Ye66ZSZ5LqG77yM5LiN6IO95o6S5bqPXG5cbuWwhiBzb3J0IOazqOmHiuWNs+mAmui/h1xuXG5cbiMg5b2V5ZCO5oOz5rOVXG5cbuWSjOWNoeWTpeeahOaAnei3r+ebuOWQjO+8jOWcqOWGmeazleacieS4jeWQjO+8jOS4u+imgeaYr+WcqOS4ieebrui/kOeul+OAglxuXG7kv67mlLnlkI7ku6PnoIHlpoLkuItcblxuY2xhc3MgU29sdXRpb24ge1xucHVibGljOlxuICAgIGludCBtaW5TdWJBcnJheUxlbihpbnQgdGFyZ2V0LCB2ZWN0b3I8aW50PiYgbnVtcykge1xuXG4gICAgICAgIGludCBzaXplID0gbnVtcy5zaXplKCk7XG4gICAgICAgIGludCBhbnMgPSBzaXplICsgMSxzdW0gPSAwLHRtcFN1YiA9IDA7XG5cbiAgICAgICAgLy8g5Y+M5oyH6ZKIXG4gICAgICAgIGZvciAoaW50IGxlZnQgPSAwLHJpZ2h0ID0gMDsgcmlnaHQgPCBudW1zLnNpemUoKTsgKytyaWdodCl7XG4gICAgICAgICAgICBzdW0gKz0gbnVtc1tyaWdodF07IFxuICAgICAgICAgICAgd2hpbGUoc3VtID49IHRhcmdldCl7XG4gICAgICAgICAgICAgICAgLy8g56qX5Y+j5YaF5YWD57SgXG4gICAgICAgICAgICAgICAgdG1wU3ViID0gcmlnaHQgLSBsZWZ0ICsgMTtcbiAgICAgICAgICAgICAgICBhbnMgPSB0bXBTdWIgPiBhbnMgPyBhbnMgOiB0bXBTdWI7XG4gICAgICAgICAgICAgICAgc3VtIC09IG51bXNbbGVmdCsrXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBhbnMgPT0gc2l6ZSArIDEgPyAwIDogYW5zOyAgICAgICAgXG4gICAgfVxufTtcblxuXG4xXG4yXG4zXG40XG41XG42XG43XG44XG45XG4xMFxuMTFcbjEyXG4xM1xuMTRcbjE1XG4xNlxuMTdcbjE4XG4xOVxuMjBcbjIxXG5cbiAqIOaXtumXtOWkjeadguW6pu+8mk8gKG4pXG4gKiDnqbrpl7TlpI3mnYLluqbvvJpPICgxKVxuXG5cbiMg5Zuw6Zq+54K5XG5cbiAqIOmhuuW6j+aYr+WQpuWPr+S7peiiq+aJk+S5se+8iOaOkuW6j++8iVxuXG5cbiMgNTkuIOieuuaXi+efqemYtSBJSVxuXG4gKiDpopjnm67vvJo1OS4g6J665peL55+p6Zi1IElJXG4gKiDorrLop6PvvJrmlofnq6DorrLop6PjgIHop4bpopHorrLop6NcbiAqIOimgeaxgu+8mui9rOWciOeahOmAu+i+keWSjOWMuumXtOWumuS5iVxuXG5cbiMg5b2V5YmN5oOz5rOVXG5cbuWIhuS4uuWbm+mDqO+8jOeEtuWQjumAmui/h+WIpOaWremcgOimgeW+queOr+eahOWciOaVsOS4uiBuLzIg77yM55u05o6lIEFDXG5cbmNsYXNzIFNvbHV0aW9uIHtcbnB1YmxpYzpcbiAgICB2ZWN0b3I8dmVjdG9yPGludD4+IGdlbmVyYXRlTWF0cml4KGludCBuKSB7XG4gICAgICAgIC8vIOWumuS5iee7k+aenOmbhlxuICAgICAgICB2ZWN0b3I8dmVjdG9yPGludD4+IGFucyhuLCB2ZWN0b3I8aW50PihuLCAwKSk7XG4gICAgICAgIGludCBsZWZ0ID0gMCwgdXAgPSAwLHN1bSA9IDE7XG5cbiAgICAgICAgZm9yKGludCBqID0gMDsgaiA8PSBuLzI7IGorKyl7XG4gICAgICAgICAgICAvLyDlt6YgLT4g5Y+zXG4gICAgICAgICAgICBmb3IoaW50IGkgPSBsZWZ0OyBpIDwgbiAtIGxlZnQ7ICsraSApe1xuICAgICAgICAgICAgICAgIGFuc1tsZWZ0XVtpXSA9IHN1bSsrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgKytsZWZ0O1xuXG4gICAgICAgICAgICAvLyDkuIogLT4g5LiLXG4gICAgICAgICAgICBmb3IoaW50IGkgPSB1cCArIDE7IGkgPCBuIC0gdXA7ICsraSApe1xuICAgICAgICAgICAgICAgIGFuc1tpXVtuIC0gdXAgLSAxXSA9IHN1bSsrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgKyt1cDtcblxuICAgICAgICAgICAgLy8g5Y+zIC0+IOW3plxuICAgICAgICAgICAgZm9yKGludCBpID0gbiAtIGxlZnQgLSAxOyBpID49IGxlZnQgLSAxOyAtLWkpe1xuICAgICAgICAgICAgICAgIGFuc1tuIC0gbGVmdF1baV0gPSBzdW0rKztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8g5LiLIC0+IOS4ilxuICAgICAgICAgICAgZm9yKGludCBpID0gbiAtIHVwIC0gMTsgaSA+PSB1cDsgLS1pKXtcbiAgICAgICAgICAgICAgICBhbnNbaV1bdXAgLSAxXSA9IHN1bSsrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGFucztcbiAgICB9XG59O1xuXG5cbjFcbjJcbjNcbjRcbjVcbjZcbjdcbjhcbjlcbjEwXG4xMVxuMTJcbjEzXG4xNFxuMTVcbjE2XG4xN1xuMThcbjE5XG4yMFxuMjFcbjIyXG4yM1xuMjRcbjI1XG4yNlxuMjdcbjI4XG4yOVxuMzBcbjMxXG4zMlxuMzNcbjM0XG5cbiAqIOaXtumXtOWkjeadguW6piBPIChuXjIpXG4gKiDnqbrpl7TlpI3mnYLluqYgTyAoMSlcblxuXG4jIOW9leWQjuaDs+azlVxuXG7lkozljaHlk6XmgJ3ot6/lt67kuI3lpJrwn4aXXG5cblxuIyDlm7Dpmr7ngrlcblxuICog6ZyA6KaB5LuU57uG5Yik5pat5LuO5ZOq5byA5aeL5Yiw5ZOq57uT5p2fXG5cblxuIyDmgLvnu5NcblxuIDEuIOWFiOiAg+iZkeWujOaIkOmimOebrlxuIDIuIOWPjOaMh+mSiOmcgOimgeeBtea0u+S9v+eUqO+8jOS4jeiDveatu+adv1xuIDMuIOazqOaEj+adoeS7tuS4remhuuW6j+aYr+WQpuiDveiiq+aJk+S5se+8iOaOkuW6j++8iSIsCiAgICAibm9ybWFsaXplZENvbnRlbnQiOiAiPiA5NzcuIOacieW6j+aVsOe7hOeahOW5s+aWuSDjgIEyMDkuIOmVv+W6puacgOWwj+eahOWtkOaVsOe7hCDjgIE1OS4g6J665peL55+p6Zi1IGlpIOOAgeaAu+e7k1xuXG5cbiMgOTc3LiDmnInluo/mlbDnu4TnmoTlubPmlrlcblxuICog6aKY55uu77yaOTc3LiDmnInluo/mlbDnu4TnmoTlubPmlrlcblxuICog6K6y6Kej77ya5paH56ug6K6y6Kej44CB6KeG6aKR6K6y6KejXG5cbiAqIOimgeaxgu+8mueQhuino+WPjOaMh+mSiOaAneaDs1xuXG5cbiMg5b2V5YmN5oOz5rOVXG5cbuaIkeeahOaAnei3r+aYr+eUqOWPjOaMh+mSiO+8jOaJvuWIsOi0n+aVsOeahOacgOWkp+WAvO+8jOato+aVsOeahOacgOWwj+WAvO+8jOeEtuWQjuS6pOaNou+8jOS4jemineWklueUs+ivt+aWsOeahOepuumXtOOAkOacquWunueOsOKdjOOAkVxuXG7nsbvkvLzlhpLniYzmjpLluo/vvIzlsIblpKfnmoTlhYPntKDlhpLms6HkuIrljrvjgIJcblxuY2xhc3Mgc29sdXRpb24ge1xucHVibGljOlxuICAgIHZlY3RvcjxpbnQ+IHNvcnRlZHNxdWFyZXModmVjdG9yPGludD4mIG51bXMpIHtcbiAgICAgICAgaW50IGZhc3QgPSAwLHNsb3cgPSAwO1xuICAgICAgICBpbnQgc2l6ZSA9IG51bXMuc2l6ZSgpO1xuICAgICAgICBpbnQgdG1wID0gMDtcblxuICAgICAgICBpZiAobnVtc1tmYXN0XSA+PSAwKXtcbiAgICAgICAgICAgIHJldHVybiBwbHVzKG51bXMsc2l6ZSk7XG4gICAgICAgIH1lbHNle1xuICAgICAgICAgICAgLy8g5om+5Yiw56ys5LiA5Liq5q2j5pWw77yM5YyF5ousMFxuICAgICAgICAgICAgd2hpbGUobnVtc1tmYXN0XSA8IDApeysrZmFzdDt9XG4gICAgICAgIH1cblxuICAgICAgICBmb3IoO2Zhc3QgPCBzaXplLHNsb3cgPiAwOyl7XG4gICAgICAgICAgICAvLyAtNCAtMSAwIDMgMTBcbiAgICAgICAgICAgIC8vIC00ICAwIDEgMyAxMCBcbiAgICAgICAgICAgIC8vIDAgICA0IDEgMyAxMFxuICAgICAgICAgICAgLy8gMCAgIDEgNCAzIDEwXG4gICAgICAgICAgICAvLyAwICAgMSAzIDQgMTBcbiAgICAgICAgICAgIC8vIOW5s+aWuVxuICAgICAgICAgICAgaWYobnVtc1tmYXN0XSA8IC1udW1zW3Nsb3ddKXtcbiAgICAgICAgICAgICAgICB0bXAgPSBudW1zW2Zhc3RdO1xuICAgICAgICAgICAgICAgIG51bXNbZmFzdF0gPSAtbnVtc1tzbG93XTtcbiAgICAgICAgICAgICAgICBudW1zW3Nsb3ddID0gdG1wO1xuICAgICAgICAgICAgICAgIC0tc2xvdztcbiAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgIHRtcCA9IG51bXNbZmFzdF07XG4gICAgICAgICAgICAgICAgbnVtc1tmYXN0XSA9IC1udW1zW3Nsb3ddO1xuICAgICAgICAgICAgICAgIG51bXNbc2xvd10gPSB0bXA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcGx1cyhudW1zLHNpemUpO1xuICAgIH1cblxuICAgIHZlY3RvcjxpbnQ+IHBsdXModmVjdG9yPGludD4mIG51bXMsaW50IHNpemUpe1xuXG4gICAgICAgIGZvcihpbnQgaSA9IDA7aSA8IHNpemU7KytpKXtcbiAgICAgICAgICAgIG51bXNbaV0gPSBudW1zW2ldKm51bXNbaV07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbnVtcztcbiAgICB9XG59O1xuXG5cbjFcbjJcbjNcbjRcbjVcbjZcbjdcbjhcbjlcbjEwXG4xMVxuMTJcbjEzXG4xNFxuMTVcbjE2XG4xN1xuMThcbjE5XG4yMFxuMjFcbjIyXG4yM1xuMjRcbjI1XG4yNlxuMjdcbjI4XG4yOVxuMzBcbjMxXG4zMlxuMzNcbjM0XG4zNVxuMzZcbjM3XG4zOFxuMzlcbjQwXG40MVxuNDJcbjQzXG40NFxuNDVcblxuXG5cbiMg5b2V5ZCO5oOz5rOVXG5cbueci+WujOWNoeWTpeeahOmimOino+WQjuWPkeeOsOiHquW3seWGmeeahOacieeCueeUu+ibh+a3u+i2s++8jOWGkuazoeS4jeWmguaatOWKm+iHquW4pueahOaOkuW6j+aXtumXtOWkjeadguW6puS9jvCfmKVcblxu5Y+R546w6ZqP5oOz5b2V6YeM55qE5Y+M5oyH6ZKI5piv55So5LqG6aKd5aSW56m66Ze055qE77yM5LiL5qyh57uD5Lmg6KaB5YWI6ICD6JmRIGFjIOWGjeiAg+iZkeS8mOWMluOAglxuXG5cblxuY2xhc3Mgc29sdXRpb24ge1xucHVibGljOlxuICAgIHZlY3RvcjxpbnQ+IHNvcnRlZHNxdWFyZXModmVjdG9yPGludD4mIG51bXMpIHtcbiAgICAgICBcbiAgICAgICBpbnQgc2l6ZSA9IG51bXMuc2l6ZSgpO1xuICAgICAgIC8vIOmineWkluepuumXtFxuICAgICAgIHZlY3RvcjxpbnQ+IGFucyhzaXplLDApO1xuICAgICAgIC8vIOaMh+WQkeacgOWkp+WFg+e0oFxuICAgICAgIGludCBwID0gc2l6ZSAtIDE7XG5cbiAgICAgICBmb3IoaW50IGxlZnQgPSAwLHJpZ2h0ID0gcDtsZWZ0IDw9IHJpZ2h0Oyl7XG4gICAgICAgICAgIGlmKG51bXNbbGVmdF0qbnVtc1tsZWZ0XSA8IG51bXNbcmlnaHRdKm51bXNbcmlnaHRdKXtcbiAgICAgICAgICAgICAgIGFuc1twLS1dID0gbnVtc1tyaWdodF0qbnVtc1tyaWdodF07XG4gICAgICAgICAgICAgICAtLXJpZ2h0O1xuICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICBhbnNbcC0tXSA9IG51bXNbbGVmdF0qbnVtc1tsZWZ0XTtcbiAgICAgICAgICAgICAgICArK2xlZnQ7XG4gICAgICAgICAgIH1cbiAgICAgICB9XG5cbiAgICAgICByZXR1cm4gYW5zO1xuICAgIH1cblxufTtcblxuXG4xXG4yXG4zXG40XG41XG42XG43XG44XG45XG4xMFxuMTFcbjEyXG4xM1xuMTRcbjE1XG4xNlxuMTdcbjE4XG4xOVxuMjBcbjIxXG4yMlxuMjNcbjI0XG5cbiAqIOaXtumXtOWkjeadguW6pu+8mm8gKG4pXG4gKiDnqbrpl7TlpI3mnYLluqbvvJpvIChuKVxuXG5cbiMg5Zuw6Zq+54K5XG5cbiAqIOaDs+S4jeWIsOWPjOaMh+mSiOeahOenu+WKqFxuXG5cbiMgMjA5LiDplb/luqbmnIDlsI/nmoTlrZDmlbDnu4RcblxuICog6aKY55uu77yaMjA5LiDplb/luqbmnIDlsI/nmoTlrZDmlbDnu4RcblxuICog6K6y6Kej77ya5paH56ug6K6y6Kej44CB6KeG6aKR6K6y6KejXG5cbiAqIOimgeaxgu+8mueQhuino+a7keWKqOeql+WPo1xuXG5cbiMg5b2V5YmN5oOz5rOVXG5cbuaIkeeahOaAnei3r++8muWFiOaOkuW6j+eEtuWQjuS7juWwj+WIsOWkp+S4jeaWree8qeWwj+iMg+WbtOaJvuWIsOacgOWwj+WtkOaVsOe7hFxuXG5jbGFzcyBzb2x1dGlvbiB7XG5wdWJsaWM6XG4gICAgaW50IG1pbnN1YmFycmF5bGVuKGludCB0YXJnZXQsIHZlY3RvcjxpbnQ+JiBudW1zKSB7XG5cbiAgICAgICAgaW50IHNpemUgPSBudW1zLnNpemUoKTtcbiAgICAgICAgXG4gICAgICAgIC8vIOaOkuW6j1xuICAgICAgICBzb3J0KG51bXMuYmVnaW4oKSwgbnVtcy5lbmQoKSk7XG5cbiAgICAgICAgLy8g5Y+M5oyH6ZKIXG4gICAgICAgIGludCBhbnMgPSBzaXplICsgMSxzdW0gPSAwO1xuXG4gICAgICAgIGZvciAoaW50IGxlZnQgPSAwLHJpZ2h0ID0gMDsgcmlnaHQgPCBudW1zLnNpemUoKTsgKytyaWdodCl7XG4gICAgICAgICAgICBzdW0gKz0gbnVtc1tyaWdodF07IFxuICAgICAgICAgICAgd2hpbGUoc3VtID49IHRhcmdldCl7XG4gICAgICAgICAgICAgICAgYW5zID0gbWluKHJpZ2h0IC0gbGVmdCArIDEsYW5zKTtcbiAgICAgICAgICAgICAgICBzdW0gLT0gbnVtc1tsZWZ0KytdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGFucyA9PSBzaXplICsgMSl7XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICByZXR1cm4gYW5zO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgIH1cblxuICAgIGludCBtaW4oaW50IGEsaW50IGIpe1xuICAgICAgICByZXR1cm4gYSA+IGIgPyBiIDogYTtcbiAgICB9XG59O1xuXG5cbjFcbjJcbjNcbjRcbjVcbjZcbjdcbjhcbjlcbjEwXG4xMVxuMTJcbjEzXG4xNFxuMTVcbjE2XG4xN1xuMThcbjE5XG4yMFxuMjFcbjIyXG4yM1xuMjRcbjI1XG4yNlxuMjdcbjI4XG4yOVxuMzBcbjMxXG4zMlxuXG4gKiDml7bpl7TlpI3mnYLluqbvvJpvIChuKVxuICog56m66Ze05aSN5p2C5bqm77yabyAoMSlcblxu5rKh5pyJ6YCa6L+H77yM5Y2h5Zyo5LqG56ysIDE3IOS4qua1i+ivleeUqOS+i1xuXG4yMTNcblsxMiwyOCw4Myw0LDI1LDI2LDI1LDIsMjUsMjUsMjUsMTJdXG4vLyDmraPnoa4gOFxuLy8g5oiR55qEIDdcblxuXG4xXG4yXG4zXG40XG5cblxu57uP6L+H5o6S5p+l77yM5Y+R546w5piv5Zug5Li65o6S5bqP5a+86Ie05LqG6aG65bqP5Ye66ZSZ5LqG77yM5LiN6IO95o6S5bqPXG5cbuWwhiBzb3J0IOazqOmHiuWNs+mAmui/h1xuXG5cbiMg5b2V5ZCO5oOz5rOVXG5cbuWSjOWNoeWTpeeahOaAnei3r+ebuOWQjO+8jOWcqOWGmeazleacieS4jeWQjO+8jOS4u+imgeaYr+WcqOS4ieebrui/kOeul+OAglxuXG7kv67mlLnlkI7ku6PnoIHlpoLkuItcblxuY2xhc3Mgc29sdXRpb24ge1xucHVibGljOlxuICAgIGludCBtaW5zdWJhcnJheWxlbihpbnQgdGFyZ2V0LCB2ZWN0b3I8aW50PiYgbnVtcykge1xuXG4gICAgICAgIGludCBzaXplID0gbnVtcy5zaXplKCk7XG4gICAgICAgIGludCBhbnMgPSBzaXplICsgMSxzdW0gPSAwLHRtcHN1YiA9IDA7XG5cbiAgICAgICAgLy8g5Y+M5oyH6ZKIXG4gICAgICAgIGZvciAoaW50IGxlZnQgPSAwLHJpZ2h0ID0gMDsgcmlnaHQgPCBudW1zLnNpemUoKTsgKytyaWdodCl7XG4gICAgICAgICAgICBzdW0gKz0gbnVtc1tyaWdodF07IFxuICAgICAgICAgICAgd2hpbGUoc3VtID49IHRhcmdldCl7XG4gICAgICAgICAgICAgICAgLy8g56qX5Y+j5YaF5YWD57SgXG4gICAgICAgICAgICAgICAgdG1wc3ViID0gcmlnaHQgLSBsZWZ0ICsgMTtcbiAgICAgICAgICAgICAgICBhbnMgPSB0bXBzdWIgPiBhbnMgPyBhbnMgOiB0bXBzdWI7XG4gICAgICAgICAgICAgICAgc3VtIC09IG51bXNbbGVmdCsrXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBhbnMgPT0gc2l6ZSArIDEgPyAwIDogYW5zOyAgICAgICAgXG4gICAgfVxufTtcblxuXG4xXG4yXG4zXG40XG41XG42XG43XG44XG45XG4xMFxuMTFcbjEyXG4xM1xuMTRcbjE1XG4xNlxuMTdcbjE4XG4xOVxuMjBcbjIxXG5cbiAqIOaXtumXtOWkjeadguW6pu+8mm8gKG4pXG4gKiDnqbrpl7TlpI3mnYLluqbvvJpvICgxKVxuXG5cbiMg5Zuw6Zq+54K5XG5cbiAqIOmhuuW6j+aYr+WQpuWPr+S7peiiq+aJk+S5se+8iOaOkuW6j++8iVxuXG5cbiMgNTkuIOieuuaXi+efqemYtSBpaVxuXG4gKiDpopjnm67vvJo1OS4g6J665peL55+p6Zi1IGlpXG4gKiDorrLop6PvvJrmlofnq6DorrLop6PjgIHop4bpopHorrLop6NcbiAqIOimgeaxgu+8mui9rOWciOeahOmAu+i+keWSjOWMuumXtOWumuS5iVxuXG5cbiMg5b2V5YmN5oOz5rOVXG5cbuWIhuS4uuWbm+mDqO+8jOeEtuWQjumAmui/h+WIpOaWremcgOimgeW+queOr+eahOWciOaVsOS4uiBuLzIg77yM55u05o6lIGFjXG5cbmNsYXNzIHNvbHV0aW9uIHtcbnB1YmxpYzpcbiAgICB2ZWN0b3I8dmVjdG9yPGludD4+IGdlbmVyYXRlbWF0cml4KGludCBuKSB7XG4gICAgICAgIC8vIOWumuS5iee7k+aenOmbhlxuICAgICAgICB2ZWN0b3I8dmVjdG9yPGludD4+IGFucyhuLCB2ZWN0b3I8aW50PihuLCAwKSk7XG4gICAgICAgIGludCBsZWZ0ID0gMCwgdXAgPSAwLHN1bSA9IDE7XG5cbiAgICAgICAgZm9yKGludCBqID0gMDsgaiA8PSBuLzI7IGorKyl7XG4gICAgICAgICAgICAvLyDlt6YgLT4g5Y+zXG4gICAgICAgICAgICBmb3IoaW50IGkgPSBsZWZ0OyBpIDwgbiAtIGxlZnQ7ICsraSApe1xuICAgICAgICAgICAgICAgIGFuc1tsZWZ0XVtpXSA9IHN1bSsrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgKytsZWZ0O1xuXG4gICAgICAgICAgICAvLyDkuIogLT4g5LiLXG4gICAgICAgICAgICBmb3IoaW50IGkgPSB1cCArIDE7IGkgPCBuIC0gdXA7ICsraSApe1xuICAgICAgICAgICAgICAgIGFuc1tpXVtuIC0gdXAgLSAxXSA9IHN1bSsrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgKyt1cDtcblxuICAgICAgICAgICAgLy8g5Y+zIC0+IOW3plxuICAgICAgICAgICAgZm9yKGludCBpID0gbiAtIGxlZnQgLSAxOyBpID49IGxlZnQgLSAxOyAtLWkpe1xuICAgICAgICAgICAgICAgIGFuc1tuIC0gbGVmdF1baV0gPSBzdW0rKztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8g5LiLIC0+IOS4ilxuICAgICAgICAgICAgZm9yKGludCBpID0gbiAtIHVwIC0gMTsgaSA+PSB1cDsgLS1pKXtcbiAgICAgICAgICAgICAgICBhbnNbaV1bdXAgLSAxXSA9IHN1bSsrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGFucztcbiAgICB9XG59O1xuXG5cbjFcbjJcbjNcbjRcbjVcbjZcbjdcbjhcbjlcbjEwXG4xMVxuMTJcbjEzXG4xNFxuMTVcbjE2XG4xN1xuMThcbjE5XG4yMFxuMjFcbjIyXG4yM1xuMjRcbjI1XG4yNlxuMjdcbjI4XG4yOVxuMzBcbjMxXG4zMlxuMzNcbjM0XG5cbiAqIOaXtumXtOWkjeadguW6piBvIChuXjIpXG4gKiDnqbrpl7TlpI3mnYLluqYgbyAoMSlcblxuXG4jIOW9leWQjuaDs+azlVxuXG7lkozljaHlk6XmgJ3ot6/lt67kuI3lpJrwn4aXXG5cblxuIyDlm7Dpmr7ngrlcblxuICog6ZyA6KaB5LuU57uG5Yik5pat5LuO5ZOq5byA5aeL5Yiw5ZOq57uT5p2fXG5cblxuIyDmgLvnu5NcblxuIDEuIOWFiOiAg+iZkeWujOaIkOmimOebrlxuIDIuIOWPjOaMh+mSiOmcgOimgeeBtea0u+S9v+eUqO+8jOS4jeiDveatu+adv1xuIDMuIOazqOaEj+adoeS7tuS4remhuuW6j+aYr+WQpuiDveiiq+aJk+S5se+8iOaOkuW6j++8iSIsCiAgICAiY2hhcnNldHMiOiB7CiAgICAgICJjamsiOiB0cnVlCiAgICB9CiAgfSwgewogICAgInRpdGxlIjogIkRheTA0LemTvuihqCIsCiAgICAiZnJvbnRtYXR0ZXIiOiB7CiAgICAgICJ0aXRsZSI6ICJEYXkwNC3pk77ooagiLAogICAgICAiZGF0ZSI6ICIyMDIzLTA1LTI3VDAwOjE5OjU4LjAwMFoiLAogICAgICAicGVybWFsaW5rIjogIi9wYWdlcy8xMTVhZjcvIiwKICAgICAgImNhdGVnb3JpZXMiOiBbIueul+azlSIsICLnrpfms5XmiZPljaEiXSwKICAgICAgInRhZ3MiOiBbIuaJk+WNoSJdCiAgICB9LAogICAgInJlZ3VsYXJQYXRoIjogIi8wMi4lRTclQUUlOTclRTYlQjMlOTUvMDEuJUU3JUFFJTk3JUU2JUIzJTk1JUU2JTg5JTkzJUU1JThEJUExLzA0LkRheTA0LSVFOSU5MyVCRSVFOCVBMSVBOC5odG1sIiwKICAgICJyZWxhdGl2ZVBhdGgiOiAiMDIu566X5rOVLzAxLueul+azleaJk+WNoS8wNC5EYXkwNC3pk77ooagubWQiLAogICAgImtleSI6ICJ2LTcyZjA1ZDA4IiwKICAgICJwYXRoIjogIi9wYWdlcy8xMTVhZjcvIiwKICAgICJoZWFkZXJzIjogW3sKICAgICAgImxldmVsIjogMiwKICAgICAgInRpdGxlIjogIjI0LiDkuKTkuKTkuqTmjaLpk77ooajkuK3nmoToioLngrkiLAogICAgICAic2x1ZyI6ICJfMjQt5Lik5Lik5Lqk5o2i6ZO+6KGo5Lit55qE6IqC54K5IiwKICAgICAgIm5vcm1hbGl6ZWRUaXRsZSI6ICIyNC4g5Lik5Lik5Lqk5o2i6ZO+6KGo5Lit55qE6IqC54K5IiwKICAgICAgImNoYXJJbmRleCI6IDIKICAgIH0sIHsKICAgICAgImxldmVsIjogMywKICAgICAgInRpdGxlIjogIuW9leWJjeaDs+azlSIsCiAgICAgICJzbHVnIjogIuW9leWJjeaDs+azlSIsCiAgICAgICJub3JtYWxpemVkVGl0bGUiOiAi5b2V5YmN5oOz5rOVIiwKICAgICAgImNoYXJJbmRleCI6IDE0MQogICAgfSwgewogICAgICAibGV2ZWwiOiAzLAogICAgICAidGl0bGUiOiAi5b2V5ZCO5oOz5rOVIiwKICAgICAgInNsdWciOiAi5b2V5ZCO5oOz5rOVIiwKICAgICAgIm5vcm1hbGl6ZWRUaXRsZSI6ICLlvZXlkI7mg7Pms5UiLAogICAgICAiY2hhckluZGV4IjogMTg4MwogICAgfSwgewogICAgICAibGV2ZWwiOiAzLAogICAgICAidGl0bGUiOiAi5oC757uTIiwKICAgICAgInNsdWciOiAi5oC757uTIiwKICAgICAgIm5vcm1hbGl6ZWRUaXRsZSI6ICLmgLvnu5MiLAogICAgICAiY2hhckluZGV4IjogOTY1CiAgICB9LCB7CiAgICAgICJsZXZlbCI6IDIsCiAgICAgICJ0aXRsZSI6ICIxOS7liKDpmaTpk77ooajnmoTlgJLmlbDnrKxO5Liq6IqC54K5IiwKICAgICAgInNsdWciOiAiXzE5LeWIoOmZpOmTvuihqOeahOWAkuaVsOesrG7kuKroioLngrkiLAogICAgICAibm9ybWFsaXplZFRpdGxlIjogIjE5LiDliKDpmaTpk77ooajnmoTlgJLmlbDnrKwgbiDkuKroioLngrkiLAogICAgICAiY2hhckluZGV4IjogMTcKICAgIH0sIHsKICAgICAgImxldmVsIjogMywKICAgICAgInRpdGxlIjogIuW9leWJjeaDs+azlSIsCiAgICAgICJzbHVnIjogIuW9leWJjeaDs+azlS0yIiwKICAgICAgIm5vcm1hbGl6ZWRUaXRsZSI6ICLlvZXliY3mg7Pms5UiLAogICAgICAiY2hhckluZGV4IjogMTQxCiAgICB9LCB7CiAgICAgICJsZXZlbCI6IDMsCiAgICAgICJ0aXRsZSI6ICLlvZXlkI7mg7Pms5UiLAogICAgICAic2x1ZyI6ICLlvZXlkI7mg7Pms5UtMiIsCiAgICAgICJub3JtYWxpemVkVGl0bGUiOiAi5b2V5ZCO5oOz5rOVIiwKICAgICAgImNoYXJJbmRleCI6IDE4ODMKICAgIH0sIHsKICAgICAgImxldmVsIjogMywKICAgICAgInRpdGxlIjogIuaAu+e7kyIsCiAgICAgICJzbHVnIjogIuaAu+e7ky0yIiwKICAgICAgIm5vcm1hbGl6ZWRUaXRsZSI6ICLmgLvnu5MiLAogICAgICAiY2hhckluZGV4IjogOTY1CiAgICB9LCB7CiAgICAgICJsZXZlbCI6IDIsCiAgICAgICJ0aXRsZSI6ICLpnaLor5XpopggMDIuMDcuIOmTvuihqOebuOS6pCIsCiAgICAgICJzbHVnIjogIumdouivlemimC0wMi0wNy3pk77ooajnm7jkuqQiLAogICAgICAibm9ybWFsaXplZFRpdGxlIjogIumdouivlemimCAwMi4wNy4g6ZO+6KGo55u45LqkIiwKICAgICAgImNoYXJJbmRleCI6IDM3CiAgICB9LCB7CiAgICAgICJsZXZlbCI6IDMsCiAgICAgICJ0aXRsZSI6ICLlvZXliY3mg7Pms5UiLAogICAgICAic2x1ZyI6ICLlvZXliY3mg7Pms5UtMyIsCiAgICAgICJub3JtYWxpemVkVGl0bGUiOiAi5b2V5YmN5oOz5rOVIiwKICAgICAgImNoYXJJbmRleCI6IDE0MQogICAgfSwgewogICAgICAibGV2ZWwiOiAzLAogICAgICAidGl0bGUiOiAi5b2V5ZCO5oOz5rOVIiwKICAgICAgInNsdWciOiAi5b2V5ZCO5oOz5rOVLTMiLAogICAgICAibm9ybWFsaXplZFRpdGxlIjogIuW9leWQjuaDs+azlSIsCiAgICAgICJjaGFySW5kZXgiOiAxODgzCiAgICB9LCB7CiAgICAgICJsZXZlbCI6IDMsCiAgICAgICJ0aXRsZSI6ICLmgLvnu5MiLAogICAgICAic2x1ZyI6ICLmgLvnu5MtMyIsCiAgICAgICJub3JtYWxpemVkVGl0bGUiOiAi5oC757uTIiwKICAgICAgImNoYXJJbmRleCI6IDk2NQogICAgfSwgewogICAgICAibGV2ZWwiOiAyLAogICAgICAidGl0bGUiOiAiMTQyLueOr+W9oumTvuihqElJIiwKICAgICAgInNsdWciOiAiXzE0Mi3njq/lvaLpk77ooahpaSIsCiAgICAgICJub3JtYWxpemVkVGl0bGUiOiAiMTQyLiDnjq/lvaLpk77ooaggaWkiLAogICAgICAiY2hhckluZGV4IjogNTMKICAgIH0sIHsKICAgICAgImxldmVsIjogMywKICAgICAgInRpdGxlIjogIuW9leWJjeaDs+azlSIsCiAgICAgICJzbHVnIjogIuW9leWJjeaDs+azlS00IiwKICAgICAgIm5vcm1hbGl6ZWRUaXRsZSI6ICLlvZXliY3mg7Pms5UiLAogICAgICAiY2hhckluZGV4IjogMTQxCiAgICB9LCB7CiAgICAgICJsZXZlbCI6IDMsCiAgICAgICJ0aXRsZSI6ICLlvZXlkI7mg7Pms5UiLAogICAgICAic2x1ZyI6ICLlvZXlkI7mg7Pms5UtNCIsCiAgICAgICJub3JtYWxpemVkVGl0bGUiOiAi5b2V5ZCO5oOz5rOVIiwKICAgICAgImNoYXJJbmRleCI6IDE4ODMKICAgIH0sIHsKICAgICAgImxldmVsIjogMywKICAgICAgInRpdGxlIjogIuaAu+e7kyIsCiAgICAgICJzbHVnIjogIuaAu+e7ky00IiwKICAgICAgIm5vcm1hbGl6ZWRUaXRsZSI6ICLmgLvnu5MiLAogICAgICAiY2hhckluZGV4IjogOTY1CiAgICB9LCB7CiAgICAgICJsZXZlbCI6IDIsCiAgICAgICJ0aXRsZSI6ICLmgLvnu5MiLAogICAgICAic2x1ZyI6ICLmgLvnu5MtNSIsCiAgICAgICJub3JtYWxpemVkVGl0bGUiOiAi5oC757uTIiwKICAgICAgImNoYXJJbmRleCI6IDk2NQogICAgfV0sCiAgICAiZXhjZXJwdCI6ICI8YmxvY2txdW90ZT5cbjxwPjI0LiDkuKTkuKTkuqTmjaLpk77ooajkuK3nmoToioLngrnjgIExOS4g5Yig6Zmk6ZO+6KGo55qE5YCS5pWw56ysIE4g5Liq6IqC54K5IOOAgemdouivlemimCAwMi4wNy4g6ZO+6KGo55u45Lqk44CBMTQyLiDnjq/lvaLpk77ooaggSUk8L3A+XG48L2Jsb2NrcXVvdGU+XG4iLAogICAgImxhc3RVcGRhdGVkIjogIjYvMi8yMDIzLCA2OjM0OjAwIFBNIiwKICAgICJsYXN0VXBkYXRlZFRpbWVzdGFtcCI6IDE2ODU3MDIwNDAwMDAsCiAgICAiaGVhZGVyc1N0ciI6ICIyNC4g5Lik5Lik5Lqk5o2i6ZO+6KGo5Lit55qE6IqC54K5IOW9leWJjeaDs+azlSDlvZXlkI7mg7Pms5Ug5oC757uTIDE5LuWIoOmZpOmTvuihqOeahOWAkuaVsOesrE7kuKroioLngrkg5b2V5YmN5oOz5rOVIOW9leWQjuaDs+azlSDmgLvnu5Mg6Z2i6K+V6aKYIDAyLjA3LiDpk77ooajnm7jkuqQg5b2V5YmN5oOz5rOVIOW9leWQjuaDs+azlSDmgLvnu5MgMTQyLueOr+W9oumTvuihqElJIOW9leWJjeaDs+azlSDlvZXlkI7mg7Pms5Ug5oC757uTIOaAu+e7kyIsCiAgICAiY29udGVudCI6ICI+IDI0LiDkuKTkuKTkuqTmjaLpk77ooajkuK3nmoToioLngrnjgIExOS4g5Yig6Zmk6ZO+6KGo55qE5YCS5pWw56ysIE4g5Liq6IqC54K5IOOAgemdouivlemimCAwMi4wNy4g6ZO+6KGo55u45Lqk44CBMTQyLiDnjq/lvaLpk77ooaggSUlcblxuXG4jIDI0LiDkuKTkuKTkuqTmjaLpk77ooajkuK3nmoToioLngrlcblxuICog6aKY55uu77yaMjQuIOS4pOS4pOS6pOaNoumTvuihqOS4reeahOiKgueCuVxuXG4gKiDorrLop6PvvJrmlofnq6DorrLop6PjgIHop4bpopHorrLop6NcblxuICog6KaB5rGC77ya6Jma5ouf5aS057uT54K5XG5cblxuIyDlvZXliY3mg7Pms5Vcblxu5byA5aeL5pe255qE5oCd6Lev77yaXG5cbnByZSAtPiAxIC0+IDIgLT4gMyAtPiA0XG5cbiAxLiAxIC0+IDNcblxuIDIuIDIgLT4gMVxuXG4gMy4gcHJlIC0+IDJcblxucHJlIC0+IDIgLT4gMSAtPiAzIC0+IDRcblxu5Lul5LiL5Luj56CB5pyq6YCa6L+HICjinYwpXG5cbmNsYXNzIFNvbHV0aW9uIHtcbnB1YmxpYzpcbiAgICBMaXN0Tm9kZSogc3dhcFBhaXJzKExpc3ROb2RlKiBoZWFkKSB7XG5cbiAgICAgICAgLy8g6Jma5ouf5aS06IqC54K5XG4gICAgICAgIExpc3ROb2RlKiBuZXdIZWFkID0gbmV3IExpc3ROb2RlKDApO1xuICAgICAgICBuZXdIZWFkLT5uZXh0ID0gaGVhZDtcblxuICAgICAgICAvLyDlj4zmjIfpkohcbiAgICAgICAgTGlzdE5vZGUqIHByZSA9IG5ld0hlYWQ7XG4gICAgICAgIExpc3ROb2RlKiBjdXIgPSBuZXdIZWFkLT5uZXh0O1xuICAgICAgICBMaXN0Tm9kZSogdG1wID0gY3VyLT5uZXh0O1xuXG4gICAgICAgIHdoaWxlKGN1ci0+bmV4dCl7XG4gICAgXG4gICAgICAgICAgICAvLyAxIC0+IDNcbiAgICAgICAgICAgIGN1ci0+bmV4dCA9IGN1ci0+bmV4dC0+bmV4dDtcbiAgICAgICAgICAgIC8vIDIgLT4gMVxuICAgICAgICAgICAgdG1wLT5uZXh0ID0gY3VyO1xuICAgICAgICAgICAgLy8gcHJlIC0+IDJcbiAgICAgICAgICAgIHByZS0+bmV4dCA9IHRtcDtcblxuICAgICAgICAgICAgcHJlID0gY3VyO1xuICAgICAgICAgICAgdG1wID0gY3VyLT5uZXh0O1xuICAgICAgICAgICAgY3VyID0gdG1wLT5uZXh0O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5ld0hlYWQtPm5leHQ7XG4gICAgfVxufTtcblxuXG4xXG4yXG4zXG40XG41XG42XG43XG44XG45XG4xMFxuMTFcbjEyXG4xM1xuMTRcbjE1XG4xNlxuMTdcbjE4XG4xOVxuMjBcbjIxXG4yMlxuMjNcbjI0XG4yNVxuMjZcbjI3XG4yOFxuMjlcbjMwXG5cblxu57uP6L+H5LiA5q615pe26Ze055qE6LCD6K+V5oC757uT5LqG5Lul5LiL6Zeu6aKY77yaXG5cbiAxLiDlpoLmnpzkuIDlvIDlp4vlsLHkvb/nlKggY3VyIC0+IG5leHQg6ZyA6KaB6ICD6JmR56m655qE5oOF5Ya1XG4gMi4g5b6q546v5pe26KaB5YWI5a6a5YC844CB5ZCO5Y+Y5YC877yM5LiN54S25b6q546v55qE5p2h5Lu25bCx5aSx5pWI5LqGXG5cbuS7peS4i+S7o+eggeW3siBBQyAo4pyU77iPKVxuXG5jbGFzcyBTb2x1dGlvbiB7XG5wdWJsaWM6XG4gICAgTGlzdE5vZGUqIHN3YXBQYWlycyhMaXN0Tm9kZSogaGVhZCkge1xuXG4gICAgICAgIGlmKCFoZWFkKXtyZXR1cm4gaGVhZDt9XG5cbiAgICAgICAgLy8g6Jma5ouf5aS06IqC54K5XG4gICAgICAgIExpc3ROb2RlKiBuZXdIZWFkID0gbmV3IExpc3ROb2RlKDApO1xuICAgICAgICBuZXdIZWFkLT5uZXh0ID0gaGVhZDtcblxuICAgICAgICAvLyDlj4zmjIfpkohcbiAgICAgICAgTGlzdE5vZGUqIHByZSA9IG5ld0hlYWQ7XG4gICAgICAgIExpc3ROb2RlKiBjdXIgPSBuZXdIZWFkLT5uZXh0O1xuICAgICAgICAvLyDpnIDopoHliKTmlq3nqbpcbiAgICAgICAgTGlzdE5vZGUqIHRtcCA9IGN1ci0+bmV4dDtcblxuICAgICAgICAvLyDlvqrnjq/liKTmlq3vvIzlhYjlrprlgLzvvIzlkI7lj5jlgLzvvIzkuI3nhLbml6Dms5XliKTmlq1cbiAgICAgICAgd2hpbGUocHJlLT5uZXh0ICYmIHByZS0+bmV4dC0+bmV4dCl7XG5cbiAgICAgICAgICAgIGN1ciA9IHByZS0+bmV4dDtcbiAgICAgICAgICAgIHRtcCA9IGN1ci0+bmV4dDtcbiAgICBcbiAgICAgICAgICAgIC8vIDEgLT4gM1xuICAgICAgICAgICAgY3VyLT5uZXh0ID0gY3VyLT5uZXh0LT5uZXh0O1xuICAgICAgICAgICAgLy8gMiAtPiAxXG4gICAgICAgICAgICB0bXAtPm5leHQgPSBjdXI7XG4gICAgICAgICAgICAvLyBwcmUgLT4gMlxuICAgICAgICAgICAgcHJlLT5uZXh0ID0gdG1wO1xuXG4gICAgICAgICAgICBwcmUgPSBwcmUtPm5leHQtPm5leHQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbmV3SGVhZC0+bmV4dDtcbiAgICB9XG59O1xuXG5cbjFcbjJcbjNcbjRcbjVcbjZcbjdcbjhcbjlcbjEwXG4xMVxuMTJcbjEzXG4xNFxuMTVcbjE2XG4xN1xuMThcbjE5XG4yMFxuMjFcbjIyXG4yM1xuMjRcbjI1XG4yNlxuMjdcbjI4XG4yOVxuMzBcbjMxXG4zMlxuMzNcbjM0XG4zNVxuXG5cblxuIyDlvZXlkI7mg7Pms5Vcblxu55yL5LqG5Y2h5ZOl55qE5oCd6Lev5ZCO77yM5Y+v5Lul5YaN6L+b6KGM5LyY5YyW77yaXG5cbiAxLiDkuIDlvIDlp4vnmoTotYvlgLzmk43kvZzlj6/ku6XmlL7lhaXlvqrnjq/kuK1cbiAyLiDnu5/kuIDnmoQgcHJlIOaMh+mSiOS9v+eUqOinguaEn+S4iuiIkuacjeW+iOWkmlxuXG5jbGFzcyBTb2x1dGlvbiB7XG5wdWJsaWM6XG4gICAgTGlzdE5vZGUqIHN3YXBQYWlycyhMaXN0Tm9kZSogaGVhZCkge1xuXG4gICAgICAgIC8vIOiZmuaLn+WktOiKgueCuVxuICAgICAgICBMaXN0Tm9kZSAqbmV3SGVhZCA9IG5ldyBMaXN0Tm9kZSgwKTtcbiAgICAgICAgbmV3SGVhZC0+bmV4dCA9IGhlYWQ7XG5cbiAgICAgICAgLy8g5Y+M5oyH6ZKIXG4gICAgICAgIExpc3ROb2RlICpwcmUgPSBuZXdIZWFkO1xuICAgICAgICBMaXN0Tm9kZSAqdG1wMSwqdG1wMjtcblxuICAgICAgICB3aGlsZShwcmUtPm5leHQgJiYgcHJlLT5uZXh0LT5uZXh0KXtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdG1wMSA9IHByZS0+bmV4dDtcbiAgICAgICAgICAgIHRtcDIgPSBwcmUtPm5leHQtPm5leHQtPm5leHQ7XG5cbiAgICAgICAgICAgIHByZS0+bmV4dCA9IHByZS0+bmV4dC0+bmV4dDtcbiAgICAgICAgICAgIHByZS0+bmV4dC0+bmV4dCA9IHRtcDE7XG4gICAgICAgICAgICBwcmUtPm5leHQtPm5leHQtPm5leHQgPSB0bXAyO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBwcmUgPSBwcmUtPm5leHQtPm5leHQ7XG5cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBuZXdIZWFkLT5uZXh0O1xuICAgIH1cbn07XG5cblxuMVxuMlxuM1xuNFxuNVxuNlxuN1xuOFxuOVxuMTBcbjExXG4xMlxuMTNcbjE0XG4xNVxuMTZcbjE3XG4xOFxuMTlcbjIwXG4yMVxuMjJcbjIzXG4yNFxuMjVcbjI2XG4yN1xuMjhcblxuXG5cbiMg5oC757uTXG5cbuWFtuWunuayoeaciemCo+S5iOatu+adv++8jOmHjeWcqOeQhuino+S6pOaNoueahOatpemqpOmhuuW6j1xuXG5cblxuXG4jIDE5LiDliKDpmaTpk77ooajnmoTlgJLmlbDnrKwgTiDkuKroioLngrlcblxuICog6aKY55uu77yaMTkuIOWIoOmZpOmTvuihqOeahOWAkuaVsOesrCBOIOS4quiKgueCuVxuXG4gKiDorrLop6PvvJrmlofnq6DorrLop6PjgIHop4bpopHorrLop6NcblxuICog6KaB5rGC77ya5Y+M5oyH6ZKI55qE5pON5L2c77yI5Yig6Zmk56ysIE4g5Liq6IqC54K577yM6KaB5oyH5ZCRIOesrCBOIOS4quiKgueCueeahOWJjeS4gOS4quiKgueCue+8iVxuXG5cbiMg5b2V5YmN5oOz5rOVXG5cbuWPjOaMh+mSiOmalCBuKzEg5Liq5YWD57Sg5YmN6L+b77yM55u05o6lIEFDICjinJTvuI8pXG5cbmNsYXNzIFNvbHV0aW9uIHtcbnB1YmxpYzpcbiAgICBMaXN0Tm9kZSogcmVtb3ZlTnRoRnJvbUVuZChMaXN0Tm9kZSogaGVhZCwgaW50IG4pIHtcblxuICAgICAgICAvLyDomZrmi5/lpLToioLngrlcbiAgICAgICAgTGlzdE5vZGUgKm5ld0hlYWQgPSBuZXcgTGlzdE5vZGUoMCk7XG4gICAgICAgIG5ld0hlYWQtPm5leHQgPSBoZWFkO1xuICAgICAgICAvLyDlv6vmhaLmjIfpkohcbiAgICAgICAgTGlzdE5vZGUgKnNsb3cgPSBuZXdIZWFkO1xuICAgICAgICBMaXN0Tm9kZSAqZmFzdCA9IG5ld0hlYWQ7XG4gICAgICAgIC8vIOmXtOmalFxuICAgICAgICB3aGlsZShuLS0pe1xuICAgICAgICAgICAgZmFzdCA9IGZhc3QtPm5leHQ7XG4gICAgICAgIH1cbiAgICAgICAgLy8g5ZCM5pe256e75YqoXG4gICAgICAgIHdoaWxlKGZhc3QtPm5leHQpe1xuICAgICAgICAgICAgZmFzdCA9IGZhc3QtPm5leHQ7XG4gICAgICAgICAgICBzbG93ID0gc2xvdy0+bmV4dDtcbiAgICAgICAgfVxuXG4gICAgICAgIHNsb3ctPm5leHQgPSBzbG93LT5uZXh0LT5uZXh0O1xuXG4gICAgICAgIHJldHVybiBuZXdIZWFkLT5uZXh0OyBcbiAgICB9XG59O1xuXG5cbjFcbjJcbjNcbjRcbjVcbjZcbjdcbjhcbjlcbjEwXG4xMVxuMTJcbjEzXG4xNFxuMTVcbjE2XG4xN1xuMThcbjE5XG4yMFxuMjFcbjIyXG4yM1xuMjRcbjI1XG5cbiAqIOaXtumXtOWkjeadguW6pjogTyAobilcbiAqIOepuumXtOWkjeadguW6pjogTyAoMSlcblxuXG4jIOW9leWQjuaDs+azlVxuXG7lkozljaHlk6XmgJ3ot6/kuIDoh7TinIzvuI9cblxuXG4jIOaAu+e7k1xuXG7ml6BcblxuXG4jIOmdouivlemimCAwMi4wNy4g6ZO+6KGo55u45LqkXG5cbiAqIOmimOebru+8mumdouivlemimCAwMi4wNy4g6ZO+6KGo55u45LqkXG5cbiAqIOiusuino++8muaWh+eroOiusuino+OAgeinhumikeiusuino1xuXG4gKiDopoHmsYLvvJrms6jmhI/mlbDlgLznm7jlkIzvvIzkuI3ku6PooajmjIfpkojnm7jlkIxcblxuXG4jIOW9leWJjeaDs+azlVxuXG4gMS4g5YiG5Yir6K6h566X5Ye66ZO+6KGoIEEg5ZKMIEIg55qE6ZW/5bqmXG5cbiAyLiDnp7vliqjplb/pk77ooahcblxuIDMuIOWQjOaXtuenu+WKqFxuXG4gNC4g6L+U5Zue55u45ZCM5oiW56m6XG5cbuS7peS4i+S7o+egge+8jOW3siBBQyAo4pyU77iPKVxuXG5jbGFzcyBTb2x1dGlvbiB7XG5wdWJsaWM6XG4gICAgTGlzdE5vZGUgKmdldEludGVyc2VjdGlvbk5vZGUoTGlzdE5vZGUgKmhlYWRBLCBMaXN0Tm9kZSAqaGVhZEIpIHtcbiAgICAgICAgXG4gICAgICAgIC8vIDEu5YiG5Yir6K6h566X5Ye66ZO+6KGoQeWSjELnmoTplb/luqZcbiAgICAgICAgaW50IHNpemVBID0gMCxzaXplQiA9IDA7XG4gICAgICAgIExpc3ROb2RlICp0bXBBID0gaGVhZEE7XG4gICAgICAgIExpc3ROb2RlICp0bXBCID0gaGVhZEI7XG4gICAgICAgIHdoaWxlKHRtcEEpe1xuICAgICAgICAgICAgdG1wQSA9IHRtcEEtPm5leHQ7XG4gICAgICAgICAgICArK3NpemVBO1xuICAgICAgICB9XG4gICAgICAgIHdoaWxlKHRtcEIpe1xuICAgICAgICAgICAgdG1wQiA9IHRtcEItPm5leHQ7XG4gICAgICAgICAgICArK3NpemVCO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gMi4g56e75Yqo6ZW/6ZO+6KGoXG4gICAgICAgIHRtcEEgPSBoZWFkQTtcbiAgICAgICAgdG1wQiA9IGhlYWRCO1xuXG4gICAgICAgIGlmIChzaXplQSA+IHNpemVCKXtcbiAgICAgICAgICAgIGZvcihpbnQgaSA9IHNpemVBIC0gc2l6ZUI7aSA+IDA7LS1pKXtcbiAgICAgICAgICAgICAgICB0bXBBID0gdG1wQS0+bmV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICBmb3IoaW50IGkgPSBzaXplQiAtIHNpemVBO2kgPiAwOy0taSl7XG4gICAgICAgICAgICAgICAgdG1wQiA9IHRtcEItPm5leHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyAzLiDlkIzml7bnp7vliqhcbiAgICAgICAgd2hpbGUodG1wQiAmJiB0bXBBKXtcbiAgICAgICAgICAgIGlmKHRtcEIgPT0gdG1wQSl7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRtcEE7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRtcEEgPSB0bXBBLT5uZXh0O1xuICAgICAgICAgICAgdG1wQiA9IHRtcEItPm5leHQ7XG4gICAgICAgIH1cblxuICAgICAgICAvLyA0LiDov5Tlm57nqbpcbiAgICAgICAgcmV0dXJuIE5VTEw7XG4gICAgfVxufTtcblxuXG4xXG4yXG4zXG40XG41XG42XG43XG44XG45XG4xMFxuMTFcbjEyXG4xM1xuMTRcbjE1XG4xNlxuMTdcbjE4XG4xOVxuMjBcbjIxXG4yMlxuMjNcbjI0XG4yNVxuMjZcbjI3XG4yOFxuMjlcbjMwXG4zMVxuMzJcbjMzXG4zNFxuMzVcbjM2XG4zN1xuMzhcbjM5XG40MFxuNDFcbjQyXG40M1xuNDRcbjQ1XG5cbiAqIOaXtumXtOWkjeadguW6pjogTyAobilcbiAqIOepuumXtOWkjeadguW6pjogTyAoMSlcblxuXG4jIOW9leWQjuaDs+azlVxuXG7mgJ3ot6/kuI7ljaHlk6XkuIDoh7TvvIzlhpnms5XkuIrlj4LogIPlkI7mnInmlLnov5vnmoTlnLDmlrnvvJpcblxuICog5Zyo5b6q546v5LiK5Y+v5Lul5o6n5Yi25LiA5Liq77yM5Lqk5o2i5Y+m5LiA5LiqXG5cbi8vIOWOn+S7o+eggVxuaWYgKHNpemVBID4gc2l6ZUIpe1xuXHRmb3IoaW50IGkgPSBzaXplQSAtIHNpemVCO2kgPiAwOy0taSl7XG5cdFx0dG1wQSA9IHRtcEEtPm5leHQ7XG5cdH1cbn1lbHNle1xuXHRmb3IoaW50IGkgPSBzaXplQiAtIHNpemVBO2kgPiAwOy0taSl7XG5cdFx0dG1wQiA9IHRtcEItPm5leHQ7XG5cdH1cbn1cblxuXG4xXG4yXG4zXG40XG41XG42XG43XG44XG45XG4xMFxuXG5cbi8vIOaUuei/m+WQjlxuaWYgKHNpemVBIDwgc2l6ZUIpe1xuICAgIHN3YXAoc2l6ZUEsc2l6ZUIpO1xuICAgIHN3YXAodG1wQSx0bXBCKTtcbn1cblxuZm9yKGludCBpID0gc2l6ZUEgLSBzaXplQjtpID4gMDstLWkpe1xuICAgIHRtcEEgPSB0bXBBLT5uZXh0O1xufVxuXG5cbjFcbjJcbjNcbjRcbjVcbjZcbjdcbjhcbjlcblxuXG5cbiMg5oC757uTXG5cbiAqIOW+queOr+eahOWGmeazleWPr+S7peaOp+WItuS4gOS4quS/ruaUueWPpuS4gOS4qlxuXG5cbiMgMTQyLiDnjq/lvaLpk77ooaggSUlcblxuICog6aKY55uu77yaMTQyLiDnjq/lvaLpk77ooaggSUlcblxuICog6K6y6Kej77ya5paH56ug6K6y6Kej44CB6KeG6aKR6K6y6KejXG5cbiAqIOimgeaxgu+8muehruWumueOr+WSjOaJvueOr+WFpeWPo1xuXG5cbiMg5b2V5YmN5oOz5rOVXG5cbiAxLiDlv6vmhaLmjIfpkojmib7liLDnjq9cbiAyLiDmhaLmjIfpkojlm57ljp/kvY3vvIzlkIzml7blkozlv6vmjIfpkojlvoDliY3otbDvvIznm7jpgYfngrnlsLHmmK/lhaXlj6PvvIjkuYvliY3lhpnov4fvvIzorrDlvpfnu5PorrrvvIlcblxu5Lul5LiL5Luj56CB77yM6LaF5pe25LqG77yM5Lyw6K6h5piv5ZOq6YeM5q275b6q546v5LqG77yI4p2M77yJXG5cbmNsYXNzIFNvbHV0aW9uIHtcbnB1YmxpYzpcbiAgICBMaXN0Tm9kZSAqZGV0ZWN0Q3ljbGUoTGlzdE5vZGUgKmhlYWQpIHtcblxuICAgICAgICBpZighaGVhZCl7cmV0dXJuIGhlYWQ7fVxuXG4gICAgICAgIC8vIOiZmuaLn+WktOiKgueCuVxuICAgICAgICBMaXN0Tm9kZSAqbmV3SGVhZCA9IG5ldyBMaXN0Tm9kZSgwKTtcbiAgICAgICAgbmV3SGVhZC0+bmV4dCA9IGhlYWQ7XG4gICAgICAgIC8vIOW/q+aFouaMh+mSiFxuICAgICAgICBMaXN0Tm9kZSAqZmFzdCA9IG5ld0hlYWQ7XG4gICAgICAgIExpc3ROb2RlICpzbG93ID0gbmV3SGVhZDtcbiAgICAgICAgLy8g5om+5Yiw55u46YGH54K5XG4gICAgICAgIHdoaWxlKGZhc3QtPm5leHQgJiYgZmFzdC0+bmV4dC0+bmV4dCl7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIOWFiOi1i+WAvFxuICAgICAgICAgICAgZmFzdCA9IGZhc3QtPm5leHQtPm5leHQ7XG4gICAgICAgICAgICBzbG93ID0gc2xvdy0+bmV4dDtcblxuICAgICAgICAgICAgaWYoZmFzdCA9PSBzbG93KXtcbiAgICAgICAgICAgICAgICAvLyBzbG935b2S5Y6f5L2NXG4gICAgICAgICAgICAgICAgc2xvdyA9IG5ld0hlYWQtPm5leHQ7XG4gICAgICAgICAgICAgICAgLy8g5YWx5ZCM5YmN6L+bXG4gICAgICAgICAgICAgICAgd2hpbGUoZmFzdCAhPSBzbG93KXtcbiAgICAgICAgICAgICAgICAgICAgZmFzdCA9IGZhc3QtPm5leHQ7XG4gICAgICAgICAgICAgICAgICAgIHNsb3cgPSBzbG93LT5uZXh0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gZmFzdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBOVUxMO1xuICAgIH1cbn07XG5cblxuMVxuMlxuM1xuNFxuNVxuNlxuN1xuOFxuOVxuMTBcbjExXG4xMlxuMTNcbjE0XG4xNVxuMTZcbjE3XG4xOFxuMTlcbjIwXG4yMVxuMjJcbjIzXG4yNFxuMjVcbjI2XG4yN1xuMjhcbjI5XG4zMFxuMzFcbjMyXG4zM1xuMzRcblxuXG7mmoLml7bmsqHmnInmib7liLDplJnlnKjlk6rvvIzljrvnnIvnnIvljaHlk6XnmoTorrLop6PjgIJcblxuXG4jIOW9leWQjuaDs+azlVxuXG7nu4/ov4fmr5Tlr7nlj5HnjrDvvIzmgJ3ot6/mmK/kuIDoh7TnmoTvvIzkuI3lkIznmoTlnLDmlrnlnKjomZrmi5/lpLToioLngrnnmoTkvb/nlKjvvIzliKDpmaTomZrmi5/lpLToioLngrnlkI7lsLEgQUMgKOKclO+4jylcblxuLy8g5pS56L+b5ZCOXG5jbGFzcyBTb2x1dGlvbiB7XG5wdWJsaWM6XG4gICAgTGlzdE5vZGUgKmRldGVjdEN5Y2xlKExpc3ROb2RlICpoZWFkKSB7XG5cbiAgICAgICAgaWYoIWhlYWQpe3JldHVybiBoZWFkO31cblxuICAgICAgICAvLyDlv6vmhaLmjIfpkohcbiAgICAgICAgTGlzdE5vZGUgKmZhc3QgPSBoZWFkO1xuICAgICAgICBMaXN0Tm9kZSAqc2xvdyA9IGhlYWQ7XG4gICAgICAgIFxuICAgICAgICAvLyDmib7liLDnm7jpgYfngrlcbiAgICAgICAgd2hpbGUoZmFzdCAmJiBmYXN0LT5uZXh0KXtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8g5YWI6LWL5YC8XG4gICAgICAgICAgICBmYXN0ID0gZmFzdC0+bmV4dC0+bmV4dDtcbiAgICAgICAgICAgIHNsb3cgPSBzbG93LT5uZXh0O1xuXG4gICAgICAgICAgICBpZihzbG93ID09IGZhc3Qpe1xuXG4gICAgICAgICAgICAgICAgZmFzdCA9ICBoZWFkO1xuICAgICAgICAgICAgICAgIGlmKCFmYXN0KXtyZXR1cm4gbnVsbHB0cjt9XG5cbiAgICAgICAgICAgICAgICB3aGlsZShmYXN0ICE9IHNsb3cpe1xuICAgICAgICAgICAgICAgICAgICBmYXN0ID0gZmFzdC0+bmV4dDtcbiAgICAgICAgICAgICAgICAgICAgc2xvdyA9IHNsb3ctPm5leHQ7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhc3Q7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBudWxscHRyO1xuICAgIH1cbn07XG5cblxuMVxuMlxuM1xuNFxuNVxuNlxuN1xuOFxuOVxuMTBcbjExXG4xMlxuMTNcbjE0XG4xNVxuMTZcbjE3XG4xOFxuMTlcbjIwXG4yMVxuMjJcbjIzXG4yNFxuMjVcbjI2XG4yN1xuMjhcbjI5XG4zMFxuMzFcbjMyXG4zM1xuMzRcbjM1XG4zNlxuXG5cblxuIyDmgLvnu5NcblxuICog6Jma5ouf5aS06IqC54K55LiN6IO95Lmx55So77yM5ZOq5Lqb5oOF5Ya15LiL6ZyA6KaB5L2/55So6Jma5ouf5aS06IqC54K55ZGi77yfXG5cblxuIyDmgLvnu5NcblxuIDEuIOiZmuaLn+WktOiKgueCueaYr+WQpuivpeS9v+eUqO+8n1xuIDIuIOWPjOaMh+mSiFxuICAgIDEuIOW/q+aFouaMh+mSiO+8iOS4gOS4quavj+asoemDvei1sOeahOavlOWPpuS4gOS4quW/q++8iVxuICAgIDIuIOa7keWKqOeql+WPoyIsCiAgICAibm9ybWFsaXplZENvbnRlbnQiOiAiPiAyNC4g5Lik5Lik5Lqk5o2i6ZO+6KGo5Lit55qE6IqC54K544CBMTkuIOWIoOmZpOmTvuihqOeahOWAkuaVsOesrCBuIOS4quiKgueCuSDjgIHpnaLor5XpopggMDIuMDcuIOmTvuihqOebuOS6pOOAgTE0Mi4g546v5b2i6ZO+6KGoIGlpXG5cblxuIyAyNC4g5Lik5Lik5Lqk5o2i6ZO+6KGo5Lit55qE6IqC54K5XG5cbiAqIOmimOebru+8mjI0LiDkuKTkuKTkuqTmjaLpk77ooajkuK3nmoToioLngrlcblxuICog6K6y6Kej77ya5paH56ug6K6y6Kej44CB6KeG6aKR6K6y6KejXG5cbiAqIOimgeaxgu+8muiZmuaLn+WktOe7k+eCuVxuXG5cbiMg5b2V5YmN5oOz5rOVXG5cbuW8gOWni+aXtueahOaAnei3r++8mlxuXG5wcmUgLT4gMSAtPiAyIC0+IDMgLT4gNFxuXG4gMS4gMSAtPiAzXG5cbiAyLiAyIC0+IDFcblxuIDMuIHByZSAtPiAyXG5cbnByZSAtPiAyIC0+IDEgLT4gMyAtPiA0XG5cbuS7peS4i+S7o+eggeacqumAmui/hyAo4p2MKVxuXG5jbGFzcyBzb2x1dGlvbiB7XG5wdWJsaWM6XG4gICAgbGlzdG5vZGUqIHN3YXBwYWlycyhsaXN0bm9kZSogaGVhZCkge1xuXG4gICAgICAgIC8vIOiZmuaLn+WktOiKgueCuVxuICAgICAgICBsaXN0bm9kZSogbmV3aGVhZCA9IG5ldyBsaXN0bm9kZSgwKTtcbiAgICAgICAgbmV3aGVhZC0+bmV4dCA9IGhlYWQ7XG5cbiAgICAgICAgLy8g5Y+M5oyH6ZKIXG4gICAgICAgIGxpc3Rub2RlKiBwcmUgPSBuZXdoZWFkO1xuICAgICAgICBsaXN0bm9kZSogY3VyID0gbmV3aGVhZC0+bmV4dDtcbiAgICAgICAgbGlzdG5vZGUqIHRtcCA9IGN1ci0+bmV4dDtcblxuICAgICAgICB3aGlsZShjdXItPm5leHQpe1xuICAgIFxuICAgICAgICAgICAgLy8gMSAtPiAzXG4gICAgICAgICAgICBjdXItPm5leHQgPSBjdXItPm5leHQtPm5leHQ7XG4gICAgICAgICAgICAvLyAyIC0+IDFcbiAgICAgICAgICAgIHRtcC0+bmV4dCA9IGN1cjtcbiAgICAgICAgICAgIC8vIHByZSAtPiAyXG4gICAgICAgICAgICBwcmUtPm5leHQgPSB0bXA7XG5cbiAgICAgICAgICAgIHByZSA9IGN1cjtcbiAgICAgICAgICAgIHRtcCA9IGN1ci0+bmV4dDtcbiAgICAgICAgICAgIGN1ciA9IHRtcC0+bmV4dDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBuZXdoZWFkLT5uZXh0O1xuICAgIH1cbn07XG5cblxuMVxuMlxuM1xuNFxuNVxuNlxuN1xuOFxuOVxuMTBcbjExXG4xMlxuMTNcbjE0XG4xNVxuMTZcbjE3XG4xOFxuMTlcbjIwXG4yMVxuMjJcbjIzXG4yNFxuMjVcbjI2XG4yN1xuMjhcbjI5XG4zMFxuXG5cbue7j+i/h+S4gOauteaXtumXtOeahOiwg+ivleaAu+e7k+S6huS7peS4i+mXrumimO+8mlxuXG4gMS4g5aaC5p6c5LiA5byA5aeL5bCx5L2/55SoIGN1ciAtPiBuZXh0IOmcgOimgeiAg+iZkeepuueahOaDheWGtVxuIDIuIOW+queOr+aXtuimgeWFiOWumuWAvOOAgeWQjuWPmOWAvO+8jOS4jeeEtuW+queOr+eahOadoeS7tuWwseWkseaViOS6hlxuXG7ku6XkuIvku6PnoIHlt7IgYWMgKOKclO+4jylcblxuY2xhc3Mgc29sdXRpb24ge1xucHVibGljOlxuICAgIGxpc3Rub2RlKiBzd2FwcGFpcnMobGlzdG5vZGUqIGhlYWQpIHtcblxuICAgICAgICBpZighaGVhZCl7cmV0dXJuIGhlYWQ7fVxuXG4gICAgICAgIC8vIOiZmuaLn+WktOiKgueCuVxuICAgICAgICBsaXN0bm9kZSogbmV3aGVhZCA9IG5ldyBsaXN0bm9kZSgwKTtcbiAgICAgICAgbmV3aGVhZC0+bmV4dCA9IGhlYWQ7XG5cbiAgICAgICAgLy8g5Y+M5oyH6ZKIXG4gICAgICAgIGxpc3Rub2RlKiBwcmUgPSBuZXdoZWFkO1xuICAgICAgICBsaXN0bm9kZSogY3VyID0gbmV3aGVhZC0+bmV4dDtcbiAgICAgICAgLy8g6ZyA6KaB5Yik5pat56m6XG4gICAgICAgIGxpc3Rub2RlKiB0bXAgPSBjdXItPm5leHQ7XG5cbiAgICAgICAgLy8g5b6q546v5Yik5pat77yM5YWI5a6a5YC877yM5ZCO5Y+Y5YC877yM5LiN54S25peg5rOV5Yik5patXG4gICAgICAgIHdoaWxlKHByZS0+bmV4dCAmJiBwcmUtPm5leHQtPm5leHQpe1xuXG4gICAgICAgICAgICBjdXIgPSBwcmUtPm5leHQ7XG4gICAgICAgICAgICB0bXAgPSBjdXItPm5leHQ7XG4gICAgXG4gICAgICAgICAgICAvLyAxIC0+IDNcbiAgICAgICAgICAgIGN1ci0+bmV4dCA9IGN1ci0+bmV4dC0+bmV4dDtcbiAgICAgICAgICAgIC8vIDIgLT4gMVxuICAgICAgICAgICAgdG1wLT5uZXh0ID0gY3VyO1xuICAgICAgICAgICAgLy8gcHJlIC0+IDJcbiAgICAgICAgICAgIHByZS0+bmV4dCA9IHRtcDtcblxuICAgICAgICAgICAgcHJlID0gcHJlLT5uZXh0LT5uZXh0O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5ld2hlYWQtPm5leHQ7XG4gICAgfVxufTtcblxuXG4xXG4yXG4zXG40XG41XG42XG43XG44XG45XG4xMFxuMTFcbjEyXG4xM1xuMTRcbjE1XG4xNlxuMTdcbjE4XG4xOVxuMjBcbjIxXG4yMlxuMjNcbjI0XG4yNVxuMjZcbjI3XG4yOFxuMjlcbjMwXG4zMVxuMzJcbjMzXG4zNFxuMzVcblxuXG5cbiMg5b2V5ZCO5oOz5rOVXG5cbueci+S6huWNoeWTpeeahOaAnei3r+WQju+8jOWPr+S7peWGjei/m+ihjOS8mOWMlu+8mlxuXG4gMS4g5LiA5byA5aeL55qE6LWL5YC85pON5L2c5Y+v5Lul5pS+5YWl5b6q546v5LitXG4gMi4g57uf5LiA55qEIHByZSDmjIfpkojkvb/nlKjop4LmhJ/kuIroiJLmnI3lvojlpJpcblxuY2xhc3Mgc29sdXRpb24ge1xucHVibGljOlxuICAgIGxpc3Rub2RlKiBzd2FwcGFpcnMobGlzdG5vZGUqIGhlYWQpIHtcblxuICAgICAgICAvLyDomZrmi5/lpLToioLngrlcbiAgICAgICAgbGlzdG5vZGUgKm5ld2hlYWQgPSBuZXcgbGlzdG5vZGUoMCk7XG4gICAgICAgIG5ld2hlYWQtPm5leHQgPSBoZWFkO1xuXG4gICAgICAgIC8vIOWPjOaMh+mSiFxuICAgICAgICBsaXN0bm9kZSAqcHJlID0gbmV3aGVhZDtcbiAgICAgICAgbGlzdG5vZGUgKnRtcDEsKnRtcDI7XG5cbiAgICAgICAgd2hpbGUocHJlLT5uZXh0ICYmIHByZS0+bmV4dC0+bmV4dCl7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRtcDEgPSBwcmUtPm5leHQ7XG4gICAgICAgICAgICB0bXAyID0gcHJlLT5uZXh0LT5uZXh0LT5uZXh0O1xuXG4gICAgICAgICAgICBwcmUtPm5leHQgPSBwcmUtPm5leHQtPm5leHQ7XG4gICAgICAgICAgICBwcmUtPm5leHQtPm5leHQgPSB0bXAxO1xuICAgICAgICAgICAgcHJlLT5uZXh0LT5uZXh0LT5uZXh0ID0gdG1wMjtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgcHJlID0gcHJlLT5uZXh0LT5uZXh0O1xuXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbmV3aGVhZC0+bmV4dDtcbiAgICB9XG59O1xuXG5cbjFcbjJcbjNcbjRcbjVcbjZcbjdcbjhcbjlcbjEwXG4xMVxuMTJcbjEzXG4xNFxuMTVcbjE2XG4xN1xuMThcbjE5XG4yMFxuMjFcbjIyXG4yM1xuMjRcbjI1XG4yNlxuMjdcbjI4XG5cblxuXG4jIOaAu+e7k1xuXG7lhbblrp7msqHmnInpgqPkuYjmrbvmnb/vvIzph43lnKjnkIbop6PkuqTmjaLnmoTmraXpqqTpobrluo9cblxuXG5cblxuIyAxOS4g5Yig6Zmk6ZO+6KGo55qE5YCS5pWw56ysIG4g5Liq6IqC54K5XG5cbiAqIOmimOebru+8mjE5LiDliKDpmaTpk77ooajnmoTlgJLmlbDnrKwgbiDkuKroioLngrlcblxuICog6K6y6Kej77ya5paH56ug6K6y6Kej44CB6KeG6aKR6K6y6KejXG5cbiAqIOimgeaxgu+8muWPjOaMh+mSiOeahOaTjeS9nO+8iOWIoOmZpOesrCBuIOS4quiKgueCue+8jOimgeaMh+WQkSDnrKwgbiDkuKroioLngrnnmoTliY3kuIDkuKroioLngrnvvIlcblxuXG4jIOW9leWJjeaDs+azlVxuXG7lj4zmjIfpkojpmpQgbisxIOS4quWFg+e0oOWJjei/m++8jOebtOaOpSBhYyAo4pyU77iPKVxuXG5jbGFzcyBzb2x1dGlvbiB7XG5wdWJsaWM6XG4gICAgbGlzdG5vZGUqIHJlbW92ZW50aGZyb21lbmQobGlzdG5vZGUqIGhlYWQsIGludCBuKSB7XG5cbiAgICAgICAgLy8g6Jma5ouf5aS06IqC54K5XG4gICAgICAgIGxpc3Rub2RlICpuZXdoZWFkID0gbmV3IGxpc3Rub2RlKDApO1xuICAgICAgICBuZXdoZWFkLT5uZXh0ID0gaGVhZDtcbiAgICAgICAgLy8g5b+r5oWi5oyH6ZKIXG4gICAgICAgIGxpc3Rub2RlICpzbG93ID0gbmV3aGVhZDtcbiAgICAgICAgbGlzdG5vZGUgKmZhc3QgPSBuZXdoZWFkO1xuICAgICAgICAvLyDpl7TpmpRcbiAgICAgICAgd2hpbGUobi0tKXtcbiAgICAgICAgICAgIGZhc3QgPSBmYXN0LT5uZXh0O1xuICAgICAgICB9XG4gICAgICAgIC8vIOWQjOaXtuenu+WKqFxuICAgICAgICB3aGlsZShmYXN0LT5uZXh0KXtcbiAgICAgICAgICAgIGZhc3QgPSBmYXN0LT5uZXh0O1xuICAgICAgICAgICAgc2xvdyA9IHNsb3ctPm5leHQ7XG4gICAgICAgIH1cblxuICAgICAgICBzbG93LT5uZXh0ID0gc2xvdy0+bmV4dC0+bmV4dDtcblxuICAgICAgICByZXR1cm4gbmV3aGVhZC0+bmV4dDsgXG4gICAgfVxufTtcblxuXG4xXG4yXG4zXG40XG41XG42XG43XG44XG45XG4xMFxuMTFcbjEyXG4xM1xuMTRcbjE1XG4xNlxuMTdcbjE4XG4xOVxuMjBcbjIxXG4yMlxuMjNcbjI0XG4yNVxuXG4gKiDml7bpl7TlpI3mnYLluqY6IG8gKG4pXG4gKiDnqbrpl7TlpI3mnYLluqY6IG8gKDEpXG5cblxuIyDlvZXlkI7mg7Pms5Vcblxu5ZKM5Y2h5ZOl5oCd6Lev5LiA6Ie04pyM77iPXG5cblxuIyDmgLvnu5Ncblxu5pegXG5cblxuIyDpnaLor5XpopggMDIuMDcuIOmTvuihqOebuOS6pFxuXG4gKiDpopjnm67vvJrpnaLor5XpopggMDIuMDcuIOmTvuihqOebuOS6pFxuXG4gKiDorrLop6PvvJrmlofnq6DorrLop6PjgIHop4bpopHorrLop6NcblxuICog6KaB5rGC77ya5rOo5oSP5pWw5YC855u45ZCM77yM5LiN5Luj6KGo5oyH6ZKI55u45ZCMXG5cblxuIyDlvZXliY3mg7Pms5VcblxuIDEuIOWIhuWIq+iuoeeul+WHuumTvuihqCBhIOWSjCBiIOeahOmVv+W6plxuXG4gMi4g56e75Yqo6ZW/6ZO+6KGoXG5cbiAzLiDlkIzml7bnp7vliqhcblxuIDQuIOi/lOWbnuebuOWQjOaIluepulxuXG7ku6XkuIvku6PnoIHvvIzlt7IgYWMgKOKclO+4jylcblxuY2xhc3Mgc29sdXRpb24ge1xucHVibGljOlxuICAgIGxpc3Rub2RlICpnZXRpbnRlcnNlY3Rpb25ub2RlKGxpc3Rub2RlICpoZWFkYSwgbGlzdG5vZGUgKmhlYWRiKSB7XG4gICAgICAgIFxuICAgICAgICAvLyAxLuWIhuWIq+iuoeeul+WHuumTvuihqGHlkoxi55qE6ZW/5bqmXG4gICAgICAgIGludCBzaXplYSA9IDAsc2l6ZWIgPSAwO1xuICAgICAgICBsaXN0bm9kZSAqdG1wYSA9IGhlYWRhO1xuICAgICAgICBsaXN0bm9kZSAqdG1wYiA9IGhlYWRiO1xuICAgICAgICB3aGlsZSh0bXBhKXtcbiAgICAgICAgICAgIHRtcGEgPSB0bXBhLT5uZXh0O1xuICAgICAgICAgICAgKytzaXplYTtcbiAgICAgICAgfVxuICAgICAgICB3aGlsZSh0bXBiKXtcbiAgICAgICAgICAgIHRtcGIgPSB0bXBiLT5uZXh0O1xuICAgICAgICAgICAgKytzaXplYjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIDIuIOenu+WKqOmVv+mTvuihqFxuICAgICAgICB0bXBhID0gaGVhZGE7XG4gICAgICAgIHRtcGIgPSBoZWFkYjtcblxuICAgICAgICBpZiAoc2l6ZWEgPiBzaXplYil7XG4gICAgICAgICAgICBmb3IoaW50IGkgPSBzaXplYSAtIHNpemViO2kgPiAwOy0taSl7XG4gICAgICAgICAgICAgICAgdG1wYSA9IHRtcGEtPm5leHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1lbHNle1xuICAgICAgICAgICAgZm9yKGludCBpID0gc2l6ZWIgLSBzaXplYTtpID4gMDstLWkpe1xuICAgICAgICAgICAgICAgIHRtcGIgPSB0bXBiLT5uZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gMy4g5ZCM5pe256e75YqoXG4gICAgICAgIHdoaWxlKHRtcGIgJiYgdG1wYSl7XG4gICAgICAgICAgICBpZih0bXBiID09IHRtcGEpe1xuICAgICAgICAgICAgICAgIHJldHVybiB0bXBhO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0bXBhID0gdG1wYS0+bmV4dDtcbiAgICAgICAgICAgIHRtcGIgPSB0bXBiLT5uZXh0O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gNC4g6L+U5Zue56m6XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbn07XG5cblxuMVxuMlxuM1xuNFxuNVxuNlxuN1xuOFxuOVxuMTBcbjExXG4xMlxuMTNcbjE0XG4xNVxuMTZcbjE3XG4xOFxuMTlcbjIwXG4yMVxuMjJcbjIzXG4yNFxuMjVcbjI2XG4yN1xuMjhcbjI5XG4zMFxuMzFcbjMyXG4zM1xuMzRcbjM1XG4zNlxuMzdcbjM4XG4zOVxuNDBcbjQxXG40MlxuNDNcbjQ0XG40NVxuXG4gKiDml7bpl7TlpI3mnYLluqY6IG8gKG4pXG4gKiDnqbrpl7TlpI3mnYLluqY6IG8gKDEpXG5cblxuIyDlvZXlkI7mg7Pms5Vcblxu5oCd6Lev5LiO5Y2h5ZOl5LiA6Ie077yM5YaZ5rOV5LiK5Y+C6ICD5ZCO5pyJ5pS56L+b55qE5Zyw5pa577yaXG5cbiAqIOWcqOW+queOr+S4iuWPr+S7peaOp+WItuS4gOS4qu+8jOS6pOaNouWPpuS4gOS4qlxuXG4vLyDljp/ku6PnoIFcbmlmIChzaXplYSA+IHNpemViKXtcblx0Zm9yKGludCBpID0gc2l6ZWEgLSBzaXplYjtpID4gMDstLWkpe1xuXHRcdHRtcGEgPSB0bXBhLT5uZXh0O1xuXHR9XG59ZWxzZXtcblx0Zm9yKGludCBpID0gc2l6ZWIgLSBzaXplYTtpID4gMDstLWkpe1xuXHRcdHRtcGIgPSB0bXBiLT5uZXh0O1xuXHR9XG59XG5cblxuMVxuMlxuM1xuNFxuNVxuNlxuN1xuOFxuOVxuMTBcblxuXG4vLyDmlLnov5vlkI5cbmlmIChzaXplYSA8IHNpemViKXtcbiAgICBzd2FwKHNpemVhLHNpemViKTtcbiAgICBzd2FwKHRtcGEsdG1wYik7XG59XG5cbmZvcihpbnQgaSA9IHNpemVhIC0gc2l6ZWI7aSA+IDA7LS1pKXtcbiAgICB0bXBhID0gdG1wYS0+bmV4dDtcbn1cblxuXG4xXG4yXG4zXG40XG41XG42XG43XG44XG45XG5cblxuXG4jIOaAu+e7k1xuXG4gKiDlvqrnjq/nmoTlhpnms5Xlj6/ku6XmjqfliLbkuIDkuKrkv67mlLnlj6bkuIDkuKpcblxuXG4jIDE0Mi4g546v5b2i6ZO+6KGoIGlpXG5cbiAqIOmimOebru+8mjE0Mi4g546v5b2i6ZO+6KGoIGlpXG5cbiAqIOiusuino++8muaWh+eroOiusuino+OAgeinhumikeiusuino1xuXG4gKiDopoHmsYLvvJrnoa7lrprnjq/lkozmib7njq/lhaXlj6NcblxuXG4jIOW9leWJjeaDs+azlVxuXG4gMS4g5b+r5oWi5oyH6ZKI5om+5Yiw546vXG4gMi4g5oWi5oyH6ZKI5Zue5Y6f5L2N77yM5ZCM5pe25ZKM5b+r5oyH6ZKI5b6A5YmN6LWw77yM55u46YGH54K55bCx5piv5YWl5Y+j77yI5LmL5YmN5YaZ6L+H77yM6K6w5b6X57uT6K6677yJXG5cbuS7peS4i+S7o+egge+8jOi2heaXtuS6hu+8jOS8sOiuoeaYr+WTqumHjOatu+W+queOr+S6hu+8iOKdjO+8iVxuXG5jbGFzcyBzb2x1dGlvbiB7XG5wdWJsaWM6XG4gICAgbGlzdG5vZGUgKmRldGVjdGN5Y2xlKGxpc3Rub2RlICpoZWFkKSB7XG5cbiAgICAgICAgaWYoIWhlYWQpe3JldHVybiBoZWFkO31cblxuICAgICAgICAvLyDomZrmi5/lpLToioLngrlcbiAgICAgICAgbGlzdG5vZGUgKm5ld2hlYWQgPSBuZXcgbGlzdG5vZGUoMCk7XG4gICAgICAgIG5ld2hlYWQtPm5leHQgPSBoZWFkO1xuICAgICAgICAvLyDlv6vmhaLmjIfpkohcbiAgICAgICAgbGlzdG5vZGUgKmZhc3QgPSBuZXdoZWFkO1xuICAgICAgICBsaXN0bm9kZSAqc2xvdyA9IG5ld2hlYWQ7XG4gICAgICAgIC8vIOaJvuWIsOebuOmBh+eCuVxuICAgICAgICB3aGlsZShmYXN0LT5uZXh0ICYmIGZhc3QtPm5leHQtPm5leHQpe1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyDlhYjotYvlgLxcbiAgICAgICAgICAgIGZhc3QgPSBmYXN0LT5uZXh0LT5uZXh0O1xuICAgICAgICAgICAgc2xvdyA9IHNsb3ctPm5leHQ7XG5cbiAgICAgICAgICAgIGlmKGZhc3QgPT0gc2xvdyl7XG4gICAgICAgICAgICAgICAgLy8gc2xvd+W9kuWOn+S9jVxuICAgICAgICAgICAgICAgIHNsb3cgPSBuZXdoZWFkLT5uZXh0O1xuICAgICAgICAgICAgICAgIC8vIOWFseWQjOWJjei/m1xuICAgICAgICAgICAgICAgIHdoaWxlKGZhc3QgIT0gc2xvdyl7XG4gICAgICAgICAgICAgICAgICAgIGZhc3QgPSBmYXN0LT5uZXh0O1xuICAgICAgICAgICAgICAgICAgICBzbG93ID0gc2xvdy0+bmV4dDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhc3Q7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG59O1xuXG5cbjFcbjJcbjNcbjRcbjVcbjZcbjdcbjhcbjlcbjEwXG4xMVxuMTJcbjEzXG4xNFxuMTVcbjE2XG4xN1xuMThcbjE5XG4yMFxuMjFcbjIyXG4yM1xuMjRcbjI1XG4yNlxuMjdcbjI4XG4yOVxuMzBcbjMxXG4zMlxuMzNcbjM0XG5cblxu5pqC5pe25rKh5pyJ5om+5Yiw6ZSZ5Zyo5ZOq77yM5Y6755yL55yL5Y2h5ZOl55qE6K6y6Kej44CCXG5cblxuIyDlvZXlkI7mg7Pms5Vcblxu57uP6L+H5q+U5a+55Y+R546w77yM5oCd6Lev5piv5LiA6Ie055qE77yM5LiN5ZCM55qE5Zyw5pa55Zyo6Jma5ouf5aS06IqC54K555qE5L2/55So77yM5Yig6Zmk6Jma5ouf5aS06IqC54K55ZCO5bCxIGFjICjinJTvuI8pXG5cbi8vIOaUuei/m+WQjlxuY2xhc3Mgc29sdXRpb24ge1xucHVibGljOlxuICAgIGxpc3Rub2RlICpkZXRlY3RjeWNsZShsaXN0bm9kZSAqaGVhZCkge1xuXG4gICAgICAgIGlmKCFoZWFkKXtyZXR1cm4gaGVhZDt9XG5cbiAgICAgICAgLy8g5b+r5oWi5oyH6ZKIXG4gICAgICAgIGxpc3Rub2RlICpmYXN0ID0gaGVhZDtcbiAgICAgICAgbGlzdG5vZGUgKnNsb3cgPSBoZWFkO1xuICAgICAgICBcbiAgICAgICAgLy8g5om+5Yiw55u46YGH54K5XG4gICAgICAgIHdoaWxlKGZhc3QgJiYgZmFzdC0+bmV4dCl7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIOWFiOi1i+WAvFxuICAgICAgICAgICAgZmFzdCA9IGZhc3QtPm5leHQtPm5leHQ7XG4gICAgICAgICAgICBzbG93ID0gc2xvdy0+bmV4dDtcblxuICAgICAgICAgICAgaWYoc2xvdyA9PSBmYXN0KXtcblxuICAgICAgICAgICAgICAgIGZhc3QgPSAgaGVhZDtcbiAgICAgICAgICAgICAgICBpZighZmFzdCl7cmV0dXJuIG51bGxwdHI7fVxuXG4gICAgICAgICAgICAgICAgd2hpbGUoZmFzdCAhPSBzbG93KXtcbiAgICAgICAgICAgICAgICAgICAgZmFzdCA9IGZhc3QtPm5leHQ7XG4gICAgICAgICAgICAgICAgICAgIHNsb3cgPSBzbG93LT5uZXh0O1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiBmYXN0O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbnVsbHB0cjtcbiAgICB9XG59O1xuXG5cbjFcbjJcbjNcbjRcbjVcbjZcbjdcbjhcbjlcbjEwXG4xMVxuMTJcbjEzXG4xNFxuMTVcbjE2XG4xN1xuMThcbjE5XG4yMFxuMjFcbjIyXG4yM1xuMjRcbjI1XG4yNlxuMjdcbjI4XG4yOVxuMzBcbjMxXG4zMlxuMzNcbjM0XG4zNVxuMzZcblxuXG5cbiMg5oC757uTXG5cbiAqIOiZmuaLn+WktOiKgueCueS4jeiDveS5seeUqO+8jOWTquS6m+aDheWGteS4i+mcgOimgeS9v+eUqOiZmuaLn+WktOiKgueCueWRou+8n1xuXG5cbiMg5oC757uTXG5cbiAxLiDomZrmi5/lpLToioLngrnmmK/lkKbor6Xkvb/nlKjvvJ9cbiAyLiDlj4zmjIfpkohcbiAgICAxLiDlv6vmhaLmjIfpkojvvIjkuIDkuKrmr4/mrKHpg73otbDnmoTmr5Tlj6bkuIDkuKrlv6vvvIlcbiAgICAyLiDmu5Hliqjnqpflj6MiLAogICAgImNoYXJzZXRzIjogewogICAgICAiY2prIjogdHJ1ZQogICAgfQogIH0sIHsKICAgICJ0aXRsZSI6ICJEYXkwNy3lrZfnrKbkuLIiLAogICAgImZyb250bWF0dGVyIjogewogICAgICAidGl0bGUiOiAiRGF5MDct5a2X56ym5LiyIiwKICAgICAgImRhdGUiOiAiMjAyMy0wNS0zMVQxMDowNDoyOS4wMDBaIiwKICAgICAgInBlcm1hbGluayI6ICIvcGFnZXMvMjZlYWYwLyIsCiAgICAgICJjYXRlZ29yaWVzIjogWyLnrpfms5UiLCAi566X5rOV5omT5Y2hIl0sCiAgICAgICJ0YWdzIjogWyLmiZPljaEiXQogICAgfSwKICAgICJyZWd1bGFyUGF0aCI6ICIvMDIuJUU3JUFFJTk3JUU2JUIzJTk1LzAxLiVFNyVBRSU5NyVFNiVCMyU5NSVFNiU4OSU5MyVFNSU4RCVBMS8wNy5EYXkwNy0lRTUlQUQlOTclRTclQUMlQTYlRTQlQjglQjIuaHRtbCIsCiAgICAicmVsYXRpdmVQYXRoIjogIjAyLueul+azlS8wMS7nrpfms5XmiZPljaEvMDcuRGF5MDct5a2X56ym5LiyLm1kIiwKICAgICJrZXkiOiAidi0zYmIwNzVmMCIsCiAgICAicGF0aCI6ICIvcGFnZXMvMjZlYWYwLyIsCiAgICAiaGVhZGVycyI6IFt7CiAgICAgICJsZXZlbCI6IDIsCiAgICAgICJ0aXRsZSI6ICIzNDQu5Y+N6L2s5a2X56ym5LiyIiwKICAgICAgInNsdWciOiAiXzM0NC3lj43ovazlrZfnrKbkuLIiLAogICAgICAibm9ybWFsaXplZFRpdGxlIjogIjM0NC4g5Y+N6L2s5a2X56ym5LiyIiwKICAgICAgImNoYXJJbmRleCI6IDIKICAgIH0sIHsKICAgICAgImxldmVsIjogMywKICAgICAgInRpdGxlIjogIuW9leWJjeaDs+azlSIsCiAgICAgICJzbHVnIjogIuW9leWJjeaDs+azlSIsCiAgICAgICJub3JtYWxpemVkVGl0bGUiOiAi5b2V5YmN5oOz5rOVIiwKICAgICAgImNoYXJJbmRleCI6IDE2NgogICAgfSwgewogICAgICAibGV2ZWwiOiAzLAogICAgICAidGl0bGUiOiAi5b2V5ZCO5oOz5rOVIiwKICAgICAgInNsdWciOiAi5b2V5ZCO5oOz5rOVIiwKICAgICAgIm5vcm1hbGl6ZWRUaXRsZSI6ICLlvZXlkI7mg7Pms5UiLAogICAgICAiY2hhckluZGV4IjogNTMzCiAgICB9LCB7CiAgICAgICJsZXZlbCI6IDIsCiAgICAgICJ0aXRsZSI6ICI1NDEuIOWPjei9rOWtl+espuS4sklJIiwKICAgICAgInNsdWciOiAiXzU0MS3lj43ovazlrZfnrKbkuLJpaSIsCiAgICAgICJub3JtYWxpemVkVGl0bGUiOiAiNTQxLiDlj43ovazlrZfnrKbkuLIgaWkiLAogICAgICAiY2hhckluZGV4IjogMTMKICAgIH0sIHsKICAgICAgImxldmVsIjogMywKICAgICAgInRpdGxlIjogIuW9leWJjeaDs+azlSIsCiAgICAgICJzbHVnIjogIuW9leWJjeaDs+azlS0yIiwKICAgICAgIm5vcm1hbGl6ZWRUaXRsZSI6ICLlvZXliY3mg7Pms5UiLAogICAgICAiY2hhckluZGV4IjogMTY2CiAgICB9LCB7CiAgICAgICJsZXZlbCI6IDMsCiAgICAgICJ0aXRsZSI6ICLlvZXlkI7mg7Pms5UiLAogICAgICAic2x1ZyI6ICLlvZXlkI7mg7Pms5UtMiIsCiAgICAgICJub3JtYWxpemVkVGl0bGUiOiAi5b2V5ZCO5oOz5rOVIiwKICAgICAgImNoYXJJbmRleCI6IDUzMwogICAgfSwgewogICAgICAibGV2ZWwiOiAzLAogICAgICAidGl0bGUiOiAi5oC757uTIiwKICAgICAgInNsdWciOiAi5oC757uTIiwKICAgICAgIm5vcm1hbGl6ZWRUaXRsZSI6ICLmgLvnu5MiLAogICAgICAiY2hhckluZGV4IjogMjM1OQogICAgfSwgewogICAgICAibGV2ZWwiOiAyLAogICAgICAidGl0bGUiOiAi5YmR5oyHT2ZmZXIgMDUu5pu/5o2i56m65qC8IiwKICAgICAgInNsdWciOiAi5YmR5oyHb2ZmZXItMDUt5pu/5o2i56m65qC8IiwKICAgICAgIm5vcm1hbGl6ZWRUaXRsZSI6ICLliZHmjIcgb2ZmZXIgMDUuIOabv+aNouepuuagvCIsCiAgICAgICJjaGFySW5kZXgiOiAyNwogICAgfSwgewogICAgICAibGV2ZWwiOiAzLAogICAgICAidGl0bGUiOiAi5b2V5YmN5oOz5rOVIiwKICAgICAgInNsdWciOiAi5b2V5YmN5oOz5rOVLTMiLAogICAgICAibm9ybWFsaXplZFRpdGxlIjogIuW9leWJjeaDs+azlSIsCiAgICAgICJjaGFySW5kZXgiOiAxNjYKICAgIH0sIHsKICAgICAgImxldmVsIjogMywKICAgICAgInRpdGxlIjogIuW9leWQjuaDs+azlSIsCiAgICAgICJzbHVnIjogIuW9leWQjuaDs+azlS0zIiwKICAgICAgIm5vcm1hbGl6ZWRUaXRsZSI6ICLlvZXlkI7mg7Pms5UiLAogICAgICAiY2hhckluZGV4IjogNTMzCiAgICB9LCB7CiAgICAgICJsZXZlbCI6IDIsCiAgICAgICJ0aXRsZSI6ICIxNTEu57+76L2s5a2X56ym5Liy6YeM55qE5Y2V6K+NIiwKICAgICAgInNsdWciOiAiXzE1MS3nv7vovazlrZfnrKbkuLLph4znmoTljZXor40iLAogICAgICAibm9ybWFsaXplZFRpdGxlIjogIjE1MS4g57+76L2s5a2X56ym5Liy6YeM55qE5Y2V6K+NIiwKICAgICAgImNoYXJJbmRleCI6IDQ2CiAgICB9LCB7CiAgICAgICJsZXZlbCI6IDMsCiAgICAgICJ0aXRsZSI6ICLlvZXliY3mg7Pms5UiLAogICAgICAic2x1ZyI6ICLlvZXliY3mg7Pms5UtNCIsCiAgICAgICJub3JtYWxpemVkVGl0bGUiOiAi5b2V5YmN5oOz5rOVIiwKICAgICAgImNoYXJJbmRleCI6IDE2NgogICAgfSwgewogICAgICAibGV2ZWwiOiAzLAogICAgICAidGl0bGUiOiAi5b2V5ZCO5oOz5rOVIiwKICAgICAgInNsdWciOiAi5b2V5ZCO5oOz5rOVLTQiLAogICAgICAibm9ybWFsaXplZFRpdGxlIjogIuW9leWQjuaDs+azlSIsCiAgICAgICJjaGFySW5kZXgiOiA1MzMKICAgIH0sIHsKICAgICAgImxldmVsIjogMywKICAgICAgInRpdGxlIjogIuaAu+e7kyIsCiAgICAgICJzbHVnIjogIuaAu+e7ky0yIiwKICAgICAgIm5vcm1hbGl6ZWRUaXRsZSI6ICLmgLvnu5MiLAogICAgICAiY2hhckluZGV4IjogMjM1OQogICAgfSwgewogICAgICAibGV2ZWwiOiAyLAogICAgICAidGl0bGUiOiAi5YmR5oyHT2ZmZXI1OC1JSS7lt6bml4vovazlrZfnrKbkuLIiLAogICAgICAic2x1ZyI6ICLliZHmjIdvZmZlcjU4LWlpLeW3puaXi+i9rOWtl+espuS4siIsCiAgICAgICJub3JtYWxpemVkVGl0bGUiOiAi5YmR5oyHIG9mZmVyNTgtaWkuIOW3puaXi+i9rOWtl+espuS4siIsCiAgICAgICJjaGFySW5kZXgiOiA2MgogICAgfSwgewogICAgICAibGV2ZWwiOiAzLAogICAgICAidGl0bGUiOiAi5b2V5YmN5oOz5rOVIiwKICAgICAgInNsdWciOiAi5b2V5YmN5oOz5rOVLTUiLAogICAgICAibm9ybWFsaXplZFRpdGxlIjogIuW9leWJjeaDs+azlSIsCiAgICAgICJjaGFySW5kZXgiOiAxNjYKICAgIH0sIHsKICAgICAgImxldmVsIjogMywKICAgICAgInRpdGxlIjogIuW9leWQjuaDs+azlSIsCiAgICAgICJzbHVnIjogIuW9leWQjuaDs+azlS01IiwKICAgICAgIm5vcm1hbGl6ZWRUaXRsZSI6ICLlvZXlkI7mg7Pms5UiLAogICAgICAiY2hhckluZGV4IjogNTMzCiAgICB9LCB7CiAgICAgICJsZXZlbCI6IDIsCiAgICAgICJ0aXRsZSI6ICLmgLvnu5MiLAogICAgICAic2x1ZyI6ICLmgLvnu5MtMyIsCiAgICAgICJub3JtYWxpemVkVGl0bGUiOiAi5oC757uTIiwKICAgICAgImNoYXJJbmRleCI6IDIzNTkKICAgIH1dLAogICAgImV4Y2VycHQiOiAiPGJsb2NrcXVvdGU+XG48cD4zNDQuIOWPjei9rOWtl+espuS4suOAgTU0MS4g5Y+N6L2s5a2X56ym5LiyIElJ44CB5YmR5oyHIE9mZmVyIDA1LiDmm7/mjaLnqbrmoLzjgIEgMTUxLiDnv7vovazlrZfnrKbkuLLph4znmoTljZXor43jgIEg5YmR5oyHIE9mZmVyNTgtSUkuIOW3puaXi+i9rOWtl+espuS4sjwvcD5cbjwvYmxvY2txdW90ZT5cbiIsCiAgICAibGFzdFVwZGF0ZWQiOiAiNi8yLzIwMjMsIDY6MzQ6MDAgUE0iLAogICAgImxhc3RVcGRhdGVkVGltZXN0YW1wIjogMTY4NTcwMjA0MDAwMCwKICAgICJoZWFkZXJzU3RyIjogIjM0NC7lj43ovazlrZfnrKbkuLIg5b2V5YmN5oOz5rOVIOW9leWQjuaDs+azlSA1NDEuIOWPjei9rOWtl+espuS4sklJIOW9leWJjeaDs+azlSDlvZXlkI7mg7Pms5Ug5oC757uTIOWJkeaMh09mZmVyIDA1Luabv+aNouepuuagvCDlvZXliY3mg7Pms5Ug5b2V5ZCO5oOz5rOVIDE1MS7nv7vovazlrZfnrKbkuLLph4znmoTljZXor40g5b2V5YmN5oOz5rOVIOW9leWQjuaDs+azlSDmgLvnu5Mg5YmR5oyHT2ZmZXI1OC1JSS7lt6bml4vovazlrZfnrKbkuLIg5b2V5YmN5oOz5rOVIOW9leWQjuaDs+azlSDmgLvnu5MiLAogICAgImNvbnRlbnQiOiAiPiAzNDQuIOWPjei9rOWtl+espuS4suOAgTU0MS4g5Y+N6L2s5a2X56ym5LiyIElJ44CB5YmR5oyHIE9mZmVyIDA1LiDmm7/mjaLnqbrmoLzjgIEgMTUxLiDnv7vovazlrZfnrKbkuLLph4znmoTljZXor43jgIEg5YmR5oyHIE9mZmVyNTgtSUkuIOW3puaXi+i9rOWtl+espuS4slxuXG5cbiMgMzQ0LiDlj43ovazlrZfnrKbkuLJcblxuICog6aKY55uu77yaMzQ0LiDlj43ovazlrZfnrKbkuLJcblxuICog6K6y6Kej77ya5paH56ug6K6y6Kej44CB6KeG6aKR6K6y6KejXG5cbiAqIOimgeaxgu+8mueQhuino+S7gOS5iOaXtuWAmeeUqOW6k+WHveaVsO+8jOS7gOS5iOaXtuWAmeS4jeeUqOW6k+WHveaVsFxuXG5cbiMg5b2V5YmN5oOz5rOVXG5cbuS6pOaNoummluacq+WFg+e0oO+8jOazqOaEj+aVsOe7hOi2iueVjO+8jOW3siBBQyAo4pyU77iPKVxuXG5jbGFzcyBTb2x1dGlvbiB7XG5wdWJsaWM6XG4gICAgdm9pZCByZXZlcnNlU3RyaW5nKHZlY3RvcjxjaGFyPiYgcykge1xuXG4gICAgICAgIGludCB0bXA7XG4gICAgICAgIGludCBsZW4gPSBzLnNpemUoKSAtIDE7XG5cbiAgICAgICAgLy8g5Lqk5o2iXG4gICAgICAgIGZvcihpbnQgaSA9IDA7IGkgPD0gbGVuLzI7ICsraSl7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRtcCA9IHNbaV07XG4gICAgICAgICAgICBzW2ldID0gc1tsZW4taV07XG4gICAgICAgICAgICBzW2xlbi1pXSA9IHRtcDtcblxuICAgICAgICB9XG4gICAgfVxufTtcblxuXG4xXG4yXG4zXG40XG41XG42XG43XG44XG45XG4xMFxuMTFcbjEyXG4xM1xuMTRcbjE1XG4xNlxuMTdcblxuXG5cbiMg5b2V5ZCO5oOz5rOVXG5cbuaAnei3r+S4gOiHtO+8jOWkmuS6huS4pOenjeS6pOaNoueahOaWueazleWPr+S7peWtpuS5oO+8mlxuXG4gMS4gc3dhcCDlh73mlbBcbiAgICBcbiAgICBzd2FwKHNbaV0sc1tqXSk7XG4gICAgXG4gICAgXG4gICAgMVxuICAgIFxuXG4gMi4g6YCa6L+H5L2N6L+Q566XXG4gICAgXG4gICAgc1tpXSBePSBzW2pdO1xuICAgIHNbal0gXj0gc1tpXTtcbiAgICBzW2ldIF49IHNbal07XG4gICAgXG4gICAgXG4gICAgMVxuICAgIDJcbiAgICAzXG4gICAgXG5cblxuIyA1NDEuIOWPjei9rOWtl+espuS4siBJSVxuXG4gKiDpopjnm67vvJo1NDEuIOWPjei9rOWtl+espuS4siBJSVxuXG4gKiDorrLop6PvvJrmlofnq6DorrLop6PjgIHop4bpopHorrLop6NcblxuICog6KaB5rGC77ya5YWI54us56uL5YGa5YaN55yL6Kej5p6QXG5cblxuIyDlvZXliY3mg7Pms5Vcblxu5pyJ5oCd6Lev77yM5L2G5bCx5piv5YaZ5LiN5a+577yM5o+Q5Lqk6ZSZ5LqG5LiJ5qyh8J+Yk1xuXG7ku6XkuIvmmK/miJHnmoTku6PnoIHvvIzmnKogQUMgKOKdjClcblxuY2xhc3MgU29sdXRpb24ge1xucHVibGljOlxuICAgIHN0cmluZyByZXZlcnNlU3RyKHN0cmluZyBzLCBpbnQgaykge1xuICAgICAgICBcbiAgICAgICAgaW50IGxlbiA9IHMuc2l6ZSgpO1xuICAgICAgICBpbnQgcG9zID0gMDtcblxuICAgICAgICBpZihsZW4gPD0gayl7XG4gICAgICAgICAgICByZXZlcnNlKHMsMCAsbGVuIC0gMSk7XG4gICAgICAgICAgICByZXR1cm4gcztcbiAgICAgICAgfVxuXG4gICAgICAgIGZvcihwb3MgPSBrIC0gMTsgcG9zIDwgbGVuOyBwb3MgKz0gMiAqIGspe1xuXG4gICAgICAgICAgICAvLyDlj43ovazliY1r5Liq5a2X56ymXG4gICAgICAgICAgICAvLyBhYmNkZWZnaGUgOFxuICAgICAgICAgICAgcmV2ZXJzZShzLHBvcyAtIGsgKyAxICxwb3MpO1xuICAgICAgICAgICAgXG4gICAgICAgIH1cblxuICAgICAgICAvLyDlpoLmnpzliankvZnlrZfnrKblsJHkuo4gayDkuKrvvIzliJnlsIbliankvZnlrZfnrKblhajpg6jlj43ovazjgIJcbiAgICAgICAgLy8gYWJjZGVmZyA4XG4gICAgICAgIGlmKGxlbiAtIHBvcyA8IGspe1xuICAgICAgICAgICAgcmV2ZXJzZShzLHBvcyxsZW4gLSBwb3MgLSAxKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIOWwj+S6jiAyayDkvYblpKfkuo7miJbnrYnkuo4gayDkuKrvvIzliJnlj43ovazliY0gayDkuKrlrZfnrKZcbiAgICAgICAgaWYobGVuIC0gcG9zIDwgMiAqIGsgJiYgbGVuIC0gcG9zID49IGspe1xuICAgICAgICAgICAgcmV2ZXJzZShzLHBvcyxwb3MgKyBrIC0gMSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcztcbiAgICB9XG5cbiAgICAvLyDlj43ovaxcbiAgICB2b2lkIHJldmVyc2Uoc3RyaW5nICZzLGludCBsLGludCByKXtcbiAgICAgICAgZm9yKDtsIDwgcjtsKyssci0tKXtcbiAgICAgICAgICAgIHN3YXAoc1tsXSxzW3JdKTtcbiAgICAgICAgfVxuICAgIH1cbn07XG5cblxuMVxuMlxuM1xuNFxuNVxuNlxuN1xuOFxuOVxuMTBcbjExXG4xMlxuMTNcbjE0XG4xNVxuMTZcbjE3XG4xOFxuMTlcbjIwXG4yMVxuMjJcbjIzXG4yNFxuMjVcbjI2XG4yN1xuMjhcbjI5XG4zMFxuMzFcbjMyXG4zM1xuMzRcbjM1XG4zNlxuMzdcbjM4XG4zOVxuNDBcbjQxXG5cblxuXG4jIOW9leWQjuaDs+azlVxuXG7lk4fvvIzmhJ/op4noh6rlt7HlhpnnmoTlpb3lpI3mnYLwn5iCXG5cbuacieiAg+iZkeWIsOmXtOaWrei3s+i3g1xuXG7ku6XkuIvmmK/mlbTnkIblkI7lt7IgQUMg55qE5Luj56CB77yI4pyU77iP77yJXG5cbmNsYXNzIFNvbHV0aW9uIHtcbnB1YmxpYzpcbiAgICBzdHJpbmcgcmV2ZXJzZVN0cihzdHJpbmcgcywgaW50IGspIHtcblxuICAgICAgICBpbnQgbGVuID0gcy5zaXplKCk7XG5cbiAgICAgICAgZm9yIChpbnQgaSA9IDA7IGkgPCBsZW47IGkgKz0gKDIgKiBrKSkge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZihpK2s8PWxlbil7XG4gICAgICAgICAgICAgICAgcmV2ZXJzZShzLGksaStrLTEpO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXZlcnNlKHMsaSxsZW4tMSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcztcbiAgICB9XG5cbiAgICAvLyDlj43ovaxcbiAgICB2b2lkIHJldmVyc2Uoc3RyaW5nICZzLGludCBsLGludCByKXtcbiAgICAgICAgZm9yKDtsIDwgcjtsKyssci0tKXtcbiAgICAgICAgICAgIHN3YXAoc1tsXSxzW3JdKTtcbiAgICAgICAgfVxuICAgIH1cbn07XG5cblxuMVxuMlxuM1xuNFxuNVxuNlxuN1xuOFxuOVxuMTBcbjExXG4xMlxuMTNcbjE0XG4xNVxuMTZcbjE3XG4xOFxuMTlcbjIwXG4yMVxuMjJcbjIzXG4yNFxuMjVcbjI2XG5cblxuXG4jIOaAu+e7k1xuXG4gKiDpl7Tmlq3nmoTot7Pot4NcblxuXG4jIOWJkeaMhyBPZmZlciAwNS4g5pu/5o2i56m65qC8XG5cbiAqIOmimOebru+8muWJkeaMhyBPZmZlciAwNS4g5pu/5o2i56m65qC8XG5cbiAqIOiusuino++8muaWh+eroOiusuino1xuXG4gKiDlu7rorq7vvJrlr7nkuo7nur/mgKfmlbDmja7nu5PmnoTvvIzloavlhYXmiJbogIXliKDpmaTvvIzlkI7luo/lpITnkIbkvJrpq5jmlYjnmoTlpJrjgILlpb3lpb3kvZPkvJrkuIDkuIvjgIJcblxuXG4jIOW9leWJjeaDs+azlVxuXG7liJvlu7rmlrDnmoQgY2hhciDmlbDnu4TvvIzmlbDnu4Tlrrnph4/kuLog5Y6f5pWw57uEK1NwYWNlICogMiDmnaXkv53lrZjnu5Pmnpzpm4ZcblxuY2xhc3MgU29sdXRpb24ge1xucHVibGljOlxuICAgIHN0cmluZyByZXBsYWNlU3BhY2Uoc3RyaW5nIHMpIHtcblxuICAgICAgICAvLyDnu5/orqHnqbrmoLzmlbDph49cbiAgICAgICAgaW50IGxlbiA9IHMuc2l6ZSgpO1xuICAgICAgICBpbnQgc3BhY2VDb3VudCA9IDA7XG4gICAgICAgIGludCBwb3MgPSAwO1xuICAgICAgICBcbiAgICAgICAgZm9yKGludCBpID0gMDsgaSA8IGxlbjsgKytpKXtcbiAgICAgICAgICAgIGlmKHNbaV0gPT0gJyAnKXtcbiAgICAgICAgICAgICAgICArK3NwYWNlQ291bnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuXG4gICAgICAgIC8vIOaLk+WuuVxuICAgICAgICBjaGFyIGFuc1tsZW4gKyAyICogc3BhY2VDb3VudF07XG5cbiAgICAgICAgLy8g5b6q546v5aGr5YWFXG4gICAgICAgIGZvcihpbnQgaSA9IDA7IGkgPCBsZW47ICsraSl7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmKHNbaV0gPT0gJyAnKXtcbiAgICAgICAgICAgICAgICBhbnNbcG9zKytdID0gJyUnO1xuICAgICAgICAgICAgICAgIGFuc1twb3MrK10gPSAnMic7XG4gICAgICAgICAgICAgICAgYW5zW3BvcysrXSA9ICcwJztcbiAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgIGFuc1twb3MrK10gPSBzW2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gc3RyaW5nKGFucyk7XG4gICAgfVxufTtcblxuXG4xXG4yXG4zXG40XG41XG42XG43XG44XG45XG4xMFxuMTFcbjEyXG4xM1xuMTRcbjE1XG4xNlxuMTdcbjE4XG4xOVxuMjBcbjIxXG4yMlxuMjNcbjI0XG4yNVxuMjZcbjI3XG4yOFxuMjlcbjMwXG4zMVxuMzJcbjMzXG4zNFxuMzVcblxuXG7ov5DooYzml7blh7rnjrDku6XkuIvnmoTplJnor69cblxuXG5cbue7j+i/h+S4gOauteaXtumXtOeahOaOkuafpeWQjuWPkeeOsOaYr+WvuSBjaGFyKuOAgWNoYXIgW10g5LiOIHN0cmluZyDnmoTliJ3lp4vljJblj4rovazmjaLkuI3nhp/mgonlr7zoh7Rcblxu5qC45b+D5pe25b+955Wl5LqGIGNoYXIg5pWw57uE6Ieq5bim55qEICdcXDAnIOWtl+espu+8jOaJgOS7peWPr+S7pei/m+ihjOS7peS4i+S/ruaUue+8mlxuXG5jbGFzcyBTb2x1dGlvbiB7XG5wdWJsaWM6XG4gICAgc3RyaW5nIHJlcGxhY2VTcGFjZShzdHJpbmcgcykge1xuXG5cdCAgIC4uLlxuXG4gICAgICAgIC8vIOaLk+WuuVxuICAgICAgICBjaGFyIGFuc1tsZW4gKyAyICogc3BhY2VDb3VudCArIDFdO1xuICAgICAgICBcbiAgICAgICBcdC4uLlxuXG4gICAgICAgIGFuc1twb3NdID0gJ1xcMCc7XG5cbiAgICAgICAgcmV0dXJuIHN0cmluZyhhbnMpO1xuICAgIH1cbn07XG5cblxuMVxuMlxuM1xuNFxuNVxuNlxuN1xuOFxuOVxuMTBcbjExXG4xMlxuMTNcbjE0XG4xNVxuMTZcblxuXG7kv67mlLnlrozlkI7lsLHmsqHmnInpl67popjkuobvvIzmnIDnu4jlt7IgQUMg55qE5a6e546w5Luj56CB5aaC5LiL77yaXG5cbmNsYXNzIFNvbHV0aW9uIHtcbnB1YmxpYzpcbiAgICBzdHJpbmcgcmVwbGFjZVNwYWNlKHN0cmluZyBzKSB7XG5cbiAgICAgICAgLy8g57uf6K6h56m65qC85pWw6YePXG4gICAgICAgIGludCBsZW4gPSBzLnNpemUoKTtcbiAgICAgICAgaW50IHNwYWNlQ291bnQgPSAwO1xuICAgICAgICBpbnQgcG9zID0gMDtcbiAgICAgICAgXG4gICAgICAgIGZvcihpbnQgaSA9IDA7IGkgPCBsZW47ICsraSl7XG4gICAgICAgICAgICBpZihzW2ldID09ICcgJyl7XG4gICAgICAgICAgICAgICAgKytzcGFjZUNvdW50O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cblxuICAgICAgICAvLyDmi5PlrrlcbiAgICAgICAgY2hhciBhbnNbbGVuICsgMiAqIHNwYWNlQ291bnQgKyAxXTtcblxuICAgICAgICAvLyDlvqrnjq/loavlhYVcbiAgICAgICAgZm9yKGludCBpID0gMDsgaSA8IGxlbjsgKytpKXtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYoc1tpXSA9PSAnICcpe1xuICAgICAgICAgICAgICAgIGFuc1twb3MrK10gPSAnJSc7XG4gICAgICAgICAgICAgICAgYW5zW3BvcysrXSA9ICcyJztcbiAgICAgICAgICAgICAgICBhbnNbcG9zKytdID0gJzAnO1xuICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgYW5zW3BvcysrXSA9IHNbaV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgfVxuXG4gICAgICAgIGFuc1twb3NdID0gJ1xcMCc7XG5cbiAgICAgICAgcmV0dXJuIHN0cmluZyhhbnMpO1xuICAgIH1cbn07XG5cblxuMVxuMlxuM1xuNFxuNVxuNlxuN1xuOFxuOVxuMTBcbjExXG4xMlxuMTNcbjE0XG4xNVxuMTZcbjE3XG4xOFxuMTlcbjIwXG4yMVxuMjJcbjIzXG4yNFxuMjVcbjI2XG4yN1xuMjhcbjI5XG4zMFxuMzFcbjMyXG4zM1xuMzRcbjM1XG4zNlxuMzdcblxuXG5cbiMg5b2V5ZCO5oOz5rOVXG5cbj4gICog5Y+M5oyH6ZKIXG4+ICAqIHJlc2l6ZSgpXG5cblxuXG5jbGFzcyBTb2x1dGlvbiB7XG5wdWJsaWM6XG4gICAgc3RyaW5nIHJlcGxhY2VTcGFjZShzdHJpbmcgcykge1xuXG4gICAgICAgIC8vIOe7n+iuoeepuuagvOaVsOmHj1xuICAgICAgICBpbnQgb2xkTGVuID0gcy5zaXplKCk7XG4gICAgICAgIGludCBuZXdMZW47XG4gICAgICAgIGludCBzcGFjZUNvdW50ID0gMDtcbiAgICAgICAgXG4gICAgICAgIGZvcihpbnQgaSA9IDA7IGkgPCBvbGRMZW47ICsraSl7XG4gICAgICAgICAgICBpZihzW2ldID09ICcgJyl7XG4gICAgICAgICAgICAgICAgKytzcGFjZUNvdW50O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgbmV3TGVuID0gb2xkTGVuICsgMiAqIHNwYWNlQ291bnQ7XG5cbiAgICAgICAgLy8g5ouT5a65XG4gICAgICAgIHMucmVzaXplKG5ld0xlbik7XG5cbiAgICAgICAgLy8g5b6q546v5aGr5YWFXG4gICAgICAgIC8vIGZhc3Qg5oyH5ZCR5Y6f5pWw57uE55qE5pyA5ZCO5LiA5Liq5L2N572uXG4gICAgICAgIC8vIHNsb3cg5oyH5ZCR5paw5pWw57uE55qE5pyA5ZCO5LiA5Liq5L2N572uXG4gICAgICAgIGZvcihpbnQgZmFzdCA9IG9sZExlbiAtIDEsc2xvdyA9IG5ld0xlbiAtIDE7IGZhc3QgPj0gMDspe1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZihzW2Zhc3RdID09ICcgJyl7XG4gICAgICAgICAgICAgICAgc1tzbG93LS1dID0gJzAnO1xuICAgICAgICAgICAgICAgIHNbc2xvdy0tXSA9ICcyJztcbiAgICAgICAgICAgICAgICBzW3Nsb3ctLV0gPSAnJSc7XG4gICAgICAgICAgICAgICAgZmFzdC0tO1xuICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgc1tzbG93LS1dID0gc1tmYXN0LS1dO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHM7XG4gICAgfVxufTtcblxuXG4xXG4yXG4zXG40XG41XG42XG43XG44XG45XG4xMFxuMTFcbjEyXG4xM1xuMTRcbjE1XG4xNlxuMTdcbjE4XG4xOVxuMjBcbjIxXG4yMlxuMjNcbjI0XG4yNVxuMjZcbjI3XG4yOFxuMjlcbjMwXG4zMVxuMzJcbjMzXG4zNFxuMzVcbjM2XG4zN1xuMzhcblxuXG5cbiMgMTUxLiDnv7vovazlrZfnrKbkuLLph4znmoTljZXor41cblxuICog6aKY55uu77yaMTUxLiDnv7vovazlrZfnrKbkuLLph4znmoTljZXor41cblxuICog6K6y6Kej77ya5paH56ug6K6y6Kej44CB6KeG6aKR6K6y6KejXG5cbiAqIOW7uuiuru+8mui/memBk+mimOebruWfuuacrOaKiiDliJrliJrlgZrov4fnmoTlrZfnrKbkuLLmk43kvZwg6YO96KaG55uW5LqG77yM5LiN6L+H5bCx566X55+l6YGT6Kej6aKY5oCd6Lev77yM5pys6aKY5Luj56CB5bm25LiN5a655piT5YaZ77yM6KaB5aSa57uD5LiA57uD44CCXG5cblxuIyDlvZXliY3mg7Pms5VcblxuIDEuIOWOu+mZpOWkmuS9meeahOepuuagvFxuIDIuIOaVtOS9k+WPjei9rFxuIDMuIOWNleivjeWPjei9rFxuXG7lt7Lnu48gQUMgKOKclO+4jylcblxuY2xhc3MgU29sdXRpb24ge1xucHVibGljOlxuICAgIHN0cmluZyByZXZlcnNlV29yZHMoc3RyaW5nIHMpIHtcbiAgICAgICAgXG4gICAgICAgIGludCBsZW4gPSBzLnNpemUoKTtcblxuICAgICAgICAvLyAxLuWPjOaMh+mSiOenu+WKqOWIoOmZpOepuuagvFxuICAgICAgICAvLyDlr7nnqbrmoLzljrvph41cbiAgICAgICAgaW50IGZhc3QgPSAwLHNsb3cgPSAwO1xuICAgICAgICAvLyAxLjEg5Yig6ZmkXG4gICAgICAgIC8vIOaJvuWIsOesrOS4gOS4quS4jeS4uuepuuagvOeahOWFg+e0oFxuICAgICAgICB3aGlsZShzW2Zhc3RdID09ICcgJyAmJiBmYXN0IDwgbGVuKXtmYXN0Kys7fVxuICAgICAgICAvLyAxLjIg5Lit6Ze06YGH5Yiw56m65qC8XG4gICAgICAgIHdoaWxlKGZhc3QgPCBsZW4pe1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZihzW2Zhc3RdICE9ICcgJyB8fCAoc1tmYXN0XSA9PSAnICcgJiYgc1tmYXN0LTFdICE9ICcgJyAmJiBmYXN0ICE9IDApKXtcbiAgICAgICAgICAgICAgICBzW3Nsb3crK10gPSBzW2Zhc3QrK107XG4gICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICB3aGlsZShzW2Zhc3RdID09ICcgJyAmJiBmYXN0IDwgbGVuKXtmYXN0Kys7fVxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cbiAgICAgICAgLy8gMS4zIOe7k+WwvumBh+WIsOepuuagvFxuICAgICAgICBpZihzW3Nsb3cgLSAxXSA9PSAnICcpe1xuICAgICAgICAgICAgcy5yZXNpemUoc2xvdyAtIDEpO1xuICAgICAgICAgICAgbGVuID0gc2xvdyAtIDE7XG4gICAgICAgIH1lbHNle1xuICAgICAgICAgICAgcy5yZXNpemUoc2xvdyk7XG4gICAgICAgICAgICBsZW4gPSBzbG93O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gMi4g5pW05L2T5Y+N6L2sXG4gICAgICAgIHJldmVyc2UocywwLGxlbi0xKTtcblxuICAgICAgICAvLyAzLiDlho3lr7nmr4/kuKrljZXor43lj43ovaxcbiAgICAgICAgaW50IGwscjtcbiAgICAgICAgZm9yKGwgPSAwLHIgPSAwOyByIDwgbGVuOyArK3Ipe1xuXG4gICAgICAgICAgICBpZihzW3JdID09ICcgJyl7XG4gICAgICAgICAgICAgICAgcmV2ZXJzZShzLGwsciAtIDEpO1xuICAgICAgICAgICAgICAgIGwgPSByICsgMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIOWPjei9rOacgOWQjuS4gOS4quWNleivjVxuICAgICAgICByZXZlcnNlKHMsbCxyIC0gMSk7XG5cbiAgICAgICAgcmV0dXJuIHM7XG4gICAgfVxuXG4gICAgLy8g5Y+N6L2sXG4gICAgdm9pZCByZXZlcnNlKHN0cmluZyAmc3RyLGludCBsLGludCByKXtcbiAgICAgICAgZm9yKDtsPHI7ICsrbCwtLXIpe1xuICAgICAgICAgICAgc3dhcChzdHJbbF0sc3RyW3JdKTtcbiAgICAgICAgfVxuICAgIH1cbn07XG5cblxuMVxuMlxuM1xuNFxuNVxuNlxuN1xuOFxuOVxuMTBcbjExXG4xMlxuMTNcbjE0XG4xNVxuMTZcbjE3XG4xOFxuMTlcbjIwXG4yMVxuMjJcbjIzXG4yNFxuMjVcbjI2XG4yN1xuMjhcbjI5XG4zMFxuMzFcbjMyXG4zM1xuMzRcbjM1XG4zNlxuMzdcbjM4XG4zOVxuNDBcbjQxXG40MlxuNDNcbjQ0XG40NVxuNDZcbjQ3XG40OFxuNDlcbjUwXG41MVxuNTJcbjUzXG41NFxuNTVcbjU2XG41N1xuXG4gKiDml7bpl7TlpI3mnYLluqY6IE8gKG4pXG4gKiDnqbrpl7TlpI3mnYLluqY6IE8gKDEpXG5cblxuIyDlvZXlkI7mg7Pms5Vcblxu5oCd6Lev5LiA6Ie0XG5cblxuIyDmgLvnu5Ncblxu5Yig6Zmk5Lit6Ze05q6156m65qC855qE5qC45b+D5Yik5pat5Luj56CB77ya55CG6Kej5LqGIHMgW2Zhc3RdIOS4jiBzIFtmYXN0LTFdXG5cbmlmKHNbZmFzdF0gIT0gJyAnIHx8IChzW2Zhc3RdID09ICcgJyAmJiBzW2Zhc3QtMV0gIT0gJyAnICYmIGZhc3QgIT0gMCkpXG5cblxuMVxuXG5cblxuIyDliZHmjIcgT2ZmZXI1OC1JSS4g5bem5peL6L2s5a2X56ym5LiyXG5cbiAqIOmimOebru+8muWJkeaMhyBPZmZlcjU4LUlJLiDlt6bml4vovazlrZfnrKbkuLJcblxuICog6K6y6Kej77ya5paH56ug6K6y6KejXG5cbiAqIOW7uuiuru+8mumimOino+S4reeahOino+azleWmguaenOayoeaOpeinpui/h+eahOivne+8jOW6lOivpeS8muaDs+S4jeWIsFxuXG5cbiMg5b2V5YmN5oOz5rOVXG5cbiAxLiDmlbTkvZPlj43ovaxcbiAyLiDlgJLmlbAgayDkuKrlrZfnrKblj43ovaxcbiAzLiDmraPmlbAgbGVuIC0gayDkuKrlrZfnrKblj43ovaxcblxu5Lul5LiL5Luj56CB5beyIEFDICjinJTvuI8pXG5cbmNsYXNzIFNvbHV0aW9uIHtcbnB1YmxpYzpcbiAgICBzdHJpbmcgcmV2ZXJzZUxlZnRXb3JkcyhzdHJpbmcgcywgaW50IG4pIHtcblxuICAgICAgICAvLyBhYmNkZWZnXG4gICAgICAgIC8vIGdmZWRjIGJhXG4gICAgICAgIC8vIGNkZWZnIGFiXG5cbiAgICAgICAgLy8gbHJsb3NldW1naFxuICAgICAgICAvLyBoZ211IGVzb2xybFxuICAgICAgICAvLyB1bWdoIGxybG9zZVxuXG4gICAgICAgIGludCBsZW4gPSBzLnNpemUoKTtcbiAgICAgICAgLy8g5pW05L2T5Y+N6L2sXG4gICAgICAgIHJldmVyc2UocywwLGxlbi0xKTtcblxuICAgICAgICAvLyDlgJLmlbBu5Liq5Y+N6L2sXG4gICAgICAgIHJldmVyc2UocyxsZW4tbixsZW4tMSk7XG5cbiAgICAgICAgLy8gMCB+IGxlbiAtIG4g5Y+N6L2sXG4gICAgICAgIHJldmVyc2UocywwLGxlbi1uLTEpO1xuXG4gICAgICAgIHJldHVybiBzO1xuICAgIH1cblxuICAgIHZvaWQgcmV2ZXJzZShzdHJpbmcgJnN0cixpbnQgbCxpbnQgcil7XG4gICAgICAgIGZvcig7bDxyOysrbCwtLXIpe1xuICAgICAgICAgICAgc3dhcChzdHJbbF0sc3RyW3JdKTtcbiAgICAgICAgfVxuICAgIH1cbn07XG5cblxuMVxuMlxuM1xuNFxuNVxuNlxuN1xuOFxuOVxuMTBcbjExXG4xMlxuMTNcbjE0XG4xNVxuMTZcbjE3XG4xOFxuMTlcbjIwXG4yMVxuMjJcbjIzXG4yNFxuMjVcbjI2XG4yN1xuMjhcbjI5XG4zMFxuMzFcblxuXG5cbiMg5b2V5ZCO5oOz5rOVXG5cbuaAnei3r+S4gOiHtOKcjO+4j1xuXG5cbiMg5oC757uTXG5cbiAqIOWFs+S6jiBjaGFyKuOAgWNoYXIgW10g5LiOIHN0cmluZyDnmoTliJ3lp4vljJblj4rovazmjaJcblxu5Ymq5p6d5pON5L2c55qE57uG6IqC5aW96Zq+77yM6L+Y6ZyA6KaB5aSa5Yqg57uD5Lmg77yBIiwKICAgICJub3JtYWxpemVkQ29udGVudCI6ICI+IDM0NC4g5Y+N6L2s5a2X56ym5Liy44CBNTQxLiDlj43ovazlrZfnrKbkuLIgaWnjgIHliZHmjIcgb2ZmZXIgMDUuIOabv+aNouepuuagvOOAgSAxNTEuIOe/u+i9rOWtl+espuS4sumHjOeahOWNleivjeOAgSDliZHmjIcgb2ZmZXI1OC1paS4g5bem5peL6L2s5a2X56ym5LiyXG5cblxuIyAzNDQuIOWPjei9rOWtl+espuS4slxuXG4gKiDpopjnm67vvJozNDQuIOWPjei9rOWtl+espuS4slxuXG4gKiDorrLop6PvvJrmlofnq6DorrLop6PjgIHop4bpopHorrLop6NcblxuICog6KaB5rGC77ya55CG6Kej5LuA5LmI5pe25YCZ55So5bqT5Ye95pWw77yM5LuA5LmI5pe25YCZ5LiN55So5bqT5Ye95pWwXG5cblxuIyDlvZXliY3mg7Pms5Vcblxu5Lqk5o2i6aaW5pyr5YWD57Sg77yM5rOo5oSP5pWw57uE6LaK55WM77yM5beyIGFjICjinJTvuI8pXG5cbmNsYXNzIHNvbHV0aW9uIHtcbnB1YmxpYzpcbiAgICB2b2lkIHJldmVyc2VzdHJpbmcodmVjdG9yPGNoYXI+JiBzKSB7XG5cbiAgICAgICAgaW50IHRtcDtcbiAgICAgICAgaW50IGxlbiA9IHMuc2l6ZSgpIC0gMTtcblxuICAgICAgICAvLyDkuqTmjaJcbiAgICAgICAgZm9yKGludCBpID0gMDsgaSA8PSBsZW4vMjsgKytpKXtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdG1wID0gc1tpXTtcbiAgICAgICAgICAgIHNbaV0gPSBzW2xlbi1pXTtcbiAgICAgICAgICAgIHNbbGVuLWldID0gdG1wO1xuXG4gICAgICAgIH1cbiAgICB9XG59O1xuXG5cbjFcbjJcbjNcbjRcbjVcbjZcbjdcbjhcbjlcbjEwXG4xMVxuMTJcbjEzXG4xNFxuMTVcbjE2XG4xN1xuXG5cblxuIyDlvZXlkI7mg7Pms5Vcblxu5oCd6Lev5LiA6Ie077yM5aSa5LqG5Lik56eN5Lqk5o2i55qE5pa55rOV5Y+v5Lul5a2m5Lmg77yaXG5cbiAxLiBzd2FwIOWHveaVsFxuICAgIFxuICAgIHN3YXAoc1tpXSxzW2pdKTtcbiAgICBcbiAgICBcbiAgICAxXG4gICAgXG5cbiAyLiDpgJrov4fkvY3ov5DnrpdcbiAgICBcbiAgICBzW2ldIF49IHNbal07XG4gICAgc1tqXSBePSBzW2ldO1xuICAgIHNbaV0gXj0gc1tqXTtcbiAgICBcbiAgICBcbiAgICAxXG4gICAgMlxuICAgIDNcbiAgICBcblxuXG4jIDU0MS4g5Y+N6L2s5a2X56ym5LiyIGlpXG5cbiAqIOmimOebru+8mjU0MS4g5Y+N6L2s5a2X56ym5LiyIGlpXG5cbiAqIOiusuino++8muaWh+eroOiusuino+OAgeinhumikeiusuino1xuXG4gKiDopoHmsYLvvJrlhYjni6znq4vlgZrlho3nnIvop6PmnpBcblxuXG4jIOW9leWJjeaDs+azlVxuXG7mnInmgJ3ot6/vvIzkvYblsLHmmK/lhpnkuI3lr7nvvIzmj5DkuqTplJnkuobkuInmrKHwn5iTXG5cbuS7peS4i+aYr+aIkeeahOS7o+egge+8jOacqiBhYyAo4p2MKVxuXG5jbGFzcyBzb2x1dGlvbiB7XG5wdWJsaWM6XG4gICAgc3RyaW5nIHJldmVyc2VzdHIoc3RyaW5nIHMsIGludCBrKSB7XG4gICAgICAgIFxuICAgICAgICBpbnQgbGVuID0gcy5zaXplKCk7XG4gICAgICAgIGludCBwb3MgPSAwO1xuXG4gICAgICAgIGlmKGxlbiA8PSBrKXtcbiAgICAgICAgICAgIHJldmVyc2UocywwICxsZW4gLSAxKTtcbiAgICAgICAgICAgIHJldHVybiBzO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yKHBvcyA9IGsgLSAxOyBwb3MgPCBsZW47IHBvcyArPSAyICogayl7XG5cbiAgICAgICAgICAgIC8vIOWPjei9rOWJjWvkuKrlrZfnrKZcbiAgICAgICAgICAgIC8vIGFiY2RlZmdoZSA4XG4gICAgICAgICAgICByZXZlcnNlKHMscG9zIC0gayArIDEgLHBvcyk7XG4gICAgICAgICAgICBcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIOWmguaenOWJqeS9meWtl+espuWwkeS6jiBrIOS4qu+8jOWImeWwhuWJqeS9meWtl+espuWFqOmDqOWPjei9rOOAglxuICAgICAgICAvLyBhYmNkZWZnIDhcbiAgICAgICAgaWYobGVuIC0gcG9zIDwgayl7XG4gICAgICAgICAgICByZXZlcnNlKHMscG9zLGxlbiAtIHBvcyAtIDEpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8g5bCP5LqOIDJrIOS9huWkp+S6juaIluetieS6jiBrIOS4qu+8jOWImeWPjei9rOWJjSBrIOS4quWtl+esplxuICAgICAgICBpZihsZW4gLSBwb3MgPCAyICogayAmJiBsZW4gLSBwb3MgPj0gayl7XG4gICAgICAgICAgICByZXZlcnNlKHMscG9zLHBvcyArIGsgLSAxKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBzO1xuICAgIH1cblxuICAgIC8vIOWPjei9rFxuICAgIHZvaWQgcmV2ZXJzZShzdHJpbmcgJnMsaW50IGwsaW50IHIpe1xuICAgICAgICBmb3IoO2wgPCByO2wrKyxyLS0pe1xuICAgICAgICAgICAgc3dhcChzW2xdLHNbcl0pO1xuICAgICAgICB9XG4gICAgfVxufTtcblxuXG4xXG4yXG4zXG40XG41XG42XG43XG44XG45XG4xMFxuMTFcbjEyXG4xM1xuMTRcbjE1XG4xNlxuMTdcbjE4XG4xOVxuMjBcbjIxXG4yMlxuMjNcbjI0XG4yNVxuMjZcbjI3XG4yOFxuMjlcbjMwXG4zMVxuMzJcbjMzXG4zNFxuMzVcbjM2XG4zN1xuMzhcbjM5XG40MFxuNDFcblxuXG5cbiMg5b2V5ZCO5oOz5rOVXG5cbuWTh++8jOaEn+inieiHquW3seWGmeeahOWlveWkjeadgvCfmIJcblxu5pyJ6ICD6JmR5Yiw6Ze05pat6Lez6LeDXG5cbuS7peS4i+aYr+aVtOeQhuWQjuW3siBhYyDnmoTku6PnoIHvvIjinJTvuI/vvIlcblxuY2xhc3Mgc29sdXRpb24ge1xucHVibGljOlxuICAgIHN0cmluZyByZXZlcnNlc3RyKHN0cmluZyBzLCBpbnQgaykge1xuXG4gICAgICAgIGludCBsZW4gPSBzLnNpemUoKTtcblxuICAgICAgICBmb3IgKGludCBpID0gMDsgaSA8IGxlbjsgaSArPSAoMiAqIGspKSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmKGkrazw9bGVuKXtcbiAgICAgICAgICAgICAgICByZXZlcnNlKHMsaSxpK2stMSk7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldmVyc2UocyxpLGxlbi0xKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBzO1xuICAgIH1cblxuICAgIC8vIOWPjei9rFxuICAgIHZvaWQgcmV2ZXJzZShzdHJpbmcgJnMsaW50IGwsaW50IHIpe1xuICAgICAgICBmb3IoO2wgPCByO2wrKyxyLS0pe1xuICAgICAgICAgICAgc3dhcChzW2xdLHNbcl0pO1xuICAgICAgICB9XG4gICAgfVxufTtcblxuXG4xXG4yXG4zXG40XG41XG42XG43XG44XG45XG4xMFxuMTFcbjEyXG4xM1xuMTRcbjE1XG4xNlxuMTdcbjE4XG4xOVxuMjBcbjIxXG4yMlxuMjNcbjI0XG4yNVxuMjZcblxuXG5cbiMg5oC757uTXG5cbiAqIOmXtOaWreeahOi3s+i3g1xuXG5cbiMg5YmR5oyHIG9mZmVyIDA1LiDmm7/mjaLnqbrmoLxcblxuICog6aKY55uu77ya5YmR5oyHIG9mZmVyIDA1LiDmm7/mjaLnqbrmoLxcblxuICog6K6y6Kej77ya5paH56ug6K6y6KejXG5cbiAqIOW7uuiuru+8muWvueS6jue6v+aAp+aVsOaNrue7k+aehO+8jOWhq+WFheaIluiAheWIoOmZpO+8jOWQjuW6j+WkhOeQhuS8mumrmOaViOeahOWkmuOAguWlveWlveS9k+S8muS4gOS4i+OAglxuXG5cbiMg5b2V5YmN5oOz5rOVXG5cbuWIm+W7uuaWsOeahCBjaGFyIOaVsOe7hO+8jOaVsOe7hOWuuemHj+S4uiDljp/mlbDnu4Qrc3BhY2UgKiAyIOadpeS/neWtmOe7k+aenOmbhlxuXG5jbGFzcyBzb2x1dGlvbiB7XG5wdWJsaWM6XG4gICAgc3RyaW5nIHJlcGxhY2VzcGFjZShzdHJpbmcgcykge1xuXG4gICAgICAgIC8vIOe7n+iuoeepuuagvOaVsOmHj1xuICAgICAgICBpbnQgbGVuID0gcy5zaXplKCk7XG4gICAgICAgIGludCBzcGFjZWNvdW50ID0gMDtcbiAgICAgICAgaW50IHBvcyA9IDA7XG4gICAgICAgIFxuICAgICAgICBmb3IoaW50IGkgPSAwOyBpIDwgbGVuOyArK2kpe1xuICAgICAgICAgICAgaWYoc1tpXSA9PSAnICcpe1xuICAgICAgICAgICAgICAgICsrc3BhY2Vjb3VudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG5cbiAgICAgICAgLy8g5ouT5a65XG4gICAgICAgIGNoYXIgYW5zW2xlbiArIDIgKiBzcGFjZWNvdW50XTtcblxuICAgICAgICAvLyDlvqrnjq/loavlhYVcbiAgICAgICAgZm9yKGludCBpID0gMDsgaSA8IGxlbjsgKytpKXtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYoc1tpXSA9PSAnICcpe1xuICAgICAgICAgICAgICAgIGFuc1twb3MrK10gPSAnJSc7XG4gICAgICAgICAgICAgICAgYW5zW3BvcysrXSA9ICcyJztcbiAgICAgICAgICAgICAgICBhbnNbcG9zKytdID0gJzAnO1xuICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgYW5zW3BvcysrXSA9IHNbaV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBzdHJpbmcoYW5zKTtcbiAgICB9XG59O1xuXG5cbjFcbjJcbjNcbjRcbjVcbjZcbjdcbjhcbjlcbjEwXG4xMVxuMTJcbjEzXG4xNFxuMTVcbjE2XG4xN1xuMThcbjE5XG4yMFxuMjFcbjIyXG4yM1xuMjRcbjI1XG4yNlxuMjdcbjI4XG4yOVxuMzBcbjMxXG4zMlxuMzNcbjM0XG4zNVxuXG5cbui/kOihjOaXtuWHuueOsOS7peS4i+eahOmUmeivr1xuXG5cblxu57uP6L+H5LiA5q615pe26Ze055qE5o6S5p+l5ZCO5Y+R546w5piv5a+5IGNoYXIq44CBY2hhciBbXSDkuI4gc3RyaW5nIOeahOWIneWni+WMluWPiui9rOaNouS4jeeGn+aCieWvvOiHtFxuXG7moLjlv4Pml7blv73nlaXkuoYgY2hhciDmlbDnu4Toh6rluKbnmoQgJ1xcMCcg5a2X56ym77yM5omA5Lul5Y+v5Lul6L+b6KGM5Lul5LiL5L+u5pS577yaXG5cbmNsYXNzIHNvbHV0aW9uIHtcbnB1YmxpYzpcbiAgICBzdHJpbmcgcmVwbGFjZXNwYWNlKHN0cmluZyBzKSB7XG5cblx0ICAgLi4uXG5cbiAgICAgICAgLy8g5ouT5a65XG4gICAgICAgIGNoYXIgYW5zW2xlbiArIDIgKiBzcGFjZWNvdW50ICsgMV07XG4gICAgICAgIFxuICAgICAgIFx0Li4uXG5cbiAgICAgICAgYW5zW3Bvc10gPSAnXFwwJztcblxuICAgICAgICByZXR1cm4gc3RyaW5nKGFucyk7XG4gICAgfVxufTtcblxuXG4xXG4yXG4zXG40XG41XG42XG43XG44XG45XG4xMFxuMTFcbjEyXG4xM1xuMTRcbjE1XG4xNlxuXG5cbuS/ruaUueWujOWQjuWwseayoeaciemXrumimOS6hu+8jOacgOe7iOW3siBhYyDnmoTlrp7njrDku6PnoIHlpoLkuIvvvJpcblxuY2xhc3Mgc29sdXRpb24ge1xucHVibGljOlxuICAgIHN0cmluZyByZXBsYWNlc3BhY2Uoc3RyaW5nIHMpIHtcblxuICAgICAgICAvLyDnu5/orqHnqbrmoLzmlbDph49cbiAgICAgICAgaW50IGxlbiA9IHMuc2l6ZSgpO1xuICAgICAgICBpbnQgc3BhY2Vjb3VudCA9IDA7XG4gICAgICAgIGludCBwb3MgPSAwO1xuICAgICAgICBcbiAgICAgICAgZm9yKGludCBpID0gMDsgaSA8IGxlbjsgKytpKXtcbiAgICAgICAgICAgIGlmKHNbaV0gPT0gJyAnKXtcbiAgICAgICAgICAgICAgICArK3NwYWNlY291bnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuXG4gICAgICAgIC8vIOaLk+WuuVxuICAgICAgICBjaGFyIGFuc1tsZW4gKyAyICogc3BhY2Vjb3VudCArIDFdO1xuXG4gICAgICAgIC8vIOW+queOr+Whq+WFhVxuICAgICAgICBmb3IoaW50IGkgPSAwOyBpIDwgbGVuOyArK2kpe1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZihzW2ldID09ICcgJyl7XG4gICAgICAgICAgICAgICAgYW5zW3BvcysrXSA9ICclJztcbiAgICAgICAgICAgICAgICBhbnNbcG9zKytdID0gJzInO1xuICAgICAgICAgICAgICAgIGFuc1twb3MrK10gPSAnMCc7XG4gICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICBhbnNbcG9zKytdID0gc1tpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICB9XG5cbiAgICAgICAgYW5zW3Bvc10gPSAnXFwwJztcblxuICAgICAgICByZXR1cm4gc3RyaW5nKGFucyk7XG4gICAgfVxufTtcblxuXG4xXG4yXG4zXG40XG41XG42XG43XG44XG45XG4xMFxuMTFcbjEyXG4xM1xuMTRcbjE1XG4xNlxuMTdcbjE4XG4xOVxuMjBcbjIxXG4yMlxuMjNcbjI0XG4yNVxuMjZcbjI3XG4yOFxuMjlcbjMwXG4zMVxuMzJcbjMzXG4zNFxuMzVcbjM2XG4zN1xuXG5cblxuIyDlvZXlkI7mg7Pms5VcblxuPiAgKiDlj4zmjIfpkohcbj4gICogcmVzaXplKClcblxuXG5cbmNsYXNzIHNvbHV0aW9uIHtcbnB1YmxpYzpcbiAgICBzdHJpbmcgcmVwbGFjZXNwYWNlKHN0cmluZyBzKSB7XG5cbiAgICAgICAgLy8g57uf6K6h56m65qC85pWw6YePXG4gICAgICAgIGludCBvbGRsZW4gPSBzLnNpemUoKTtcbiAgICAgICAgaW50IG5ld2xlbjtcbiAgICAgICAgaW50IHNwYWNlY291bnQgPSAwO1xuICAgICAgICBcbiAgICAgICAgZm9yKGludCBpID0gMDsgaSA8IG9sZGxlbjsgKytpKXtcbiAgICAgICAgICAgIGlmKHNbaV0gPT0gJyAnKXtcbiAgICAgICAgICAgICAgICArK3NwYWNlY291bnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBuZXdsZW4gPSBvbGRsZW4gKyAyICogc3BhY2Vjb3VudDtcblxuICAgICAgICAvLyDmi5PlrrlcbiAgICAgICAgcy5yZXNpemUobmV3bGVuKTtcblxuICAgICAgICAvLyDlvqrnjq/loavlhYVcbiAgICAgICAgLy8gZmFzdCDmjIflkJHljp/mlbDnu4TnmoTmnIDlkI7kuIDkuKrkvY3nva5cbiAgICAgICAgLy8gc2xvdyDmjIflkJHmlrDmlbDnu4TnmoTmnIDlkI7kuIDkuKrkvY3nva5cbiAgICAgICAgZm9yKGludCBmYXN0ID0gb2xkbGVuIC0gMSxzbG93ID0gbmV3bGVuIC0gMTsgZmFzdCA+PSAwOyl7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmKHNbZmFzdF0gPT0gJyAnKXtcbiAgICAgICAgICAgICAgICBzW3Nsb3ctLV0gPSAnMCc7XG4gICAgICAgICAgICAgICAgc1tzbG93LS1dID0gJzInO1xuICAgICAgICAgICAgICAgIHNbc2xvdy0tXSA9ICclJztcbiAgICAgICAgICAgICAgICBmYXN0LS07XG4gICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICBzW3Nsb3ctLV0gPSBzW2Zhc3QtLV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcztcbiAgICB9XG59O1xuXG5cbjFcbjJcbjNcbjRcbjVcbjZcbjdcbjhcbjlcbjEwXG4xMVxuMTJcbjEzXG4xNFxuMTVcbjE2XG4xN1xuMThcbjE5XG4yMFxuMjFcbjIyXG4yM1xuMjRcbjI1XG4yNlxuMjdcbjI4XG4yOVxuMzBcbjMxXG4zMlxuMzNcbjM0XG4zNVxuMzZcbjM3XG4zOFxuXG5cblxuIyAxNTEuIOe/u+i9rOWtl+espuS4sumHjOeahOWNleivjVxuXG4gKiDpopjnm67vvJoxNTEuIOe/u+i9rOWtl+espuS4sumHjOeahOWNleivjVxuXG4gKiDorrLop6PvvJrmlofnq6DorrLop6PjgIHop4bpopHorrLop6NcblxuICog5bu66K6u77ya6L+Z6YGT6aKY55uu5Z+65pys5oqKIOWImuWImuWBmui/h+eahOWtl+espuS4suaTjeS9nCDpg73opobnm5bkuobvvIzkuI3ov4flsLHnrpfnn6XpgZPop6PpopjmgJ3ot6/vvIzmnKzpopjku6PnoIHlubbkuI3lrrnmmJPlhpnvvIzopoHlpJrnu4PkuIDnu4PjgIJcblxuXG4jIOW9leWJjeaDs+azlVxuXG4gMS4g5Y676Zmk5aSa5L2Z55qE56m65qC8XG4gMi4g5pW05L2T5Y+N6L2sXG4gMy4g5Y2V6K+N5Y+N6L2sXG5cbuW3sue7jyBhYyAo4pyU77iPKVxuXG5jbGFzcyBzb2x1dGlvbiB7XG5wdWJsaWM6XG4gICAgc3RyaW5nIHJldmVyc2V3b3JkcyhzdHJpbmcgcykge1xuICAgICAgICBcbiAgICAgICAgaW50IGxlbiA9IHMuc2l6ZSgpO1xuXG4gICAgICAgIC8vIDEu5Y+M5oyH6ZKI56e75Yqo5Yig6Zmk56m65qC8XG4gICAgICAgIC8vIOWvueepuuagvOWOu+mHjVxuICAgICAgICBpbnQgZmFzdCA9IDAsc2xvdyA9IDA7XG4gICAgICAgIC8vIDEuMSDliKDpmaRcbiAgICAgICAgLy8g5om+5Yiw56ys5LiA5Liq5LiN5Li656m65qC855qE5YWD57SgXG4gICAgICAgIHdoaWxlKHNbZmFzdF0gPT0gJyAnICYmIGZhc3QgPCBsZW4pe2Zhc3QrKzt9XG4gICAgICAgIC8vIDEuMiDkuK3pl7TpgYfliLDnqbrmoLxcbiAgICAgICAgd2hpbGUoZmFzdCA8IGxlbil7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmKHNbZmFzdF0gIT0gJyAnIHx8IChzW2Zhc3RdID09ICcgJyAmJiBzW2Zhc3QtMV0gIT0gJyAnICYmIGZhc3QgIT0gMCkpe1xuICAgICAgICAgICAgICAgIHNbc2xvdysrXSA9IHNbZmFzdCsrXTtcbiAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgIHdoaWxlKHNbZmFzdF0gPT0gJyAnICYmIGZhc3QgPCBsZW4pe2Zhc3QrKzt9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuICAgICAgICAvLyAxLjMg57uT5bC+6YGH5Yiw56m65qC8XG4gICAgICAgIGlmKHNbc2xvdyAtIDFdID09ICcgJyl7XG4gICAgICAgICAgICBzLnJlc2l6ZShzbG93IC0gMSk7XG4gICAgICAgICAgICBsZW4gPSBzbG93IC0gMTtcbiAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICBzLnJlc2l6ZShzbG93KTtcbiAgICAgICAgICAgIGxlbiA9IHNsb3c7XG4gICAgICAgIH1cblxuICAgICAgICAvLyAyLiDmlbTkvZPlj43ovaxcbiAgICAgICAgcmV2ZXJzZShzLDAsbGVuLTEpO1xuXG4gICAgICAgIC8vIDMuIOWGjeWvueavj+S4quWNleivjeWPjei9rFxuICAgICAgICBpbnQgbCxyO1xuICAgICAgICBmb3IobCA9IDAsciA9IDA7IHIgPCBsZW47ICsrcil7XG5cbiAgICAgICAgICAgIGlmKHNbcl0gPT0gJyAnKXtcbiAgICAgICAgICAgICAgICByZXZlcnNlKHMsbCxyIC0gMSk7XG4gICAgICAgICAgICAgICAgbCA9IHIgKyAxO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8g5Y+N6L2s5pyA5ZCO5LiA5Liq5Y2V6K+NXG4gICAgICAgIHJldmVyc2UocyxsLHIgLSAxKTtcblxuICAgICAgICByZXR1cm4gcztcbiAgICB9XG5cbiAgICAvLyDlj43ovaxcbiAgICB2b2lkIHJldmVyc2Uoc3RyaW5nICZzdHIsaW50IGwsaW50IHIpe1xuICAgICAgICBmb3IoO2w8cjsgKytsLC0tcil7XG4gICAgICAgICAgICBzd2FwKHN0cltsXSxzdHJbcl0pO1xuICAgICAgICB9XG4gICAgfVxufTtcblxuXG4xXG4yXG4zXG40XG41XG42XG43XG44XG45XG4xMFxuMTFcbjEyXG4xM1xuMTRcbjE1XG4xNlxuMTdcbjE4XG4xOVxuMjBcbjIxXG4yMlxuMjNcbjI0XG4yNVxuMjZcbjI3XG4yOFxuMjlcbjMwXG4zMVxuMzJcbjMzXG4zNFxuMzVcbjM2XG4zN1xuMzhcbjM5XG40MFxuNDFcbjQyXG40M1xuNDRcbjQ1XG40NlxuNDdcbjQ4XG40OVxuNTBcbjUxXG41MlxuNTNcbjU0XG41NVxuNTZcbjU3XG5cbiAqIOaXtumXtOWkjeadguW6pjogbyAobilcbiAqIOepuumXtOWkjeadguW6pjogbyAoMSlcblxuXG4jIOW9leWQjuaDs+azlVxuXG7mgJ3ot6/kuIDoh7RcblxuXG4jIOaAu+e7k1xuXG7liKDpmaTkuK3pl7TmrrXnqbrmoLznmoTmoLjlv4PliKTmlq3ku6PnoIHvvJrnkIbop6PkuoYgcyBbZmFzdF0g5LiOIHMgW2Zhc3QtMV1cblxuaWYoc1tmYXN0XSAhPSAnICcgfHwgKHNbZmFzdF0gPT0gJyAnICYmIHNbZmFzdC0xXSAhPSAnICcgJiYgZmFzdCAhPSAwKSlcblxuXG4xXG5cblxuXG4jIOWJkeaMhyBvZmZlcjU4LWlpLiDlt6bml4vovazlrZfnrKbkuLJcblxuICog6aKY55uu77ya5YmR5oyHIG9mZmVyNTgtaWkuIOW3puaXi+i9rOWtl+espuS4slxuXG4gKiDorrLop6PvvJrmlofnq6DorrLop6NcblxuICog5bu66K6u77ya6aKY6Kej5Lit55qE6Kej5rOV5aaC5p6c5rKh5o6l6Kem6L+H55qE6K+d77yM5bqU6K+l5Lya5oOz5LiN5YiwXG5cblxuIyDlvZXliY3mg7Pms5VcblxuIDEuIOaVtOS9k+WPjei9rFxuIDIuIOWAkuaVsCBrIOS4quWtl+espuWPjei9rFxuIDMuIOato+aVsCBsZW4gLSBrIOS4quWtl+espuWPjei9rFxuXG7ku6XkuIvku6PnoIHlt7IgYWMgKOKclO+4jylcblxuY2xhc3Mgc29sdXRpb24ge1xucHVibGljOlxuICAgIHN0cmluZyByZXZlcnNlbGVmdHdvcmRzKHN0cmluZyBzLCBpbnQgbikge1xuXG4gICAgICAgIC8vIGFiY2RlZmdcbiAgICAgICAgLy8gZ2ZlZGMgYmFcbiAgICAgICAgLy8gY2RlZmcgYWJcblxuICAgICAgICAvLyBscmxvc2V1bWdoXG4gICAgICAgIC8vIGhnbXUgZXNvbHJsXG4gICAgICAgIC8vIHVtZ2ggbHJsb3NlXG5cbiAgICAgICAgaW50IGxlbiA9IHMuc2l6ZSgpO1xuICAgICAgICAvLyDmlbTkvZPlj43ovaxcbiAgICAgICAgcmV2ZXJzZShzLDAsbGVuLTEpO1xuXG4gICAgICAgIC8vIOWAkuaVsG7kuKrlj43ovaxcbiAgICAgICAgcmV2ZXJzZShzLGxlbi1uLGxlbi0xKTtcblxuICAgICAgICAvLyAwIH4gbGVuIC0gbiDlj43ovaxcbiAgICAgICAgcmV2ZXJzZShzLDAsbGVuLW4tMSk7XG5cbiAgICAgICAgcmV0dXJuIHM7XG4gICAgfVxuXG4gICAgdm9pZCByZXZlcnNlKHN0cmluZyAmc3RyLGludCBsLGludCByKXtcbiAgICAgICAgZm9yKDtsPHI7KytsLC0tcil7XG4gICAgICAgICAgICBzd2FwKHN0cltsXSxzdHJbcl0pO1xuICAgICAgICB9XG4gICAgfVxufTtcblxuXG4xXG4yXG4zXG40XG41XG42XG43XG44XG45XG4xMFxuMTFcbjEyXG4xM1xuMTRcbjE1XG4xNlxuMTdcbjE4XG4xOVxuMjBcbjIxXG4yMlxuMjNcbjI0XG4yNVxuMjZcbjI3XG4yOFxuMjlcbjMwXG4zMVxuXG5cblxuIyDlvZXlkI7mg7Pms5Vcblxu5oCd6Lev5LiA6Ie04pyM77iPXG5cblxuIyDmgLvnu5NcblxuICog5YWz5LqOIGNoYXIq44CBY2hhciBbXSDkuI4gc3RyaW5nIOeahOWIneWni+WMluWPiui9rOaNolxuXG7liarmnp3mk43kvZznmoTnu4boioLlpb3pmr7vvIzov5jpnIDopoHlpJrliqDnu4PkuaDvvIEiLAogICAgImNoYXJzZXRzIjogewogICAgICAiY2prIjogdHJ1ZQogICAgfQogIH0sIHsKICAgICJ0aXRsZSI6ICJEYXkwNi3lk4jluIwiLAogICAgImZyb250bWF0dGVyIjogewogICAgICAidGl0bGUiOiAiRGF5MDYt5ZOI5biMIiwKICAgICAgImRhdGUiOiAiMjAyMy0wNS0zMFQwMToxMzowNi4wMDBaIiwKICAgICAgInBlcm1hbGluayI6ICIvcGFnZXMvNWQ0YTJmLyIsCiAgICAgICJjYXRlZ29yaWVzIjogWyLnrpfms5UiLCAi566X5rOV5omT5Y2hIl0sCiAgICAgICJ0YWdzIjogWyLmiZPljaEiXQogICAgfSwKICAgICJyZWd1bGFyUGF0aCI6ICIvMDIuJUU3JUFFJTk3JUU2JUIzJTk1LzAxLiVFNyVBRSU5NyVFNiVCMyU5NSVFNiU4OSU5MyVFNSU4RCVBMS8wNi5EYXkwNi0lRTUlOTMlODglRTUlQjglOEMuaHRtbCIsCiAgICAicmVsYXRpdmVQYXRoIjogIjAyLueul+azlS8wMS7nrpfms5XmiZPljaEvMDYuRGF5MDYt5ZOI5biMLm1kIiwKICAgICJrZXkiOiAidi0yNGY0MDNiOCIsCiAgICAicGF0aCI6ICIvcGFnZXMvNWQ0YTJmLyIsCiAgICAiaGVhZGVycyI6IFt7CiAgICAgICJsZXZlbCI6IDIsCiAgICAgICJ0aXRsZSI6ICI0NTQu5Zub5pWw55u45YqgSUkiLAogICAgICAic2x1ZyI6ICJfNDU0LeWbm+aVsOebuOWKoGlpIiwKICAgICAgIm5vcm1hbGl6ZWRUaXRsZSI6ICI0NTQuIOWbm+aVsOebuOWKoCBpaSIsCiAgICAgICJjaGFySW5kZXgiOiA0CiAgICB9LCB7CiAgICAgICJsZXZlbCI6IDMsCiAgICAgICJ0aXRsZSI6ICLlvZXliY3mg7Pms5UiLAogICAgICAic2x1ZyI6ICLlvZXliY3mg7Pms5UiLAogICAgICAibm9ybWFsaXplZFRpdGxlIjogIuW9leWJjeaDs+azlSIsCiAgICAgICJjaGFySW5kZXgiOiAxMzAKICAgIH0sIHsKICAgICAgImxldmVsIjogMywKICAgICAgInRpdGxlIjogIuW9leWQjuaDs+azlSIsCiAgICAgICJzbHVnIjogIuW9leWQjuaDs+azlSIsCiAgICAgICJub3JtYWxpemVkVGl0bGUiOiAi5b2V5ZCO5oOz5rOVIiwKICAgICAgImNoYXJJbmRleCI6IDg1MAogICAgfSwgewogICAgICAibGV2ZWwiOiAzLAogICAgICAidGl0bGUiOiAi5oC757uTIiwKICAgICAgInNsdWciOiAi5oC757uTIiwKICAgICAgIm5vcm1hbGl6ZWRUaXRsZSI6ICLmgLvnu5MiLAogICAgICAiY2hhckluZGV4IjogODY1CiAgICB9LCB7CiAgICAgICJsZXZlbCI6IDIsCiAgICAgICJ0aXRsZSI6ICIzODMuIOi1jumHkeS/oSIsCiAgICAgICJzbHVnIjogIl8zODMt6LWO6YeR5L+hIiwKICAgICAgIm5vcm1hbGl6ZWRUaXRsZSI6ICIzODMuIOi1jumHkeS/oSIsCiAgICAgICJjaGFySW5kZXgiOiAxOAogICAgfSwgewogICAgICAibGV2ZWwiOiAzLAogICAgICAidGl0bGUiOiAi5b2V5YmN5oOz5rOVIiwKICAgICAgInNsdWciOiAi5b2V5YmN5oOz5rOVLTIiLAogICAgICAibm9ybWFsaXplZFRpdGxlIjogIuW9leWJjeaDs+azlSIsCiAgICAgICJjaGFySW5kZXgiOiAxMzAKICAgIH0sIHsKICAgICAgImxldmVsIjogMywKICAgICAgInRpdGxlIjogIuW9leWQjuaDs+azlSIsCiAgICAgICJzbHVnIjogIuW9leWQjuaDs+azlS0yIiwKICAgICAgIm5vcm1hbGl6ZWRUaXRsZSI6ICLlvZXlkI7mg7Pms5UiLAogICAgICAiY2hhckluZGV4IjogODUwCiAgICB9LCB7CiAgICAgICJsZXZlbCI6IDMsCiAgICAgICJ0aXRsZSI6ICLmgLvnu5MiLAogICAgICAic2x1ZyI6ICLmgLvnu5MtMiIsCiAgICAgICJub3JtYWxpemVkVGl0bGUiOiAi5oC757uTIiwKICAgICAgImNoYXJJbmRleCI6IDg2NQogICAgfSwgewogICAgICAibGV2ZWwiOiAyLAogICAgICAidGl0bGUiOiAiMTUuIOS4ieaVsOS5i+WSjCIsCiAgICAgICJzbHVnIjogIl8xNS3kuInmlbDkuYvlkowiLAogICAgICAibm9ybWFsaXplZFRpdGxlIjogIjE1LiDkuInmlbDkuYvlkowiLAogICAgICAiY2hhckluZGV4IjogMjgKICAgIH0sIHsKICAgICAgImxldmVsIjogMywKICAgICAgInRpdGxlIjogIuW9leWJjeaDs+azlSIsCiAgICAgICJzbHVnIjogIuW9leWJjeaDs+azlS0zIiwKICAgICAgIm5vcm1hbGl6ZWRUaXRsZSI6ICLlvZXliY3mg7Pms5UiLAogICAgICAiY2hhckluZGV4IjogMTMwCiAgICB9LCB7CiAgICAgICJsZXZlbCI6IDMsCiAgICAgICJ0aXRsZSI6ICLlvZXlkI7mg7Pms5UiLAogICAgICAic2x1ZyI6ICLlvZXlkI7mg7Pms5UtMyIsCiAgICAgICJub3JtYWxpemVkVGl0bGUiOiAi5b2V5ZCO5oOz5rOVIiwKICAgICAgImNoYXJJbmRleCI6IDg1MAogICAgfSwgewogICAgICAibGV2ZWwiOiAzLAogICAgICAidGl0bGUiOiAi5oC757uTIiwKICAgICAgInNsdWciOiAi5oC757uTLTMiLAogICAgICAibm9ybWFsaXplZFRpdGxlIjogIuaAu+e7kyIsCiAgICAgICJjaGFySW5kZXgiOiA4NjUKICAgIH0sIHsKICAgICAgImxldmVsIjogMiwKICAgICAgInRpdGxlIjogIjE4LiDlm5vmlbDkuYvlkowiLAogICAgICAic2x1ZyI6ICJfMTgt5Zub5pWw5LmL5ZKMIiwKICAgICAgIm5vcm1hbGl6ZWRUaXRsZSI6ICIxOC4g5Zub5pWw5LmL5ZKMIiwKICAgICAgImNoYXJJbmRleCI6IDQ0CiAgICB9LCB7CiAgICAgICJsZXZlbCI6IDMsCiAgICAgICJ0aXRsZSI6ICLlvZXliY3mg7Pms5UiLAogICAgICAic2x1ZyI6ICLlvZXliY3mg7Pms5UtNCIsCiAgICAgICJub3JtYWxpemVkVGl0bGUiOiAi5b2V5YmN5oOz5rOVIiwKICAgICAgImNoYXJJbmRleCI6IDEzMAogICAgfSwgewogICAgICAibGV2ZWwiOiAzLAogICAgICAidGl0bGUiOiAi5b2V5ZCO5oOz5rOVIiwKICAgICAgInNsdWciOiAi5b2V5ZCO5oOz5rOVLTQiLAogICAgICAibm9ybWFsaXplZFRpdGxlIjogIuW9leWQjuaDs+azlSIsCiAgICAgICJjaGFySW5kZXgiOiA4NTAKICAgIH0sIHsKICAgICAgImxldmVsIjogMywKICAgICAgInRpdGxlIjogIuaAu+e7kyIsCiAgICAgICJzbHVnIjogIuaAu+e7ky00IiwKICAgICAgIm5vcm1hbGl6ZWRUaXRsZSI6ICLmgLvnu5MiLAogICAgICAiY2hhckluZGV4IjogODY1CiAgICB9LCB7CiAgICAgICJsZXZlbCI6IDIsCiAgICAgICJ0aXRsZSI6ICLmgLvnu5MiLAogICAgICAic2x1ZyI6ICLmgLvnu5MtNSIsCiAgICAgICJub3JtYWxpemVkVGl0bGUiOiAi5oC757uTIiwKICAgICAgImNoYXJJbmRleCI6IDg2NQogICAgfV0sCiAgICAiZXhjZXJwdCI6ICI8ZGl2IGNsYXNzPVwiY3VzdG9tLWJsb2NrIHRpcFwiPjxwIGNsYXNzPVwiY3VzdG9tLWJsb2NrLXRpdGxlXCI+5o+Q56S6PC9wPlxuPHA+NDU0LiDlm5vmlbDnm7jliqAgSUnjgIEgMzgzLiDotY7ph5Hkv6HjgIEgMTUuIOS4ieaVsOS5i+WSjCA8Y29kZT7jgJDlvojpmr7jgJE8L2NvZGU+ICAg44CBIDE4LiDlm5vmlbDkuYvlkowgPGNvZGU+44CQ5b6I6Zq+44CRPC9jb2RlPjwvcD5cbjwvZGl2PlxuIiwKICAgICJsYXN0VXBkYXRlZCI6ICI2LzIvMjAyMywgNjozNDowMCBQTSIsCiAgICAibGFzdFVwZGF0ZWRUaW1lc3RhbXAiOiAxNjg1NzAyMDQwMDAwLAogICAgImhlYWRlcnNTdHIiOiAiNDU0LuWbm+aVsOebuOWKoElJIOW9leWJjeaDs+azlSDlvZXlkI7mg7Pms5Ug5oC757uTIDM4My4g6LWO6YeR5L+hIOW9leWJjeaDs+azlSDlvZXlkI7mg7Pms5Ug5oC757uTIDE1LiDkuInmlbDkuYvlkowg5b2V5YmN5oOz5rOVIOW9leWQjuaDs+azlSDmgLvnu5MgMTguIOWbm+aVsOS5i+WSjCDlvZXliY3mg7Pms5Ug5b2V5ZCO5oOz5rOVIOaAu+e7kyDmgLvnu5MiLAogICAgImNvbnRlbnQiOiAi5o+Q56S6XG5cbjQ1NC4g5Zub5pWw55u45YqgIElJ44CBIDM4My4g6LWO6YeR5L+h44CBIDE1LiDkuInmlbDkuYvlkowg44CQ5b6I6Zq+44CRIOOAgSAxOC4g5Zub5pWw5LmL5ZKMIOOAkOW+iOmavuOAkVxuXG5cbiMgNDU0LiDlm5vmlbDnm7jliqAgSUlcblxuICog6aKY55uu77yaNDU0LiDlm5vmlbDnm7jliqAgSUlcblxuICog6K6y6Kej77ya5paH56ug6K6y6Kej44CB6KeG6aKR6K6y6KejXG5cbiAqIOimgeaxgu+8mm1hcCDlt6fop6NcblxuXG4jIOW9leWJjeaDs+azlVxuXG7lgZrov4fvvIzorrDlvpfmgJ3ot6/vvIzkuKTkuKrkuLrkuIDnu4TorrDlvZXkuLogTUFQIOeahCBLZXnvvIzlho3kuKTkuKrkuIDnu4TorrDlvZXkuLogTUFQIOeahCAtIEtleVxuXG7kuIvpnaLmmK/lrp7njrDku6PnoIHvvIzlt7IgQUMgKOKclO+4jylcblxuY2xhc3MgU29sdXRpb24ge1xucHVibGljOlxuICAgIGludCBmb3VyU3VtQ291bnQodmVjdG9yPGludD4mIG51bXMxLCB2ZWN0b3I8aW50PiYgbnVtczIsIHZlY3RvcjxpbnQ+JiBudW1zMywgdmVjdG9yPGludD4mIG51bXM0KSB7XG5cbiAgICAgICAgLy8g5Yib5bu6bWFwXG4gICAgICAgIHVub3JkZXJlZF9tYXA8aW50LGludD4gbWFwO1xuICAgICAgICBcbiAgICAgICAgaW50IGFucyA9IDA7XG5cbiAgICAgICAgLy8g56ys5LiA57uE5b6q546vXG4gICAgICAgIGZvcihpbnQgbnVtMSA6IG51bXMxKXtcbiAgICAgICAgICAgIGZvcihpbnQgbnVtMiA6IG51bXMyKXtcbiAgICAgICAgICAgICAgICBtYXBbbnVtMStudW0yXSsrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8g56ys5LqM57uE5b6q546vXG4gICAgICAgIGZvcihpbnQgbnVtMyA6IG51bXMzKXtcbiAgICAgICAgICAgIGZvcihpbnQgbnVtNCA6IG51bXM0KXtcbiAgICAgICAgICAgICAgICBhbnMgKz0gbWFwWy0obnVtMytudW00KV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gYW5zO1xuICAgIH1cbn07XG5cblxuMVxuMlxuM1xuNFxuNVxuNlxuN1xuOFxuOVxuMTBcbjExXG4xMlxuMTNcbjE0XG4xNVxuMTZcbjE3XG4xOFxuMTlcbjIwXG4yMVxuMjJcbjIzXG4yNFxuMjVcbjI2XG5cbiAqIOaXtumXtOWkjeadguW6pjogTyAobl4yKVxuICog56m66Ze05aSN5p2C5bqmOiBPIChuXjIpXG5cblxuIyDlvZXlkI7mg7Pms5Vcblxu5LiA6Ie04pyM77iPXG5cblxuIyDmgLvnu5Ncblxu5pegXG5cblxuIyAzODMuIOi1jumHkeS/oVxuXG4gKiDpopjnm67vvJozODMuIOi1jumHkeS/oVxuXG4gKiDorrLop6PvvJrmlofnq6DorrLop6NcblxuICog6KaB5rGC77ya5ZKM5LiK5LiA6aKY5ZCM5oCd6LevXG5cblxuIyDlvZXliY3mg7Pms5Vcblxu5LiO5LiK5LiA6aKY5oCd6Lev5LiA6Ie077yM5beyIEFDICjinJTvuI8pXG5cbmNsYXNzIFNvbHV0aW9uIHtcbnB1YmxpYzpcbiAgICBib29sIGNhbkNvbnN0cnVjdChzdHJpbmcgcmFuc29tTm90ZSwgc3RyaW5nIG1hZ2F6aW5lKSB7XG5cbiAgICAgICAgLy8g5Yib5bu6bWFwXG4gICAgICAgIHVub3JkZXJlZF9tYXA8Y2hhcixpbnQ+IG1hcDtcblxuICAgICAgICAvLyDmlL7lhaVyYW5zb21Ob3RlXG4gICAgICAgIGZvcihpbnQgaSA9IDA7IGkgPCByYW5zb21Ob3RlLnNpemUoKTsgKytpKXtcbiAgICAgICAgICAgIG1hcFtyYW5zb21Ob3RlW2ldXSsrO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8g5Ye6bWFnYXppbmVcbiAgICAgICAgZm9yKGludCBpID0gMDsgaSA8IG1hZ2F6aW5lLnNpemUoKTsgKytpKXtcbiAgICAgICAgICAgIG1hcFttYWdhemluZVtpXV0tLTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvcihpbnQgaSA9IDA7IGkgPCByYW5zb21Ob3RlLnNpemUoKTsgKytpKXtcbiAgICAgICAgICAgIGlmKG1hcFtyYW5zb21Ob3RlW2ldXSA+IDApe1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIOWIpOaWreaYr+WQpuWFqOmDqOWHuuWujFxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG59O1xuXG5cbjFcbjJcbjNcbjRcbjVcbjZcbjdcbjhcbjlcbjEwXG4xMVxuMTJcbjEzXG4xNFxuMTVcbjE2XG4xN1xuMThcbjE5XG4yMFxuMjFcbjIyXG4yM1xuMjRcbjI1XG4yNlxuMjdcblxuICog5pe26Ze05aSN5p2C5bqmOiBPIChuKVxuICog56m66Ze05aSN5p2C5bqmOiBPICgxKVxuXG5cbiMg5b2V5ZCO5oOz5rOVXG5cbm1hcCDnmoTnqbrpl7TmtojogJfopoHmr5TmlbDnu4TlpKfkuIDkupvnmoTvvIzlm6DkuLogbWFwIOimgee7tOaKpOe6oum7keagkeaIluiAheWTiOW4jOihqO+8jOiAjOS4lOi/mOimgeWBmuWTiOW4jOWHveaVsO+8jOaYr+i0ueaXtueahFxuXG7kvb/nlKjmlbDnu4TkvJroioLnnIHnqbrpl7RcblxuY2xhc3MgU29sdXRpb24ge1xucHVibGljOlxuICAgIGJvb2wgY2FuQ29uc3RydWN0KHN0cmluZyByYW5zb21Ob3RlLCBzdHJpbmcgbWFnYXppbmUpIHtcblxuICAgICAgICAvLyDliJvlu7ptYXBcbiAgICAgICAgaW50IGFyclsyNl0gPSB7MH07XG5cbiAgICAgICAgLy8g5pS+5YWlcmFuc29tTm90ZVxuICAgICAgICBmb3IoaW50IGkgPSAwOyBpIDwgbWFnYXppbmUuc2l6ZSgpOyArK2kpe1xuICAgICAgICAgICAgYXJyW21hZ2F6aW5lW2ldIC0gJ2EnXSsrO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8g5Ye6bWFnYXppbmVcbiAgICAgICAgZm9yKGludCBpID0gMDsgaSA8IHJhbnNvbU5vdGUuc2l6ZSgpOyArK2kpe1xuICAgICAgICAgICAgYXJyW3JhbnNvbU5vdGVbaV0gLSAnYSddLS07XG5cbiAgICAgICAgICAgIGlmKGFycltyYW5zb21Ob3RlW2ldIC0gJ2EnXSA8IDApe1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIOWIpOaWreaYr+WQpuWFqOmDqOWHuuWujFxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG59O1xuXG5cbjFcbjJcbjNcbjRcbjVcbjZcbjdcbjhcbjlcbjEwXG4xMVxuMTJcbjEzXG4xNFxuMTVcbjE2XG4xN1xuMThcbjE5XG4yMFxuMjFcbjIyXG4yM1xuMjRcbjI1XG5cbiAqIOaXtumXtOWkjeadguW6pjogTyAobilcbiAqIOepuumXtOWkjeadguW6pjogTyAoMSlcblxuXG4jIOaAu+e7k1xuXG5tYXAg5Zu654S25aW977yM5L2G5Lmf5byA6ZSA5aSnXG5cblxuIyAxNS4g5LiJ5pWw5LmL5ZKMXG5cbiAqIOmimOebru+8mjE1LiDkuInmlbDkuYvlkoxcblxuICog6K6y6Kej77ya5paH56ug6K6y6Kej44CB6KeG6aKR6K6y6KejXG5cbiAqIOimgeaxgu+8muWPjOaMh+mSiFxuXG5cbiMg5b2V5YmN5oOz5rOVXG5cbuWPquaDs+WIsOS6huaatOWKm+eahOino+azle+8jOWPjOaMh+mSiOayoeaDs+OAguOAguOAglxuXG5cbiMg5b2V5ZCO5oOz5rOVXG5cbueci+i/h+WNoeWTpeeahOiusuino+inhumikeWQju+8jOaVtOeQhuWHuuS7peS4i+WunueOsOaAnei3r++8mlxuXG4gKiBpIOehruWumiBudW1zIFtpXe+8jOWQkeWQjuenu+WKqFxuICogbGVmdCDlkowgcmlnaHQg56Gu5a6aIG51bXMgW2xlZnRdIOWSjCBudW1zIFtyaWdodF3vvIzlkJHkuK3pl7TnvKlcblxuY2xhc3MgU29sdXRpb24ge1xucHVibGljOlxuICAgIHZlY3Rvcjx2ZWN0b3I8aW50Pj4gdGhyZWVTdW0odmVjdG9yPGludD4mIG51bXMpIHtcbiAgICAgICAgXG4gICAgICAgIC8vIOWIm+W7uuS6jOS9jeaVsOe7hOe7k+aenOmbhuWQiFxuXG4gICAgICAgIC8vIOaOkuW6j1xuXG4gICAgICAgIC8vIOmBjeWOhlxuXG4gICAgICAgICAgICAvLyDlr7lp5Y676YeNXG5cbiAgICAgICAgICAgIC8vIOS4ieaVsOS5i+WSjCA+IDBcbiAgICAgICAgICAgICAgICAvLyByaWdodC0tXG5cbiAgICAgICAgICAgIC8vIOS4ieaVsOS5i+WSjCA8IDBcbiAgICAgICAgICAgICAgICAvLyBsZWZ0KytcblxuICAgICAgICAgICAgLy8g5LiJ5pWw5LmL5ZKMID0gMFxuICAgICAgICAgICAgICAgIC8vIOaUtumbhue7k+aenFxuXG4gICAgICAgICAgICAgICAgLy8g5a+5bGVmdOWOu+mHjVxuXG4gICAgICAgICAgICAgICAgLy8g5a+5cmlnaHTljrvph41cbiAgICAgICAgICAgIFxuICAgICAgICAvLyDov5Tlm57nu5Pmnpzpm4blkIhcbiAgICB9XG59O1xuXG5cbjFcbjJcbjNcbjRcbjVcbjZcbjdcbjhcbjlcbjEwXG4xMVxuMTJcbjEzXG4xNFxuMTVcbjE2XG4xN1xuMThcbjE5XG4yMFxuMjFcbjIyXG4yM1xuMjRcbjI1XG4yNlxuMjdcbjI4XG5cblxu5Lul5LiL5piv5pyA57uI5a6e546w55qE5Luj56CB77yM5beyIEFDICjinJTvuI8p77yaXG5cbmNsYXNzIFNvbHV0aW9uIHtcbnB1YmxpYzpcbiAgICB2ZWN0b3I8dmVjdG9yPGludD4+IHRocmVlU3VtKHZlY3RvcjxpbnQ+JiBudW1zKSB7XG4gICAgICAgIFxuICAgICAgICAvLyDliJvlu7rkuozkvY3mlbDnu4Tnu5Pmnpzpm4blkIhcbiAgICAgICAgdmVjdG9yPHZlY3RvcjxpbnQ+PiByZXN1bHQ7XG4gICAgICAgIGludCBsZWZ0LHJpZ2h0O1xuXG4gICAgICAgIC8vIOaOkuW6j1xuICAgICAgICBzb3J0KG51bXMuYmVnaW4oKSwgbnVtcy5lbmQoKSk7XG5cbiAgICAgICAgLy8g6YGN5Y6GXG4gICAgICAgIGZvcihpbnQgaSA9IDA7IGkgPCBudW1zLnNpemUoKTsgKytpKXtcblxuICAgICAgICAgICAgaWYobnVtc1tpXSA+IDApe3JldHVybiByZXN1bHQ7fVxuXG4gICAgICAgICAgICAvLyDlr7lp5Y676YeNXG4gICAgICAgICAgICBpZihpID4gMCAmJiBudW1zW2ldID09IG51bXNbaS0xXSl7Y29udGludWU7fVxuXG4gICAgICAgICAgICAvLyDliJvlu7rlj4zmjIfpkohcbiAgICAgICAgICAgIGxlZnQgPSBpICsgMTtcbiAgICAgICAgICAgIHJpZ2h0ID0gbnVtcy5zaXplKCkgLSAxO1xuXG4gICAgICAgICAgICB3aGlsZShsZWZ0IDwgcmlnaHQpe1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vIOaxguWSjFxuICAgICAgICAgICAgICAgIGludCB0bXAgPSBudW1zW2ldICsgbnVtc1tsZWZ0XSArIG51bXNbcmlnaHRdO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGlmKHRtcCA+IDApey8vIOS4ieaVsOS5i+WSjCA+IDBcbiAgICAgICAgICAgICAgICAgICAgLy8gcmlnaHQtLVxuICAgICAgICAgICAgICAgICAgICByaWdodC0tO1xuICAgICAgICAgICAgICAgIH1lbHNlIGlmKHRtcCA8IDApey8vIOS4ieaVsOS5i+WSjCA8IDBcbiAgICAgICAgICAgICAgICAgICAgLy8gbGVmdCsrXG4gICAgICAgICAgICAgICAgICAgIGxlZnQrKztcbiAgICAgICAgICAgICAgICB9ZWxzZXsvLyDkuInmlbDkuYvlkowgPSAwXG4gICAgICAgICAgICAgICAgICAgIC8vIOaUtumbhue7k+aenFxuICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaF9iYWNrKHZlY3RvcjxpbnQ+e251bXNbaV0sbnVtc1tsZWZ0XSxudW1zW3JpZ2h0XX0pO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIOWvuWxlZnTljrvph41cbiAgICAgICAgICAgICAgICAgICAgd2hpbGUobGVmdCA8IHJpZ2h0ICYmIG51bXNbbGVmdF0gPT0gbnVtc1tsZWZ0ICsgMV0pe1xuICAgICAgICAgICAgICAgICAgICAgICAgbGVmdCsrO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgLy8g5a+5cmlnaHTljrvph41cbiAgICAgICAgICAgICAgICAgICAgd2hpbGUobGVmdCA8IHJpZ2h0ICYmIG51bXNbcmlnaHRdID09IG51bXNbcmlnaHQgLSAxXSl7XG4gICAgICAgICAgICAgICAgICAgICAgICByaWdodC0tO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgLy8g5ZCM5pe257yp5bCPXG4gICAgICAgICAgICAgICAgICAgIGxlZnQrKztcbiAgICAgICAgICAgICAgICAgICAgcmlnaHQtLTtcbiAgICAgICAgICAgICAgICB9IFxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgLy8g6L+U5Zue57uT5p6c6ZuG5ZCIXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxufTtcblxuXG4xXG4yXG4zXG40XG41XG42XG43XG44XG45XG4xMFxuMTFcbjEyXG4xM1xuMTRcbjE1XG4xNlxuMTdcbjE4XG4xOVxuMjBcbjIxXG4yMlxuMjNcbjI0XG4yNVxuMjZcbjI3XG4yOFxuMjlcbjMwXG4zMVxuMzJcbjMzXG4zNFxuMzVcbjM2XG4zN1xuMzhcbjM5XG40MFxuNDFcbjQyXG40M1xuNDRcbjQ1XG40NlxuNDdcbjQ4XG40OVxuNTBcbjUxXG41MlxuNTNcbjU0XG41NVxuNTZcbjU3XG41OFxuNTlcblxuXG5cbiMg5oC757uTXG5cbiAqIOimgeazqOaEj+WOu+mHjeeahOe7huiKglxuICog5Y+M5oyH6ZKI5pS257ypXG5cblxuIyAxOC4g5Zub5pWw5LmL5ZKMXG5cbiAqIOmimOebru+8mjE4LiDlm5vmlbDkuYvlkoxcbiAqIOiusuino++8muaWh+eroOiusuino+OAgeinhumikeiusuino1xuICog6KaB5rGC77yaXG4gICAqIDEuIOS4uuS7gOS5iCA0NTQuIOWbm+aVsOebuOWKoCBJSSDkvJrnroDljZXlvojlpJrvvJ9cbiAgICAgMi4g5Y+M5oyH6ZKIXG5cblxuIyDlvZXliY3mg7Pms5Vcblxu5ZKM5LiJ5pWw5LmL5ZKM55qE5oCd6Lev55u45Ly877yM5a2m5Lmg5a6M5LiJ5pWw5LmL5ZKM5pyJ5oCd6Lev5YaZ5Ye65Luj56CB77yM5beyIEFDICjinJTvuI8pXG5cbmNsYXNzIFNvbHV0aW9uIHtcbnB1YmxpYzpcbiAgICB2ZWN0b3I8dmVjdG9yPGludD4+IGZvdXJTdW0odmVjdG9yPGludD4mIG51bXMsIGludCB0YXJnZXQpIHtcblxuICAgICAgICBpbnQgc2l6ZSA9IG51bXMuc2l6ZSgpOyAgICAgLy8g6I635Y+W5pWw57uE6ZW/5bqmXG4gICAgICAgIHZlY3Rvcjx2ZWN0b3I8aW50Pj4gcmVzdWx0OyAvLyDnu5Pmnpzpm4blkIhcbiAgICAgICAgbG9uZyB0bXBTdW0gPSAwOyAgICAgICAgICAgICAvLyDmmK/mlbDkuYvlkoxcbiAgICAgICAgaW50IGxlZnQscmlnaHQ7ICAgICAgICAgICAgIC8vIOWPjOaMh+mSiFxuXG4gICAgICAgIC8vIOWwj+S6jjTliKTmlq1cbiAgICAgICAgaWYgKHNpemUgPCA0KSB7IHJldHVybiByZXN1bHQ7IH1cblxuICAgICAgICAvLyDmjpLluo9cbiAgICAgICAgc29ydChudW1zLmJlZ2luKCksIG51bXMuZW5kKCkpO1xuXG4gICAgICAgIC8vIOW+queOr2FcbiAgICAgICAgZm9yKGludCBhID0gMDsgYSA8IHNpemUgLSAzOyArK2Epe1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyDlr7lh5Y676YeNXG4gICAgICAgICAgICBpZihhID4gMCAmJiBudW1zW2FdID09IG51bXNbYS0xXSl7Y29udGludWU7fVxuXG4gICAgICAgICAgICAvLyDlvqrnjq9iXG4gICAgICAgICAgICBmb3IoaW50IGIgPSBhICsgMTsgYiA8IHNpemUgLSAyOyArK2Ipe1xuXG4gICAgICAgICAgICAgICAgLy8g5a+5YuWOu+mHjVxuICAgICAgICAgICAgICAgIGlmKGIgPiBhICsgMSAmJiBudW1zW2JdID09IG51bXNbYi0xXSl7Y29udGludWU7fVxuXG4gICAgICAgICAgICAgICAgLy8g5Y+M5oyH6ZKIXG4gICAgICAgICAgICAgICAgbGVmdCA9IGIgKyAxO1xuICAgICAgICAgICAgICAgIHJpZ2h0ID0gc2l6ZSAtIDE7XG5cbiAgICAgICAgICAgICAgICAvLyDlj4zmjIfpkojnp7vliqhcbiAgICAgICAgICAgICAgICB3aGlsZShsZWZ0IDwgcmlnaHQpe1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIOaxguWSjFxuICAgICAgICAgICAgICAgICAgICB0bXBTdW0gPSAobG9uZyludW1zW2FdK251bXNbYl0rbnVtc1tsZWZ0XStudW1zW3JpZ2h0XTtcblxuICAgICAgICAgICAgICAgICAgICAvLyDlr7nmr5R0YXJnZXRcbiAgICAgICAgICAgICAgICAgICAgaWYodG1wU3VtID4gdGFyZ2V0KXtcbiAgICAgICAgICAgICAgICAgICAgICAgIC0tcmlnaHQ7XG4gICAgICAgICAgICAgICAgICAgIH1lbHNlIGlmKHRtcFN1bSA8IHRhcmdldCl7XG4gICAgICAgICAgICAgICAgICAgICAgICArK2xlZnQ7XG4gICAgICAgICAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2hfYmFjayh2ZWN0b3I8aW50PntudW1zW2FdLG51bXNbYl0sbnVtc1tsZWZ0XSxudW1zW3JpZ2h0XX0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBsZWZ0IOWOu+mHjVxuICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUobGVmdCA8IHJpZ2h0ICYmIG51bXNbbGVmdF0gPT0gbnVtc1tsZWZ0KzFdKXsrK2xlZnQ7fVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyByaWdodOWOu+mHjVxuICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUobGVmdCA8IHJpZ2h0ICYmIG51bXNbcmlnaHRdID09IG51bXNbcmlnaHQtMV0pey0tcmlnaHQ7fVxuXG4gICAgICAgICAgICAgICAgICAgICAgICArK2xlZnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAtLXJpZ2h0O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG59O1xuXG5cbjFcbjJcbjNcbjRcbjVcbjZcbjdcbjhcbjlcbjEwXG4xMVxuMTJcbjEzXG4xNFxuMTVcbjE2XG4xN1xuMThcbjE5XG4yMFxuMjFcbjIyXG4yM1xuMjRcbjI1XG4yNlxuMjdcbjI4XG4yOVxuMzBcbjMxXG4zMlxuMzNcbjM0XG4zNVxuMzZcbjM3XG4zOFxuMzlcbjQwXG40MVxuNDJcbjQzXG40NFxuNDVcbjQ2XG40N1xuNDhcbjQ5XG41MFxuNTFcbjUyXG41M1xuNTRcbjU1XG41NlxuNTdcbjU4XG41OVxuNjBcbjYxXG5cblxuXG4jIOW9leWQjuaDs+azlVxuXG7liarmnp3nmoTnu4boioLmk43kvZzvvIzlj7nmnI1cblxu5pW055CG5a6M5ZCO77yM5YaZ5Ye65Lul5LiL5Luj56CB77yM5beyIEFDICjinJTvuI8pXG5cbiAqIOaxguWSjOaXtiBsb25nIOexu+Wei++8jOmYsuatoua6ouWHulxuXG5jbGFzcyBTb2x1dGlvbiB7XG5wdWJsaWM6XG4gICAgdmVjdG9yPHZlY3RvcjxpbnQ+PiBmb3VyU3VtKHZlY3RvcjxpbnQ+JiBudW1zLCBpbnQgdGFyZ2V0KSB7XG5cbiAgICAgICAgaW50IHNpemUgPSBudW1zLnNpemUoKTsgICAgIC8vIOiOt+WPluaVsOe7hOmVv+W6plxuICAgICAgICB2ZWN0b3I8dmVjdG9yPGludD4+IHJlc3VsdDsgLy8g57uT5p6c6ZuG5ZCIXG4gICAgICAgIGxvbmcgdG1wU3VtID0gMDsgICAgICAgICAgICAgLy8g5piv5pWw5LmL5ZKMIGxvbmfpmLLmraLmuqLlh7pcbiAgICAgICAgaW50IGxlZnQscmlnaHQ7ICAgICAgICAgICAgIC8vIOWPjOaMh+mSiFxuXG4gICAgICAgIC8vIOWwj+S6jjTliKTmlq1cbiAgICAgICAgaWYgKHNpemUgPCA0KSB7IHJldHVybiByZXN1bHQ7IH1cblxuICAgICAgICAvLyDmjpLluo9cbiAgICAgICAgc29ydChudW1zLmJlZ2luKCksIG51bXMuZW5kKCkpO1xuXG4gICAgICAgIC8vIOW+queOr2FcbiAgICAgICAgZm9yKGludCBhID0gMDsgYSA8IHNpemUgLSAzOyArK2Epe1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyDlr7lh5Y676YeNXG4gICAgICAgICAgICBpZihhID4gMCAmJiBudW1zW2FdID09IG51bXNbYS0xXSl7Y29udGludWU7fVxuXG4gICAgICAgICAgICAvLyDlvqrnjq9iXG4gICAgICAgICAgICBmb3IoaW50IGIgPSBhICsgMTsgYiA8IHNpemUgLSAyOyArK2Ipe1xuXG4gICAgICAgICAgICAgICAgLy8g5a+5YuWOu+mHjVxuICAgICAgICAgICAgICAgIGlmKGIgPiBhICsgMSAmJiBudW1zW2JdID09IG51bXNbYi0xXSl7Y29udGludWU7fVxuXG4gICAgICAgICAgICAgICAgLy8g5LiA5bGC5Ymq5p6dXG4gICAgICAgICAgICAgICAgaWYobnVtc1thXStudW1zW2JdID4gMCAmJiB0YXJnZXQgPiAwICYmIG51bXNbYV0rbnVtc1tiXT50YXJnZXQpe2JyZWFrO31cbiAgICAgICAgICAgICAgICAvLyDlj4zmjIfpkohcbiAgICAgICAgICAgICAgICBsZWZ0ID0gYiArIDE7XG4gICAgICAgICAgICAgICAgcmlnaHQgPSBzaXplIC0gMTtcblxuICAgICAgICAgICAgICAgIC8vIOWPjOaMh+mSiOenu+WKqFxuICAgICAgICAgICAgICAgIHdoaWxlKGxlZnQgPCByaWdodCl7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8g5rGC5ZKMXG4gICAgICAgICAgICAgICAgICAgIHRtcFN1bSA9IChsb25nKW51bXNbYV0rbnVtc1tiXStudW1zW2xlZnRdK251bXNbcmlnaHRdO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIOWvueavlHRhcmdldFxuICAgICAgICAgICAgICAgICAgICBpZih0bXBTdW0gPiB0YXJnZXQpe1xuICAgICAgICAgICAgICAgICAgICAgICAgLS1yaWdodDtcbiAgICAgICAgICAgICAgICAgICAgfWVsc2UgaWYodG1wU3VtIDwgdGFyZ2V0KXtcbiAgICAgICAgICAgICAgICAgICAgICAgICsrbGVmdDtcbiAgICAgICAgICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaF9iYWNrKHZlY3RvcjxpbnQ+e251bXNbYV0sbnVtc1tiXSxudW1zW2xlZnRdLG51bXNbcmlnaHRdfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGxlZnQg5Y676YeNXG4gICAgICAgICAgICAgICAgICAgICAgICB3aGlsZShsZWZ0IDwgcmlnaHQgJiYgbnVtc1tsZWZ0XSA9PSBudW1zW2xlZnQrMV0peysrbGVmdDt9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHJpZ2h05Y676YeNXG4gICAgICAgICAgICAgICAgICAgICAgICB3aGlsZShsZWZ0IDwgcmlnaHQgJiYgbnVtc1tyaWdodF0gPT0gbnVtc1tyaWdodC0xXSl7LS1yaWdodDt9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICsrbGVmdDtcbiAgICAgICAgICAgICAgICAgICAgICAgIC0tcmlnaHQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbn07XG5cblxuMVxuMlxuM1xuNFxuNVxuNlxuN1xuOFxuOVxuMTBcbjExXG4xMlxuMTNcbjE0XG4xNVxuMTZcbjE3XG4xOFxuMTlcbjIwXG4yMVxuMjJcbjIzXG4yNFxuMjVcbjI2XG4yN1xuMjhcbjI5XG4zMFxuMzFcbjMyXG4zM1xuMzRcbjM1XG4zNlxuMzdcbjM4XG4zOVxuNDBcbjQxXG40MlxuNDNcbjQ0XG40NVxuNDZcbjQ3XG40OFxuNDlcbjUwXG41MVxuNTJcbjUzXG41NFxuNTVcbjU2XG41N1xuNThcbjU5XG42MFxuNjFcbjYyXG42M1xuXG5cblxuIyDmgLvnu5NcblxuICog57uG6IqC55qE5Ymq5p6d5pON5L2cXG5cblxuIyDmgLvnu5Ncblxu5LiJ5pWw5LmL5ZKM5LiO5Zub5pWw5LmL5ZKM5aSq6Zq+5LqG77yM57uG6IqC5LiK55qE5pON5L2c5b6I5aSa77yM5L6n6Z2i5Lmf5Y+N5pig5a+55Luj56CB55qE5o6M5o+h5LiN6Laz77yM57un57ut5Yi377yBIiwKICAgICJub3JtYWxpemVkQ29udGVudCI6ICLmj5DnpLpcblxuNDU0LiDlm5vmlbDnm7jliqAgaWnjgIEgMzgzLiDotY7ph5Hkv6HjgIEgMTUuIOS4ieaVsOS5i+WSjCDjgJDlvojpmr7jgJEg44CBIDE4LiDlm5vmlbDkuYvlkowg44CQ5b6I6Zq+44CRXG5cblxuIyA0NTQuIOWbm+aVsOebuOWKoCBpaVxuXG4gKiDpopjnm67vvJo0NTQuIOWbm+aVsOebuOWKoCBpaVxuXG4gKiDorrLop6PvvJrmlofnq6DorrLop6PjgIHop4bpopHorrLop6NcblxuICog6KaB5rGC77yabWFwIOW3p+ino1xuXG5cbiMg5b2V5YmN5oOz5rOVXG5cbuWBmui/h++8jOiusOW+l+aAnei3r++8jOS4pOS4quS4uuS4gOe7hOiusOW9leS4uiBtYXAg55qEIGtlee+8jOWGjeS4pOS4quS4gOe7hOiusOW9leS4uiBtYXAg55qEIC0ga2V5XG5cbuS4i+mdouaYr+WunueOsOS7o+egge+8jOW3siBhYyAo4pyU77iPKVxuXG5jbGFzcyBzb2x1dGlvbiB7XG5wdWJsaWM6XG4gICAgaW50IGZvdXJzdW1jb3VudCh2ZWN0b3I8aW50PiYgbnVtczEsIHZlY3RvcjxpbnQ+JiBudW1zMiwgdmVjdG9yPGludD4mIG51bXMzLCB2ZWN0b3I8aW50PiYgbnVtczQpIHtcblxuICAgICAgICAvLyDliJvlu7ptYXBcbiAgICAgICAgdW5vcmRlcmVkX21hcDxpbnQsaW50PiBtYXA7XG4gICAgICAgIFxuICAgICAgICBpbnQgYW5zID0gMDtcblxuICAgICAgICAvLyDnrKzkuIDnu4Tlvqrnjq9cbiAgICAgICAgZm9yKGludCBudW0xIDogbnVtczEpe1xuICAgICAgICAgICAgZm9yKGludCBudW0yIDogbnVtczIpe1xuICAgICAgICAgICAgICAgIG1hcFtudW0xK251bTJdKys7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyDnrKzkuoznu4Tlvqrnjq9cbiAgICAgICAgZm9yKGludCBudW0zIDogbnVtczMpe1xuICAgICAgICAgICAgZm9yKGludCBudW00IDogbnVtczQpe1xuICAgICAgICAgICAgICAgIGFucyArPSBtYXBbLShudW0zK251bTQpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBhbnM7XG4gICAgfVxufTtcblxuXG4xXG4yXG4zXG40XG41XG42XG43XG44XG45XG4xMFxuMTFcbjEyXG4xM1xuMTRcbjE1XG4xNlxuMTdcbjE4XG4xOVxuMjBcbjIxXG4yMlxuMjNcbjI0XG4yNVxuMjZcblxuICog5pe26Ze05aSN5p2C5bqmOiBvIChuXjIpXG4gKiDnqbrpl7TlpI3mnYLluqY6IG8gKG5eMilcblxuXG4jIOW9leWQjuaDs+azlVxuXG7kuIDoh7TinIzvuI9cblxuXG4jIOaAu+e7k1xuXG7ml6BcblxuXG4jIDM4My4g6LWO6YeR5L+hXG5cbiAqIOmimOebru+8mjM4My4g6LWO6YeR5L+hXG5cbiAqIOiusuino++8muaWh+eroOiusuino1xuXG4gKiDopoHmsYLvvJrlkozkuIrkuIDpopjlkIzmgJ3ot69cblxuXG4jIOW9leWJjeaDs+azlVxuXG7kuI7kuIrkuIDpopjmgJ3ot6/kuIDoh7TvvIzlt7IgYWMgKOKclO+4jylcblxuY2xhc3Mgc29sdXRpb24ge1xucHVibGljOlxuICAgIGJvb2wgY2FuY29uc3RydWN0KHN0cmluZyByYW5zb21ub3RlLCBzdHJpbmcgbWFnYXppbmUpIHtcblxuICAgICAgICAvLyDliJvlu7ptYXBcbiAgICAgICAgdW5vcmRlcmVkX21hcDxjaGFyLGludD4gbWFwO1xuXG4gICAgICAgIC8vIOaUvuWFpXJhbnNvbW5vdGVcbiAgICAgICAgZm9yKGludCBpID0gMDsgaSA8IHJhbnNvbW5vdGUuc2l6ZSgpOyArK2kpe1xuICAgICAgICAgICAgbWFwW3JhbnNvbW5vdGVbaV1dKys7XG4gICAgICAgIH1cblxuICAgICAgICAvLyDlh7ptYWdhemluZVxuICAgICAgICBmb3IoaW50IGkgPSAwOyBpIDwgbWFnYXppbmUuc2l6ZSgpOyArK2kpe1xuICAgICAgICAgICAgbWFwW21hZ2F6aW5lW2ldXS0tO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yKGludCBpID0gMDsgaSA8IHJhbnNvbW5vdGUuc2l6ZSgpOyArK2kpe1xuICAgICAgICAgICAgaWYobWFwW3JhbnNvbW5vdGVbaV1dID4gMCl7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8g5Yik5pat5piv5ZCm5YWo6YOo5Ye65a6MXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbn07XG5cblxuMVxuMlxuM1xuNFxuNVxuNlxuN1xuOFxuOVxuMTBcbjExXG4xMlxuMTNcbjE0XG4xNVxuMTZcbjE3XG4xOFxuMTlcbjIwXG4yMVxuMjJcbjIzXG4yNFxuMjVcbjI2XG4yN1xuXG4gKiDml7bpl7TlpI3mnYLluqY6IG8gKG4pXG4gKiDnqbrpl7TlpI3mnYLluqY6IG8gKDEpXG5cblxuIyDlvZXlkI7mg7Pms5VcblxubWFwIOeahOepuumXtOa2iOiAl+imgeavlOaVsOe7hOWkp+S4gOS6m+eahO+8jOWboOS4uiBtYXAg6KaB57u05oqk57qi6buR5qCR5oiW6ICF5ZOI5biM6KGo77yM6ICM5LiU6L+Y6KaB5YGa5ZOI5biM5Ye95pWw77yM5piv6LS55pe255qEXG5cbuS9v+eUqOaVsOe7hOS8muiKguecgeepuumXtFxuXG5jbGFzcyBzb2x1dGlvbiB7XG5wdWJsaWM6XG4gICAgYm9vbCBjYW5jb25zdHJ1Y3Qoc3RyaW5nIHJhbnNvbW5vdGUsIHN0cmluZyBtYWdhemluZSkge1xuXG4gICAgICAgIC8vIOWIm+W7um1hcFxuICAgICAgICBpbnQgYXJyWzI2XSA9IHswfTtcblxuICAgICAgICAvLyDmlL7lhaVyYW5zb21ub3RlXG4gICAgICAgIGZvcihpbnQgaSA9IDA7IGkgPCBtYWdhemluZS5zaXplKCk7ICsraSl7XG4gICAgICAgICAgICBhcnJbbWFnYXppbmVbaV0gLSAnYSddKys7XG4gICAgICAgIH1cblxuICAgICAgICAvLyDlh7ptYWdhemluZVxuICAgICAgICBmb3IoaW50IGkgPSAwOyBpIDwgcmFuc29tbm90ZS5zaXplKCk7ICsraSl7XG4gICAgICAgICAgICBhcnJbcmFuc29tbm90ZVtpXSAtICdhJ10tLTtcblxuICAgICAgICAgICAgaWYoYXJyW3JhbnNvbW5vdGVbaV0gLSAnYSddIDwgMCl7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8g5Yik5pat5piv5ZCm5YWo6YOo5Ye65a6MXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbn07XG5cblxuMVxuMlxuM1xuNFxuNVxuNlxuN1xuOFxuOVxuMTBcbjExXG4xMlxuMTNcbjE0XG4xNVxuMTZcbjE3XG4xOFxuMTlcbjIwXG4yMVxuMjJcbjIzXG4yNFxuMjVcblxuICog5pe26Ze05aSN5p2C5bqmOiBvIChuKVxuICog56m66Ze05aSN5p2C5bqmOiBvICgxKVxuXG5cbiMg5oC757uTXG5cbm1hcCDlm7rnhLblpb3vvIzkvYbkuZ/lvIDplIDlpKdcblxuXG4jIDE1LiDkuInmlbDkuYvlkoxcblxuICog6aKY55uu77yaMTUuIOS4ieaVsOS5i+WSjFxuXG4gKiDorrLop6PvvJrmlofnq6DorrLop6PjgIHop4bpopHorrLop6NcblxuICog6KaB5rGC77ya5Y+M5oyH6ZKIXG5cblxuIyDlvZXliY3mg7Pms5Vcblxu5Y+q5oOz5Yiw5LqG5pq05Yqb55qE6Kej5rOV77yM5Y+M5oyH6ZKI5rKh5oOz44CC44CC44CCXG5cblxuIyDlvZXlkI7mg7Pms5Vcblxu55yL6L+H5Y2h5ZOl55qE6K6y6Kej6KeG6aKR5ZCO77yM5pW055CG5Ye65Lul5LiL5a6e546w5oCd6Lev77yaXG5cbiAqIGkg56Gu5a6aIG51bXMgW2ld77yM5ZCR5ZCO56e75YqoXG4gKiBsZWZ0IOWSjCByaWdodCDnoa7lrpogbnVtcyBbbGVmdF0g5ZKMIG51bXMgW3JpZ2h0Xe+8jOWQkeS4remXtOe8qVxuXG5jbGFzcyBzb2x1dGlvbiB7XG5wdWJsaWM6XG4gICAgdmVjdG9yPHZlY3RvcjxpbnQ+PiB0aHJlZXN1bSh2ZWN0b3I8aW50PiYgbnVtcykge1xuICAgICAgICBcbiAgICAgICAgLy8g5Yib5bu65LqM5L2N5pWw57uE57uT5p6c6ZuG5ZCIXG5cbiAgICAgICAgLy8g5o6S5bqPXG5cbiAgICAgICAgLy8g6YGN5Y6GXG5cbiAgICAgICAgICAgIC8vIOWvuWnljrvph41cblxuICAgICAgICAgICAgLy8g5LiJ5pWw5LmL5ZKMID4gMFxuICAgICAgICAgICAgICAgIC8vIHJpZ2h0LS1cblxuICAgICAgICAgICAgLy8g5LiJ5pWw5LmL5ZKMIDwgMFxuICAgICAgICAgICAgICAgIC8vIGxlZnQrK1xuXG4gICAgICAgICAgICAvLyDkuInmlbDkuYvlkowgPSAwXG4gICAgICAgICAgICAgICAgLy8g5pS26ZuG57uT5p6cXG5cbiAgICAgICAgICAgICAgICAvLyDlr7lsZWZ05Y676YeNXG5cbiAgICAgICAgICAgICAgICAvLyDlr7lyaWdodOWOu+mHjVxuICAgICAgICAgICAgXG4gICAgICAgIC8vIOi/lOWbnue7k+aenOmbhuWQiFxuICAgIH1cbn07XG5cblxuMVxuMlxuM1xuNFxuNVxuNlxuN1xuOFxuOVxuMTBcbjExXG4xMlxuMTNcbjE0XG4xNVxuMTZcbjE3XG4xOFxuMTlcbjIwXG4yMVxuMjJcbjIzXG4yNFxuMjVcbjI2XG4yN1xuMjhcblxuXG7ku6XkuIvmmK/mnIDnu4jlrp7njrDnmoTku6PnoIHvvIzlt7IgYWMgKOKclO+4jynvvJpcblxuY2xhc3Mgc29sdXRpb24ge1xucHVibGljOlxuICAgIHZlY3Rvcjx2ZWN0b3I8aW50Pj4gdGhyZWVzdW0odmVjdG9yPGludD4mIG51bXMpIHtcbiAgICAgICAgXG4gICAgICAgIC8vIOWIm+W7uuS6jOS9jeaVsOe7hOe7k+aenOmbhuWQiFxuICAgICAgICB2ZWN0b3I8dmVjdG9yPGludD4+IHJlc3VsdDtcbiAgICAgICAgaW50IGxlZnQscmlnaHQ7XG5cbiAgICAgICAgLy8g5o6S5bqPXG4gICAgICAgIHNvcnQobnVtcy5iZWdpbigpLCBudW1zLmVuZCgpKTtcblxuICAgICAgICAvLyDpgY3ljoZcbiAgICAgICAgZm9yKGludCBpID0gMDsgaSA8IG51bXMuc2l6ZSgpOyArK2kpe1xuXG4gICAgICAgICAgICBpZihudW1zW2ldID4gMCl7cmV0dXJuIHJlc3VsdDt9XG5cbiAgICAgICAgICAgIC8vIOWvuWnljrvph41cbiAgICAgICAgICAgIGlmKGkgPiAwICYmIG51bXNbaV0gPT0gbnVtc1tpLTFdKXtjb250aW51ZTt9XG5cbiAgICAgICAgICAgIC8vIOWIm+W7uuWPjOaMh+mSiFxuICAgICAgICAgICAgbGVmdCA9IGkgKyAxO1xuICAgICAgICAgICAgcmlnaHQgPSBudW1zLnNpemUoKSAtIDE7XG5cbiAgICAgICAgICAgIHdoaWxlKGxlZnQgPCByaWdodCl7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLy8g5rGC5ZKMXG4gICAgICAgICAgICAgICAgaW50IHRtcCA9IG51bXNbaV0gKyBudW1zW2xlZnRdICsgbnVtc1tyaWdodF07XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgaWYodG1wID4gMCl7Ly8g5LiJ5pWw5LmL5ZKMID4gMFxuICAgICAgICAgICAgICAgICAgICAvLyByaWdodC0tXG4gICAgICAgICAgICAgICAgICAgIHJpZ2h0LS07XG4gICAgICAgICAgICAgICAgfWVsc2UgaWYodG1wIDwgMCl7Ly8g5LiJ5pWw5LmL5ZKMIDwgMFxuICAgICAgICAgICAgICAgICAgICAvLyBsZWZ0KytcbiAgICAgICAgICAgICAgICAgICAgbGVmdCsrO1xuICAgICAgICAgICAgICAgIH1lbHNley8vIOS4ieaVsOS5i+WSjCA9IDBcbiAgICAgICAgICAgICAgICAgICAgLy8g5pS26ZuG57uT5p6cXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoX2JhY2sodmVjdG9yPGludD57bnVtc1tpXSxudW1zW2xlZnRdLG51bXNbcmlnaHRdfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8g5a+5bGVmdOWOu+mHjVxuICAgICAgICAgICAgICAgICAgICB3aGlsZShsZWZ0IDwgcmlnaHQgJiYgbnVtc1tsZWZ0XSA9PSBudW1zW2xlZnQgKyAxXSl7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZWZ0Kys7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAvLyDlr7lyaWdodOWOu+mHjVxuICAgICAgICAgICAgICAgICAgICB3aGlsZShsZWZ0IDwgcmlnaHQgJiYgbnVtc1tyaWdodF0gPT0gbnVtc1tyaWdodCAtIDFdKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJpZ2h0LS07XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAvLyDlkIzml7bnvKnlsI9cbiAgICAgICAgICAgICAgICAgICAgbGVmdCsrO1xuICAgICAgICAgICAgICAgICAgICByaWdodC0tO1xuICAgICAgICAgICAgICAgIH0gXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAvLyDov5Tlm57nu5Pmnpzpm4blkIhcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG59O1xuXG5cbjFcbjJcbjNcbjRcbjVcbjZcbjdcbjhcbjlcbjEwXG4xMVxuMTJcbjEzXG4xNFxuMTVcbjE2XG4xN1xuMThcbjE5XG4yMFxuMjFcbjIyXG4yM1xuMjRcbjI1XG4yNlxuMjdcbjI4XG4yOVxuMzBcbjMxXG4zMlxuMzNcbjM0XG4zNVxuMzZcbjM3XG4zOFxuMzlcbjQwXG40MVxuNDJcbjQzXG40NFxuNDVcbjQ2XG40N1xuNDhcbjQ5XG41MFxuNTFcbjUyXG41M1xuNTRcbjU1XG41NlxuNTdcbjU4XG41OVxuXG5cblxuIyDmgLvnu5NcblxuICog6KaB5rOo5oSP5Y676YeN55qE57uG6IqCXG4gKiDlj4zmjIfpkojmlLbnvKlcblxuXG4jIDE4LiDlm5vmlbDkuYvlkoxcblxuICog6aKY55uu77yaMTguIOWbm+aVsOS5i+WSjFxuICog6K6y6Kej77ya5paH56ug6K6y6Kej44CB6KeG6aKR6K6y6KejXG4gKiDopoHmsYLvvJpcbiAgICogMS4g5Li65LuA5LmIIDQ1NC4g5Zub5pWw55u45YqgIGlpIOS8mueugOWNleW+iOWkmu+8n1xuICAgICAyLiDlj4zmjIfpkohcblxuXG4jIOW9leWJjeaDs+azlVxuXG7lkozkuInmlbDkuYvlkoznmoTmgJ3ot6/nm7jkvLzvvIzlrabkuaDlrozkuInmlbDkuYvlkozmnInmgJ3ot6/lhpnlh7rku6PnoIHvvIzlt7IgYWMgKOKclO+4jylcblxuY2xhc3Mgc29sdXRpb24ge1xucHVibGljOlxuICAgIHZlY3Rvcjx2ZWN0b3I8aW50Pj4gZm91cnN1bSh2ZWN0b3I8aW50PiYgbnVtcywgaW50IHRhcmdldCkge1xuXG4gICAgICAgIGludCBzaXplID0gbnVtcy5zaXplKCk7ICAgICAvLyDojrflj5bmlbDnu4Tplb/luqZcbiAgICAgICAgdmVjdG9yPHZlY3RvcjxpbnQ+PiByZXN1bHQ7IC8vIOe7k+aenOmbhuWQiFxuICAgICAgICBsb25nIHRtcHN1bSA9IDA7ICAgICAgICAgICAgIC8vIOaYr+aVsOS5i+WSjFxuICAgICAgICBpbnQgbGVmdCxyaWdodDsgICAgICAgICAgICAgLy8g5Y+M5oyH6ZKIXG5cbiAgICAgICAgLy8g5bCP5LqONOWIpOaWrVxuICAgICAgICBpZiAoc2l6ZSA8IDQpIHsgcmV0dXJuIHJlc3VsdDsgfVxuXG4gICAgICAgIC8vIOaOkuW6j1xuICAgICAgICBzb3J0KG51bXMuYmVnaW4oKSwgbnVtcy5lbmQoKSk7XG5cbiAgICAgICAgLy8g5b6q546vYVxuICAgICAgICBmb3IoaW50IGEgPSAwOyBhIDwgc2l6ZSAtIDM7ICsrYSl7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIOWvuWHljrvph41cbiAgICAgICAgICAgIGlmKGEgPiAwICYmIG51bXNbYV0gPT0gbnVtc1thLTFdKXtjb250aW51ZTt9XG5cbiAgICAgICAgICAgIC8vIOW+queOr2JcbiAgICAgICAgICAgIGZvcihpbnQgYiA9IGEgKyAxOyBiIDwgc2l6ZSAtIDI7ICsrYil7XG5cbiAgICAgICAgICAgICAgICAvLyDlr7li5Y676YeNXG4gICAgICAgICAgICAgICAgaWYoYiA+IGEgKyAxICYmIG51bXNbYl0gPT0gbnVtc1tiLTFdKXtjb250aW51ZTt9XG5cbiAgICAgICAgICAgICAgICAvLyDlj4zmjIfpkohcbiAgICAgICAgICAgICAgICBsZWZ0ID0gYiArIDE7XG4gICAgICAgICAgICAgICAgcmlnaHQgPSBzaXplIC0gMTtcblxuICAgICAgICAgICAgICAgIC8vIOWPjOaMh+mSiOenu+WKqFxuICAgICAgICAgICAgICAgIHdoaWxlKGxlZnQgPCByaWdodCl7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8g5rGC5ZKMXG4gICAgICAgICAgICAgICAgICAgIHRtcHN1bSA9IChsb25nKW51bXNbYV0rbnVtc1tiXStudW1zW2xlZnRdK251bXNbcmlnaHRdO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIOWvueavlHRhcmdldFxuICAgICAgICAgICAgICAgICAgICBpZih0bXBzdW0gPiB0YXJnZXQpe1xuICAgICAgICAgICAgICAgICAgICAgICAgLS1yaWdodDtcbiAgICAgICAgICAgICAgICAgICAgfWVsc2UgaWYodG1wc3VtIDwgdGFyZ2V0KXtcbiAgICAgICAgICAgICAgICAgICAgICAgICsrbGVmdDtcbiAgICAgICAgICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaF9iYWNrKHZlY3RvcjxpbnQ+e251bXNbYV0sbnVtc1tiXSxudW1zW2xlZnRdLG51bXNbcmlnaHRdfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGxlZnQg5Y676YeNXG4gICAgICAgICAgICAgICAgICAgICAgICB3aGlsZShsZWZ0IDwgcmlnaHQgJiYgbnVtc1tsZWZ0XSA9PSBudW1zW2xlZnQrMV0peysrbGVmdDt9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHJpZ2h05Y676YeNXG4gICAgICAgICAgICAgICAgICAgICAgICB3aGlsZShsZWZ0IDwgcmlnaHQgJiYgbnVtc1tyaWdodF0gPT0gbnVtc1tyaWdodC0xXSl7LS1yaWdodDt9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICsrbGVmdDtcbiAgICAgICAgICAgICAgICAgICAgICAgIC0tcmlnaHQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbn07XG5cblxuMVxuMlxuM1xuNFxuNVxuNlxuN1xuOFxuOVxuMTBcbjExXG4xMlxuMTNcbjE0XG4xNVxuMTZcbjE3XG4xOFxuMTlcbjIwXG4yMVxuMjJcbjIzXG4yNFxuMjVcbjI2XG4yN1xuMjhcbjI5XG4zMFxuMzFcbjMyXG4zM1xuMzRcbjM1XG4zNlxuMzdcbjM4XG4zOVxuNDBcbjQxXG40MlxuNDNcbjQ0XG40NVxuNDZcbjQ3XG40OFxuNDlcbjUwXG41MVxuNTJcbjUzXG41NFxuNTVcbjU2XG41N1xuNThcbjU5XG42MFxuNjFcblxuXG5cbiMg5b2V5ZCO5oOz5rOVXG5cbuWJquaeneeahOe7huiKguaTjeS9nO+8jOWPueacjVxuXG7mlbTnkIblrozlkI7vvIzlhpnlh7rku6XkuIvku6PnoIHvvIzlt7IgYWMgKOKclO+4jylcblxuICog5rGC5ZKM5pe2IGxvbmcg57G75Z6L77yM6Ziy5q2i5rqi5Ye6XG5cbmNsYXNzIHNvbHV0aW9uIHtcbnB1YmxpYzpcbiAgICB2ZWN0b3I8dmVjdG9yPGludD4+IGZvdXJzdW0odmVjdG9yPGludD4mIG51bXMsIGludCB0YXJnZXQpIHtcblxuICAgICAgICBpbnQgc2l6ZSA9IG51bXMuc2l6ZSgpOyAgICAgLy8g6I635Y+W5pWw57uE6ZW/5bqmXG4gICAgICAgIHZlY3Rvcjx2ZWN0b3I8aW50Pj4gcmVzdWx0OyAvLyDnu5Pmnpzpm4blkIhcbiAgICAgICAgbG9uZyB0bXBzdW0gPSAwOyAgICAgICAgICAgICAvLyDmmK/mlbDkuYvlkowgbG9uZ+mYsuatoua6ouWHulxuICAgICAgICBpbnQgbGVmdCxyaWdodDsgICAgICAgICAgICAgLy8g5Y+M5oyH6ZKIXG5cbiAgICAgICAgLy8g5bCP5LqONOWIpOaWrVxuICAgICAgICBpZiAoc2l6ZSA8IDQpIHsgcmV0dXJuIHJlc3VsdDsgfVxuXG4gICAgICAgIC8vIOaOkuW6j1xuICAgICAgICBzb3J0KG51bXMuYmVnaW4oKSwgbnVtcy5lbmQoKSk7XG5cbiAgICAgICAgLy8g5b6q546vYVxuICAgICAgICBmb3IoaW50IGEgPSAwOyBhIDwgc2l6ZSAtIDM7ICsrYSl7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIOWvuWHljrvph41cbiAgICAgICAgICAgIGlmKGEgPiAwICYmIG51bXNbYV0gPT0gbnVtc1thLTFdKXtjb250aW51ZTt9XG5cbiAgICAgICAgICAgIC8vIOW+queOr2JcbiAgICAgICAgICAgIGZvcihpbnQgYiA9IGEgKyAxOyBiIDwgc2l6ZSAtIDI7ICsrYil7XG5cbiAgICAgICAgICAgICAgICAvLyDlr7li5Y676YeNXG4gICAgICAgICAgICAgICAgaWYoYiA+IGEgKyAxICYmIG51bXNbYl0gPT0gbnVtc1tiLTFdKXtjb250aW51ZTt9XG5cbiAgICAgICAgICAgICAgICAvLyDkuIDlsYLliarmnp1cbiAgICAgICAgICAgICAgICBpZihudW1zW2FdK251bXNbYl0gPiAwICYmIHRhcmdldCA+IDAgJiYgbnVtc1thXStudW1zW2JdPnRhcmdldCl7YnJlYWs7fVxuICAgICAgICAgICAgICAgIC8vIOWPjOaMh+mSiFxuICAgICAgICAgICAgICAgIGxlZnQgPSBiICsgMTtcbiAgICAgICAgICAgICAgICByaWdodCA9IHNpemUgLSAxO1xuXG4gICAgICAgICAgICAgICAgLy8g5Y+M5oyH6ZKI56e75YqoXG4gICAgICAgICAgICAgICAgd2hpbGUobGVmdCA8IHJpZ2h0KXtcblxuICAgICAgICAgICAgICAgICAgICAvLyDmsYLlkoxcbiAgICAgICAgICAgICAgICAgICAgdG1wc3VtID0gKGxvbmcpbnVtc1thXStudW1zW2JdK251bXNbbGVmdF0rbnVtc1tyaWdodF07XG5cbiAgICAgICAgICAgICAgICAgICAgLy8g5a+55q+UdGFyZ2V0XG4gICAgICAgICAgICAgICAgICAgIGlmKHRtcHN1bSA+IHRhcmdldCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAtLXJpZ2h0O1xuICAgICAgICAgICAgICAgICAgICB9ZWxzZSBpZih0bXBzdW0gPCB0YXJnZXQpe1xuICAgICAgICAgICAgICAgICAgICAgICAgKytsZWZ0O1xuICAgICAgICAgICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoX2JhY2sodmVjdG9yPGludD57bnVtc1thXSxudW1zW2JdLG51bXNbbGVmdF0sbnVtc1tyaWdodF19KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gbGVmdCDljrvph41cbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlKGxlZnQgPCByaWdodCAmJiBudW1zW2xlZnRdID09IG51bXNbbGVmdCsxXSl7KytsZWZ0O31cblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gcmlnaHTljrvph41cbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlKGxlZnQgPCByaWdodCAmJiBudW1zW3JpZ2h0XSA9PSBudW1zW3JpZ2h0LTFdKXstLXJpZ2h0O31cblxuICAgICAgICAgICAgICAgICAgICAgICAgKytsZWZ0O1xuICAgICAgICAgICAgICAgICAgICAgICAgLS1yaWdodDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxufTtcblxuXG4xXG4yXG4zXG40XG41XG42XG43XG44XG45XG4xMFxuMTFcbjEyXG4xM1xuMTRcbjE1XG4xNlxuMTdcbjE4XG4xOVxuMjBcbjIxXG4yMlxuMjNcbjI0XG4yNVxuMjZcbjI3XG4yOFxuMjlcbjMwXG4zMVxuMzJcbjMzXG4zNFxuMzVcbjM2XG4zN1xuMzhcbjM5XG40MFxuNDFcbjQyXG40M1xuNDRcbjQ1XG40NlxuNDdcbjQ4XG40OVxuNTBcbjUxXG41MlxuNTNcbjU0XG41NVxuNTZcbjU3XG41OFxuNTlcbjYwXG42MVxuNjJcbjYzXG5cblxuXG4jIOaAu+e7k1xuXG4gKiDnu4boioLnmoTliarmnp3mk43kvZxcblxuXG4jIOaAu+e7k1xuXG7kuInmlbDkuYvlkozkuI7lm5vmlbDkuYvlkozlpKrpmr7kuobvvIznu4boioLkuIrnmoTmk43kvZzlvojlpJrvvIzkvqfpnaLkuZ/lj43mmKDlr7nku6PnoIHnmoTmjozmj6HkuI3otrPvvIznu6fnu63liLfvvIEiLAogICAgImNoYXJzZXRzIjogewogICAgICAiY2prIjogdHJ1ZQogICAgfQogIH0sIHsKICAgICJ0aXRsZSI6ICJEYXkwNS3lk4jluIwiLAogICAgImZyb250bWF0dGVyIjogewogICAgICAidGl0bGUiOiAiRGF5MDUt5ZOI5biMIiwKICAgICAgImRhdGUiOiAiMjAyMy0wNS0yOVQxNjozNDozMC4wMDBaIiwKICAgICAgInBlcm1hbGluayI6ICIvcGFnZXMvMzExYjZiLyIsCiAgICAgICJjYXRlZ29yaWVzIjogWyLnrpfms5UiLCAi566X5rOV5omT5Y2hIl0sCiAgICAgICJ0YWdzIjogWyLmiZPljaEiXQogICAgfSwKICAgICJyZWd1bGFyUGF0aCI6ICIvMDIuJUU3JUFFJTk3JUU2JUIzJTk1LzAxLiVFNyVBRSU5NyVFNiVCMyU5NSVFNiU4OSU5MyVFNSU4RCVBMS8wNS5EYXkwNS0lRTUlOTMlODglRTUlQjglOEMuaHRtbCIsCiAgICAicmVsYXRpdmVQYXRoIjogIjAyLueul+azlS8wMS7nrpfms5XmiZPljaEvMDUuRGF5MDUt5ZOI5biMLm1kIiwKICAgICJrZXkiOiAidi03MjQ2NWEzOCIsCiAgICAicGF0aCI6ICIvcGFnZXMvMzExYjZiLyIsCiAgICAiaGVhZGVycyI6IFt7CiAgICAgICJsZXZlbCI6IDIsCiAgICAgICJ0aXRsZSI6ICLlk4jluIzooajnkIborrrln7rnoYAiLAogICAgICAic2x1ZyI6ICLlk4jluIzooajnkIborrrln7rnoYAiLAogICAgICAibm9ybWFsaXplZFRpdGxlIjogIuWTiOW4jOihqOeQhuiuuuWfuuehgCIsCiAgICAgICJjaGFySW5kZXgiOiAyCiAgICB9LCB7CiAgICAgICJsZXZlbCI6IDIsCiAgICAgICJ0aXRsZSI6ICIyNDIu5pyJ5pWI55qE5a2X5q+N5byC5L2N6K+NIiwKICAgICAgInNsdWciOiAiXzI0Mi3mnInmlYjnmoTlrZfmr43lvILkvY3or40iLAogICAgICAibm9ybWFsaXplZFRpdGxlIjogIjI0Mi4g5pyJ5pWI55qE5a2X5q+N5byC5L2N6K+NIiwKICAgICAgImNoYXJJbmRleCI6IDEwCiAgICB9LCB7CiAgICAgICJsZXZlbCI6IDMsCiAgICAgICJ0aXRsZSI6ICLlvZXliY3mg7Pms5UiLAogICAgICAic2x1ZyI6ICLlvZXliY3mg7Pms5UiLAogICAgICAibm9ybWFsaXplZFRpdGxlIjogIuW9leWJjeaDs+azlSIsCiAgICAgICJjaGFySW5kZXgiOiA5MjAKICAgIH0sIHsKICAgICAgImxldmVsIjogMywKICAgICAgInRpdGxlIjogIuW9leWQjuaDs+azlSIsCiAgICAgICJzbHVnIjogIuW9leWQjuaDs+azlSIsCiAgICAgICJub3JtYWxpemVkVGl0bGUiOiAi5b2V5ZCO5oOz5rOVIiwKICAgICAgImNoYXJJbmRleCI6IDE3MDMKICAgIH0sIHsKICAgICAgImxldmVsIjogMywKICAgICAgInRpdGxlIjogIuaAu+e7kyIsCiAgICAgICJzbHVnIjogIuaAu+e7kyIsCiAgICAgICJub3JtYWxpemVkVGl0bGUiOiAi5oC757uTIiwKICAgICAgImNoYXJJbmRleCI6IDEyOAogICAgfSwgewogICAgICAibGV2ZWwiOiAyLAogICAgICAidGl0bGUiOiAiMzQ5LuS4pOS4quaVsOe7hOeahOS6pOmbhiIsCiAgICAgICJzbHVnIjogIl8zNDkt5Lik5Liq5pWw57uE55qE5Lqk6ZuGIiwKICAgICAgIm5vcm1hbGl6ZWRUaXRsZSI6ICIzNDkuIOS4pOS4quaVsOe7hOeahOS6pOmbhiIsCiAgICAgICJjaGFySW5kZXgiOiAyNAogICAgfSwgewogICAgICAibGV2ZWwiOiAzLAogICAgICAidGl0bGUiOiAi5b2V5YmN5oOz5rOVIiwKICAgICAgInNsdWciOiAi5b2V5YmN5oOz5rOVLTIiLAogICAgICAibm9ybWFsaXplZFRpdGxlIjogIuW9leWJjeaDs+azlSIsCiAgICAgICJjaGFySW5kZXgiOiA5MjAKICAgIH0sIHsKICAgICAgImxldmVsIjogMywKICAgICAgInRpdGxlIjogIuW9leWQjuaDs+azlSIsCiAgICAgICJzbHVnIjogIuW9leWQjuaDs+azlS0yIiwKICAgICAgIm5vcm1hbGl6ZWRUaXRsZSI6ICLlvZXlkI7mg7Pms5UiLAogICAgICAiY2hhckluZGV4IjogMTcwMwogICAgfSwgewogICAgICAibGV2ZWwiOiAzLAogICAgICAidGl0bGUiOiAi5oC757uTIiwKICAgICAgInNsdWciOiAi5oC757uTLTIiLAogICAgICAibm9ybWFsaXplZFRpdGxlIjogIuaAu+e7kyIsCiAgICAgICJjaGFySW5kZXgiOiAxMjgKICAgIH0sIHsKICAgICAgImxldmVsIjogMiwKICAgICAgInRpdGxlIjogIjIwMi7lv6vkuZDmlbAiLAogICAgICAic2x1ZyI6ICJfMjAyLeW/q+S5kOaVsCIsCiAgICAgICJub3JtYWxpemVkVGl0bGUiOiAiMjAyLiDlv6vkuZDmlbAiLAogICAgICAiY2hhckluZGV4IjogMzcKICAgIH0sIHsKICAgICAgImxldmVsIjogMywKICAgICAgInRpdGxlIjogIuW9leWJjeaDs+azlSIsCiAgICAgICJzbHVnIjogIuW9leWJjeaDs+azlS0zIiwKICAgICAgIm5vcm1hbGl6ZWRUaXRsZSI6ICLlvZXliY3mg7Pms5UiLAogICAgICAiY2hhckluZGV4IjogOTIwCiAgICB9LCB7CiAgICAgICJsZXZlbCI6IDMsCiAgICAgICJ0aXRsZSI6ICLlvZXlkI7mg7Pms5UiLAogICAgICAic2x1ZyI6ICLlvZXlkI7mg7Pms5UtMyIsCiAgICAgICJub3JtYWxpemVkVGl0bGUiOiAi5b2V5ZCO5oOz5rOVIiwKICAgICAgImNoYXJJbmRleCI6IDE3MDMKICAgIH0sIHsKICAgICAgImxldmVsIjogMywKICAgICAgInRpdGxlIjogIuaAu+e7kyIsCiAgICAgICJzbHVnIjogIuaAu+e7ky0zIiwKICAgICAgIm5vcm1hbGl6ZWRUaXRsZSI6ICLmgLvnu5MiLAogICAgICAiY2hhckluZGV4IjogMTI4CiAgICB9LCB7CiAgICAgICJsZXZlbCI6IDIsCiAgICAgICJ0aXRsZSI6ICIxLuS4pOaVsOS5i+WSjCIsCiAgICAgICJzbHVnIjogIl8xLeS4pOaVsOS5i+WSjCIsCiAgICAgICJub3JtYWxpemVkVGl0bGUiOiAiMS4g5Lik5pWw5LmL5ZKMIiwKICAgICAgImNoYXJJbmRleCI6IDQ2CiAgICB9LCB7CiAgICAgICJsZXZlbCI6IDMsCiAgICAgICJ0aXRsZSI6ICLlvZXliY3mg7Pms5UiLAogICAgICAic2x1ZyI6ICLlvZXliY3mg7Pms5UtNCIsCiAgICAgICJub3JtYWxpemVkVGl0bGUiOiAi5b2V5YmN5oOz5rOVIiwKICAgICAgImNoYXJJbmRleCI6IDkyMAogICAgfSwgewogICAgICAibGV2ZWwiOiAzLAogICAgICAidGl0bGUiOiAi5b2V5ZCO5oOz5rOVIiwKICAgICAgInNsdWciOiAi5b2V5ZCO5oOz5rOVLTQiLAogICAgICAibm9ybWFsaXplZFRpdGxlIjogIuW9leWQjuaDs+azlSIsCiAgICAgICJjaGFySW5kZXgiOiAxNzAzCiAgICB9LCB7CiAgICAgICJsZXZlbCI6IDMsCiAgICAgICJ0aXRsZSI6ICLmgLvnu5MiLAogICAgICAic2x1ZyI6ICLmgLvnu5MtNCIsCiAgICAgICJub3JtYWxpemVkVGl0bGUiOiAi5oC757uTIiwKICAgICAgImNoYXJJbmRleCI6IDEyOAogICAgfSwgewogICAgICAibGV2ZWwiOiAyLAogICAgICAidGl0bGUiOiAi5oC757uTIiwKICAgICAgInNsdWciOiAi5oC757uTLTUiLAogICAgICAibm9ybWFsaXplZFRpdGxlIjogIuaAu+e7kyIsCiAgICAgICJjaGFySW5kZXgiOiAxMjgKICAgIH1dLAogICAgImV4Y2VycHQiOiAiPGJsb2NrcXVvdGU+XG48cD7lk4jluIzooajnkIborrrln7rnoYDjgIEyNDIuIOacieaViOeahOWtl+avjeW8guS9jeivjeOAgTM0OS4g5Lik5Liq5pWw57uE55qE5Lqk6ZuG44CBMjAyLiDlv6vkuZDmlbDjgIExLiDkuKTmlbDkuYvlkow8L3A+XG48L2Jsb2NrcXVvdGU+XG4iLAogICAgImxhc3RVcGRhdGVkIjogIjYvMi8yMDIzLCA2OjM0OjAwIFBNIiwKICAgICJsYXN0VXBkYXRlZFRpbWVzdGFtcCI6IDE2ODU3MDIwNDAwMDAsCiAgICAiaGVhZGVyc1N0ciI6ICLlk4jluIzooajnkIborrrln7rnoYAgMjQyLuacieaViOeahOWtl+avjeW8guS9jeivjSDlvZXliY3mg7Pms5Ug5b2V5ZCO5oOz5rOVIOaAu+e7kyAzNDku5Lik5Liq5pWw57uE55qE5Lqk6ZuGIOW9leWJjeaDs+azlSDlvZXlkI7mg7Pms5Ug5oC757uTIDIwMi7lv6vkuZDmlbAg5b2V5YmN5oOz5rOVIOW9leWQjuaDs+azlSDmgLvnu5MgMS7kuKTmlbDkuYvlkowg5b2V5YmN5oOz5rOVIOW9leWQjuaDs+azlSDmgLvnu5Mg5oC757uTIiwKICAgICJjb250ZW50IjogIj4g5ZOI5biM6KGo55CG6K665Z+656GA44CBMjQyLiDmnInmlYjnmoTlrZfmr43lvILkvY3or43jgIEzNDkuIOS4pOS4quaVsOe7hOeahOS6pOmbhuOAgTIwMi4g5b+r5LmQ5pWw44CBMS4g5Lik5pWw5LmL5ZKMXG5cblxuIyDlk4jluIzooajnkIborrrln7rnoYBcblxuICog6K6y6KejXG5cbiAqIOimgeaxgu+8muS6huino+WTiOW4jOihqOeahOWGhemDqOWunueOsOWOn+eQhu+8jOWTiOW4jOWHveaVsO+8jOWTiOW4jOeisOaSnu+8jOS7peWPiuW4uOingeWTiOW4jOihqOeahOWMuuWIq++8jOaVsOe7hO+8jHNldCDlkowgbWFwXG5cbuaAu+e7k++8mlxuXG4gMS4g5b2T5oiR5Lus6YGH5Yiw5LqG6KaB5b+r6YCf5Yik5pat5LiA5Liq5YWD57Sg5piv5ZCm5Ye6546w6ZuG5ZCI6YeM55qE5pe25YCZ77yM5bCx6KaB6ICD6JmR5ZOI5biM5rOVXG4gMi4g54m654my5LqG56m66Ze05o2i5Y+W5LqG5pe26Ze0XG5cbumbhuWQiCAgICAgICAgICAgICAgICAgICAgICAg5bqV5bGC5a6e546wICAg5piv5ZCm5pyJ5bqPICAg5pWw5YC85piv5ZCm5Y+v5Lul6YeN5aSNICAg6IO95ZCm5pu05pS55pWw5YC8ICAg5p+l6K+i5pWI546HICAgICAgIOWinuWIoOaViOeOh1xuc3RkOjpzZXQgICAgICAgICAgICAgICAgIOe6oum7keagkSAgICDmnInluo8gICAgIOWQpiAgICAgICAgICDlkKYgICAgICAgIE8obG9nIG4pICAgTyhsb2cgbilcbnN0ZDo6bXVsdGlzZXQgICAgICAgICAgICDnuqLpu5HmoJEgICAg5pyJ5bqPICAgICDmmK8gICAgICAgICAg5ZCmICAgICAgICBPKGxvZ24pICAgIE8obG9nbilcbnN0ZDo6dW5vcmRlcmVkX3NldCjinJTvuI8pICAg5ZOI5biM6KGoICAgIOaXoOW6jyAgICAg5ZCmICAgICAgICAgIOWQpiAgICAgICAgTygxKSAgICAgICBPKDEpXG5cbi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxu5pig5bCEICAgICAgICAgICAgICAgICAgIOW6leWxguWunueOsCAgIOaYr+WQpuacieW6jyAgICAg5pWw5YC85piv5ZCm5Y+v5Lul6YeN5aSNICAg6IO95ZCm5pu05pS55pWw5YC8ICAgICDmn6Xor6LmlYjnjocgICAgICAg5aKe5Yig5pWI546HXG5zdGQ6Om1hcCAgICAgICAgICAgICDnuqLpu5HmoJEgICAga2V5IOacieW6jyAgIGtleSDkuI3lj6/ph43lpI0gICBrZXkg5LiN5Y+v5L+u5pS5ICAgTyhsb2duKSAgICBPKGxvZ24pXG5zdGQ6Om11bHRpbWFwICAgICAgICDnuqLpu5HmoJEgICAga2V5IOacieW6jyAgIGtleSDlj6/ph43lpI0gICAga2V5IOS4jeWPr+S/ruaUuSAgIE8obG9nIG4pICAgTyhsb2cgbilcbnN0ZDo6dW5vcmRlcmVkX21hcCAgIOWTiOW4jOihqCAgICBrZXkg5peg5bqPICAga2V5IOS4jeWPr+mHjeWkjSAgIGtleSDkuI3lj6/kv67mlLkgICBPKDEpICAgICAgIE8oMSlcblxuXG4jIDI0Mi4g5pyJ5pWI55qE5a2X5q+N5byC5L2N6K+NXG5cbiAqIOmimOebru+8mjI0Mi4g5pyJ5pWI55qE5a2X5q+N5byC5L2N6K+NXG5cbiAqIOiusuino++8muaWh+eroOiusuino+OAgeinhumikeiusuino1xuXG4gKiDopoHmsYLvvJrmlbDnu4TnlKjmnaXlgZrlk4jluIzooahcblxuXG4jIOW9leWJjeaDs+azlVxuXG7mjInopoHmsYLvvIzmlbDnu4TkvZzkuLrlk4jluIzooajmnaXorrDlvZXmr4/kuKrlrZfnrKbvvIxzIOWtl+espuS4sueahOWtl+espiArK++8jHQg5a2X56ym5Liy55qE5a2X56ymIC0t77yM6Iul5pyA5ZCOIHRtcCDmlbDnu4TkuK3pg73kuLogMCDliJnkuLrmnInmlYjnmoTlrZfmr43lvILkvY3or43jgIJcblxu5Lul5LiL5Luj56CB5beyIEFDICjinJTvuI8pXG5cbmNsYXNzIFNvbHV0aW9uIHtcbnB1YmxpYzpcbiAgICBib29sIGlzQW5hZ3JhbShzdHJpbmcgcywgc3RyaW5nIHQpIHtcbiAgICAgICAgXG4gICAgICAgIGlmKHMuc2l6ZSgpICE9IHQuc2l6ZSgpKXtyZXR1cm4gZmFsc2U7fVxuXG4gICAgICAgIC8vIOWIneWni+WMluaVsOe7hFxuICAgICAgICBpbnQgdG1wWzI2XSA9IHswfTtcblxuICAgICAgICAvLyBzLnNpemUoKSA9PSB0LnNpemUoKVxuICAgICAgICBmb3IoaW50IGkgPSAwOyBpIDwgcy5zaXplKCk7KytpKXtcbiAgICAgICAgICAgIC8vIOiusOW9lXPlrZfnrKbkuLJcbiAgICAgICAgICAgIHRtcFtzW2ldIC0gJ2EnXSsrO1xuICAgICAgICAgICAgLy8g5LuOdG1w5Lit5Yig6ZmkdOWtl+espuS4suWtl+esplxuICAgICAgICAgICAgdG1wW3RbaV0gLSAnYSddLS07XG4gICAgICAgIH1cblxuICAgICAgICAvLyDmn6XnnIt0bXDmmK/lkKblhajkuLowXG4gICAgICAgIGZvcihpbnQgaSA9IDA7IGkgPCAyNjsrK2kpe1xuICAgICAgICAgICAgY291dDw8dG1wW2ldPDxlbmRsO1xuICAgICAgICAgICAgaWYodG1wW2ldICE9IDApe1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0cnVlO1xuIFxuICAgIH1cbn07XG5cblxuMVxuMlxuM1xuNFxuNVxuNlxuN1xuOFxuOVxuMTBcbjExXG4xMlxuMTNcbjE0XG4xNVxuMTZcbjE3XG4xOFxuMTlcbjIwXG4yMVxuMjJcbjIzXG4yNFxuMjVcbjI2XG4yN1xuMjhcbjI5XG5cbiAqIOaXtumXtOWkjeadguW6pjogTyAobilcbiAqIOepuumXtOWkjeadguW6pjogTyAoMSlcblxuXG4jIOW9leWQjuaDs+azlVxuXG7mgJ3ot6/kuIDoh7TinIzvuI9cblxuXG4jIOaAu+e7k1xuXG7ml6BcblxuXG4jIDM0OS4g5Lik5Liq5pWw57uE55qE5Lqk6ZuGXG5cbiAqIOmimOebru+8mjM0OS4g5Lik5Liq5pWw57uE55qE5Lqk6ZuGXG5cbiAqIOiusuino++8muaWh+eroOiusuino+OAgeinhumikeiusuino1xuXG4gKiDopoHmsYLvvJrkvb/nlKjmlbDnu4Tlkowgc2V0IOS4pOenjeino+azlVxuXG5cbiMg5b2V5YmN5oOz5rOVXG5cbj4g5pWw57uEXG5cbiAxLiDlrprkuYkgc2V0IOaVsOaNrue7k+aehO+8jOmYsuatoue7k+aenOmHjeWkjVxuIDIuIOWumuS5iSAxMDAwIOaVsOe7hFxuIDMuIOiusOW9lSBudW1zMSDlubbliKTmlq0gbnVtczIg5piv5ZCm5a2Y5ZyoXG4gNC4g57G75Z6L6L2s5o2i5bm26L+U5ZueXG5cbuW3siBBQyAo4pyU77iPKVxuXG5jbGFzcyBTb2x1dGlvbiB7XG5wdWJsaWM6XG4gICAgdmVjdG9yPGludD4gaW50ZXJzZWN0aW9uKHZlY3RvcjxpbnQ+JiBudW1zMSwgdmVjdG9yPGludD4mIG51bXMyKSB7XG4gICAgICAgIC8vIOWOu+mHjee7k+aenOmbhlxuICAgICAgICB1bm9yZGVyZWRfc2V0PGludD4gcmVzdWx0O1xuXG4gICAgICAgIC8vIOS9v+eUqOaVsOe7hFxuICAgICAgICBpbnQgdG1wWzEwMDBdID0gezB9O1xuXG4gICAgICAgIC8vIOiusOW9lW51bXMxXG4gICAgICAgIGZvcihpbnQgaSA9IDA7aSA8IG51bXMxLnNpemUoKTsrK2kpe1xuICAgICAgICAgICAgdG1wW251bXMxW2ldXSA9IDE7XG4gICAgICAgIH1cblxuICAgICAgICAvLyDliKTmlq1udW1zMuWFg+e0oOaYr+WQpuWtmOWcqFxuICAgICAgICBmb3IoaW50IGkgPSAwO2kgPCBudW1zMi5zaXplKCk7KytpKXtcbiAgICAgICAgICAgIGlmKHRtcFtudW1zMltpXV0gPT0gMSl7XG4gICAgICAgICAgICAgICAgcmVzdWx0Lmluc2VydChudW1zMltpXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdmVjdG9yPGludD4ocmVzdWx0LmJlZ2luKCksIHJlc3VsdC5lbmQoKSk7O1xuICAgIH1cbn07XG5cblxuMVxuMlxuM1xuNFxuNVxuNlxuN1xuOFxuOVxuMTBcbjExXG4xMlxuMTNcbjE0XG4xNVxuMTZcbjE3XG4xOFxuMTlcbjIwXG4yMVxuMjJcbjIzXG4yNFxuXG5cbj4gc2V0IOaVsOaNrue7k+aehFxuXG7lhpnlh7rmnaXlkozkuIrpnaLmlbDnu4Tlt67kuI3lpJrvvIzlr7kgU0VUIOaVsOaNrue7k+aehOaTjeS9nOS4jeeGn+e7g+OAglxuXG5cbiMg5b2V5ZCO5oOz5rOVXG5cbuS4u+imgeaYr+i/reS7o+WZqOeahOS9v+eUqO+8jEFDICjinJTvuI8pXG5cbmNsYXNzIFNvbHV0aW9uIHtcbnB1YmxpYzpcbiAgICB2ZWN0b3I8aW50PiBpbnRlcnNlY3Rpb24odmVjdG9yPGludD4mIG51bXMxLCB2ZWN0b3I8aW50PiYgbnVtczIpIHtcbiAgICAgICAgLy8g5Y676YeN57uT5p6c6ZuGXG4gICAgICAgIHVub3JkZXJlZF9zZXQ8aW50PiByZXN1bHQ7XG4gICAgICAgIHVub3JkZXJlZF9zZXQ8aW50PiB0bXAobnVtczEuYmVnaW4oKSxudW1zMS5lbmQoKSk7XG5cbiAgICAgICAgLy8g5L2/55SoU0VUXG4gICAgICAgIGZvcihpbnQgbnVtIDogbnVtczIpe1xuICAgICAgICAgICAgLy8gdG1wLmZpbmQobnVtKSDmnKrmib7liLDliJnov5Tlm550bXAuZW5kKClcbiAgICAgICAgICAgIGlmKHRtcC5maW5kKG51bSkgIT0gdG1wLmVuZCgpKXtcbiAgICAgICAgICAgICAgICByZXN1bHQuaW5zZXJ0KG51bSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdmVjdG9yPGludD4ocmVzdWx0LmJlZ2luKCksIHJlc3VsdC5lbmQoKSk7O1xuICAgIH1cbn07XG5cblxuMVxuMlxuM1xuNFxuNVxuNlxuN1xuOFxuOVxuMTBcbjExXG4xMlxuMTNcbjE0XG4xNVxuMTZcbjE3XG4xOFxuXG5cblxuIyDmgLvnu5NcblxuICogU0VUIOaVsOaNrue7k+aehOeahOaXoOmHjeWkjVxuICog6L+t5Luj5Zmo55qE5L2/55SoXG5cblxuIyAyMDIuIOW/q+S5kOaVsFxuXG4gKiDpopjnm67vvJoyMDIuIOW/q+S5kOaVsFxuXG4gKiDorrLop6PvvJrmlofnq6DorrLop6NcblxuICog6KaB5rGC77yac2V0IOeahOW6lOeUqFxuXG5cbiMg5b2V5YmN5oOz5rOVXG5cbuaatOWKm+axguWSjOWIpOaWreaYr+WQpuS4uiAx77yM6Iul5Ye6546w5ZKM5Li65Liq5L2N5pWw5LiU5LiN5Li6IDEg5bCx5pivIGZhbHNlXG5cbuS4i+mdouaYr+S7o+eggeWunueOsO+8jOacqumAmui/hyAo4p2MKVxuXG5jbGFzcyBTb2x1dGlvbiB7XG5wdWJsaWM6XG4gICAgYm9vbCBpc0hhcHB5KGludCBuKSB7XG5cbiAgICAgICAgaWYobiA9PSAxKXtyZXR1cm4gdHJ1ZTt9XG5cbiAgICAgICAgLy8g5aSH5Lu9blxuICAgICAgICBpbnQgdG1wO1xuICAgICAgICBpbnQgbGVuID0gMCxzdW0gPSAwLHA7XG5cbiAgICAgICAgd2hpbGUoMSl7XG5cbiAgICAgICAgICAgIC8vIOWkh+S7vW5cbiAgICAgICAgICAgIHRtcCA9IG47XG4gICAgICAgICAgICAvLyDliJ3lp4vljJbjgIHlvZLpm7ZcbiAgICAgICAgICAgIGxlbiA9IDA7XG4gICAgICAgICAgICBwID0gMTA7XG4gICAgICAgICAgICBzdW0gPSAwO1xuXG4gICAgICAgICAgICAvLyDliKTmlq1u5pyJ5Yeg5L2NXG4gICAgICAgICAgICB3aGlsZSh0bXAgIT0gMCl7XG4gICAgICAgICAgICAgICAgdG1wIC89IDEwO1xuICAgICAgICAgICAgICAgICsrbGVuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyDoi6Xlh7rnjrDkuKrkvY3liJnnm7TmjqXov5Tlm55mYWxzZVxuICAgICAgICAgICAgaWYobGVuID09IDEpe1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdG1wID0gbjtcblxuICAgICAgICAgICAgLy8g5b6q546v6K6w5b2V5bmz5pa55ZKMXG4gICAgICAgICAgICB3aGlsZShsZW4tLSl7XG5cbiAgICAgICAgICAgICAgICAvLyDlj5bmlbBcbiAgICAgICAgICAgICAgICB0bXAgPSBuJXA7XG4gICAgICAgICAgICAgICAgLy8g6K6w5b2V5ZKMXG4gICAgICAgICAgICAgICAgc3VtICs9IHRtcCAqIHRtcDtcblxuICAgICAgICAgICAgICAgIGlmKGxlbiA9PSAxKXtcbiAgICAgICAgICAgICAgICAgICAgdG1wID0gbi9wO1xuICAgICAgICAgICAgICAgICAgICBzdW0gKz0gdG1wICogdG1wO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgcCAqPSAxMDsgXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIOWIpOaWreaYr+WQpuS4ujFcbiAgICAgICAgICAgIGlmKHN1bSA9PSAxKXtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgIG4gPSBzdW07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgIH1cbn07XG5cblxuMVxuMlxuM1xuNFxuNVxuNlxuN1xuOFxuOVxuMTBcbjExXG4xMlxuMTNcbjE0XG4xNVxuMTZcbjE3XG4xOFxuMTlcbjIwXG4yMVxuMjJcbjIzXG4yNFxuMjVcbjI2XG4yN1xuMjhcbjI5XG4zMFxuMzFcbjMyXG4zM1xuMzRcbjM1XG4zNlxuMzdcbjM4XG4zOVxuNDBcbjQxXG40MlxuNDNcbjQ0XG40NVxuNDZcbjQ3XG40OFxuNDlcbjUwXG41MVxuNTJcbjUzXG41NFxuNTVcbjU2XG41N1xuNThcbjU5XG5cblxu5bqU6K+l5piv5oCd6Lev6ZSZ5LqG77yM5LiU5bm25rKh5pyJ55So5LiKIHNldFxuXG5cbiMg5b2V5ZCO5oOz5rOVXG5cbiAqIOS8miDml6DpmZDlvqrnjq/vvIzpgqPkuYjkuZ/lsLHmmK/or7TmsYLlkoznmoTov4fnqIvkuK3vvIxzdW0g5Lya6YeN5aSN5Ye6546w77yM6L+Z5a+56Kej6aKY5b6I6YeN6KaB77yBXG5cbueci+S6huWNoeWTpeeahOiusuino+WQjuWPkeeOsOaYr+aAnei3r+mUmeS6hu+8jOS4jeaYr+WHuueOsCBzdW0g5Li65Liq5L2N5pWw5pe26L+U5ZueIGZhbHNl77yM6ICM5piv5Ye6546w5LqG6YeN5aSN55qEIHN1bVxuXG7moLnmja7ov5nkuKrmgJ3ot6/lj6/ku6Xlhpnlh7rku6XkuIvku6PnoIHvvJpBQyAo4pyU77iPKVxuXG5jbGFzcyBTb2x1dGlvbiB7XG5wdWJsaWM6XG4gICAgYm9vbCBpc0hhcHB5KGludCBuKSB7XG5cbiAgICAgICAgaW50IHN1bTtcbiAgICAgICAgdW5vcmRlcmVkX3NldDxpbnQ+IHRtcDtcblxuICAgICAgICB3aGlsZSgxKXtcblxuICAgICAgICAgICAgLy8g5b6q546v6K6w5b2V5bmz5pa55ZKMXG4gICAgICAgICAgICBzdW0gPSAwO1xuICAgICAgICAgICAgd2hpbGUobil7XG4gICAgICAgICAgICAgICAgLy8g5Y+W5Liq5pWw5pWw5bm25bmz5pa55ZKMXG4gICAgICAgICAgICAgICAgc3VtICs9IChuJTEwKSoobiUxMCk7XG4gICAgICAgICAgICAgICAgLy8g57yp55+t5L2N5pWw77yI5YmU6Zmk5Liq5L2N77yJXG4gICAgICAgICAgICAgICAgbiAvPSAxMDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8g5Yik5pat5piv5ZCm5Li6MVxuICAgICAgICAgICAgaWYoc3VtID09IDEpe1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgbiA9IHN1bTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gc3Vt5pu+57uP5Ye6546w6L+HXG4gICAgICAgICAgICBpZih0bXAuZmluZChzdW0pICE9IHRtcC5lbmQoKSl7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgdG1wLmluc2VydChzdW0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cbiAgICB9XG59O1xuXG5cbjFcbjJcbjNcbjRcbjVcbjZcbjdcbjhcbjlcbjEwXG4xMVxuMTJcbjEzXG4xNFxuMTVcbjE2XG4xN1xuMThcbjE5XG4yMFxuMjFcbjIyXG4yM1xuMjRcbjI1XG4yNlxuMjdcbjI4XG4yOVxuMzBcbjMxXG4zMlxuMzNcbjM0XG4zNVxuXG5cblxuIyDmgLvnu5NcblxuICog5peg6ZmQ5b6q546vID0g5Lya6YeN5aSN5Ye6546w5YC8XG5cbiAqIOWIhuino+ato+aVsOeahOS4quS9jeaVsFxuICAgXG4gICB3aGlsZShuKXtcbiAgICAgICAvLyDlj5bkuKrmlbDmlbDlubblubPmlrnlkoxcbiAgICAgICBzdW0gKz0gKG4lMTApKihuJTEwKTtcbiAgICAgICAvLyDnvKnnn63kvY3mlbDvvIjliZTpmaTkuKrkvY3vvIlcbiAgICAgICBuIC89IDEwO1xuICAgfVxuICAgXG4gICBcbiAgIDFcbiAgIDJcbiAgIDNcbiAgIDRcbiAgIDVcbiAgIDZcbiAgIFxuXG5cbiMgMS4g5Lik5pWw5LmL5ZKMXG5cbiAqIOmimOebru+8mjEuIOS4pOaVsOS5i+WSjFxuXG4gKiDorrLop6PvvJrmlofnq6DorrLop6PjgIHop4bpopHorrLop6NcblxuICog6KaB5rGC77yabWFwIOino+WGs+WTiOW4jOmXrumimFxuXG5cbiMg5b2V5YmN5oOz5rOVXG5cbiAxLiDlj6/ku6XmmrTlipvnmoTlvqrnjq/mr5Tlr7lcbiAyLiDliKnnlKjnm7jliqDvvIzkvb/nlKggTUFQIOaVsOaNrue7k+aehOS/neWtmOWAvO+8jOW/q+mAn+WMuemFjVxuXG5NQVAg55qE5o6M5o+h5LiN54af77yM5LiL6Z2i5Luj56CB5Li65pq05Yqb6Kej5rOV77yM5beyIEFDICjinJTvuI8pXG5cbmNsYXNzIFNvbHV0aW9uIHtcbnB1YmxpYzpcbiAgICB2ZWN0b3I8aW50PiB0d29TdW0odmVjdG9yPGludD4mIG51bXMsIGludCB0YXJnZXQpIHtcbiAgICAgICAgXG4gICAgICAgZm9yKGludCBpID0gMDsgaSA8IG51bXMuc2l6ZSgpOysraSl7XG4gICAgICAgICAgICBmb3IoaW50IGogPSBpICsgMTsgaiA8IG51bXMuc2l6ZSgpOysrail7XG4gICAgICAgICAgICAgICAgaWYobnVtc1tpXStudW1zW2pdID09IHRhcmdldCl7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7aSxqfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7fTtcbiAgICB9XG59O1xuXG5cbjFcbjJcbjNcbjRcbjVcbjZcbjdcbjhcbjlcbjEwXG4xMVxuMTJcbjEzXG4xNFxuMTVcblxuXG5cbiMg5b2V5ZCO5oOz5rOVXG5cbuaAnei3r+ato+ehru+8jOmhuuS+v+WtpuS5oOS7peS4iyBtYXAg55So5rOV77yMQUMgKOKclO+4jylcblxuY2xhc3MgU29sdXRpb24ge1xucHVibGljOlxuICAgIHZlY3RvcjxpbnQ+IHR3b1N1bSh2ZWN0b3I8aW50PiYgbnVtcywgaW50IHRhcmdldCkge1xuICAgICAgICBcbiAgICAgICAgLy8g5bCGbnVtc+ijheWFpW1hcOS4rVxuICAgICAgICBzdGQ6OnVub3JkZXJlZF9tYXAgPGludCxpbnQ+IG1hcDtcbiAgICAgICAgZm9yKGludCBpID0gMDsgaSA8IG51bXMuc2l6ZSgpOyArK2kpe1xuICAgICAgICAgICAgYXV0byBpdGVyID0gbWFwLmZpbmQodGFyZ2V0IC0gbnVtc1tpXSk7IFxuICAgICAgICAgICAgaWYoaXRlciAhPSBtYXAuZW5kKCkpe1xuICAgICAgICAgICAgICAgIC8vIGl0ZXItPnNlY29uZCDkuIvmoIdcbiAgICAgICAgICAgICAgICAvLyBpdGVyLT5mcmlzdCAg5YC8XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtpdGVyLT5zZWNvbmQsIGl9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbWFwLmluc2VydChwYWlyPGludCwgaW50PihudW1zW2ldLCBpKSk7IFxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHt9O1xuICAgIH1cbn07XG5cblxuMVxuMlxuM1xuNFxuNVxuNlxuN1xuOFxuOVxuMTBcbjExXG4xMlxuMTNcbjE0XG4xNVxuMTZcbjE3XG4xOFxuMTlcblxuXG5cbiMg5oC757uTXG5cbiAqIOWIpOaWrSBrZXkg5pyJ5bqP5peg5bqP6YCJ5oup5L2/55SoIE1BUFxuXG7mmKDlsIQgICAgICAgICAgICAgICAgICAg5bqV5bGC5a6e546wICAg5piv5ZCm5pyJ5bqPICAgICDmlbDlgLzmmK/lkKblj6/ku6Xph43lpI0gICDog73lkKbmm7TmlLnmlbDlgLwgICAgIOafpeivouaViOeOhyAgICAgICDlop7liKDmlYjnjodcbnN0ZDo6bWFwICAgICAgICAgICAgIOe6oum7keagkSAgICBrZXkg5pyJ5bqPICAga2V5IOS4jeWPr+mHjeWkjSAgIGtleSDkuI3lj6/kv67mlLkgICBPKGxvZyBuKSAgIE8obG9nIG4pXG5zdGQ6Om11bHRpbWFwICAgICAgICDnuqLpu5HmoJEgICAga2V5IOacieW6jyAgIGtleSDlj6/ph43lpI0gICAga2V5IOS4jeWPr+S/ruaUuSAgIE8obG9nIG4pICAgTyhsb2cgbilcbnN0ZDo6dW5vcmRlcmVkX21hcCAgIOWTiOW4jOihqCAgICBrZXkg5peg5bqPICAga2V5IOS4jeWPr+mHjeWkjSAgIGtleSDkuI3lj6/kv67mlLkgICBPKDEpICAgICAgIE8oMSlcblxuXG4jIOaAu+e7k1xuXG4gMS4g5pWw57uE44CBU0VUIOmbhuWQiOOAgU1BUCDnmoTlupTnlKhcblxuICogU0VUIOmbhuWQiO+8muafpeWFg+e0oOOAgeS/neWtmOS4jemHjeWkjVxuICogTUFQ77ya5p+l5YWD57Sg77yM6ZyA6KaB5LiL5qCHXG5cbumbhuWQiCAgICAgICAgICAgICAgICAgICAgICAg5bqV5bGC5a6e546wICAg5piv5ZCm5pyJ5bqPICAg5pWw5YC85piv5ZCm5Y+v5Lul6YeN5aSNICAg6IO95ZCm5pu05pS55pWw5YC8ICAg5p+l6K+i5pWI546HICAgICAgIOWinuWIoOaViOeOh1xuc3RkOjpzZXQgICAgICAgICAgICAgICAgIOe6oum7keagkSAgICDmnInluo8gICAgIOWQpiAgICAgICAgICDlkKYgICAgICAgIE8obG9nIG4pICAgTyhsb2cgbilcbnN0ZDo6bXVsdGlzZXQgICAgICAgICAgICDnuqLpu5HmoJEgICAg5pyJ5bqPICAgICDmmK8gICAgICAgICAg5ZCmICAgICAgICBPKGxvZ24pICAgIE8obG9nbilcbnN0ZDo6dW5vcmRlcmVkX3NldCjinJTvuI8pICAg5ZOI5biM6KGoICAgIOaXoOW6jyAgICAg5ZCmICAgICAgICAgIOWQpiAgICAgICAgTygxKSAgICAgICBPKDEpXG5cbi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxu5pig5bCEICAgICAgICAgICAgICAgICAgIOW6leWxguWunueOsCAgIOaYr+WQpuacieW6jyAgICAg5pWw5YC85piv5ZCm5Y+v5Lul6YeN5aSNICAg6IO95ZCm5pu05pS55pWw5YC8ICAgICDmn6Xor6LmlYjnjocgICAgICAg5aKe5Yig5pWI546HXG5zdGQ6Om1hcCAgICAgICAgICAgICDnuqLpu5HmoJEgICAga2V5IOacieW6jyAgIGtleSDkuI3lj6/ph43lpI0gICBrZXkg5LiN5Y+v5L+u5pS5ICAgTyhsb2duKSAgICBPKGxvZ24pXG5zdGQ6Om11bHRpbWFwICAgICAgICDnuqLpu5HmoJEgICAga2V5IOacieW6jyAgIGtleSDlj6/ph43lpI0gICAga2V5IOS4jeWPr+S/ruaUuSAgIE8obG9nIG4pICAgTyhsb2cgbilcbnN0ZDo6dW5vcmRlcmVkX21hcCAgIOWTiOW4jOihqCAgICBrZXkg5peg5bqPICAga2V5IOS4jeWPr+mHjeWkjSAgIGtleSDkuI3lj6/kv67mlLkgICBPKDEpICAgICAgIE8oMSlcblxuIDIuIOi/reS7o+WZqOeahOS9v+eUqFxuXG4vLyDliKTmlq3lhYPntKDmmK/lkKblh7rnjrDov4dcbmlmKHRtcC5maW5kKHN1bSkgIT0gdG1wLmVuZCgpKXt9XG5cblxuMVxuMlxuXG4gMy4g5Liq5L2N6L+Q566XXG5cbndoaWxlKG4pe1xuXHRzdW0gKz0gbiUxMDsgLy8gbiUxMOS4quS9jVxuXHRuIC89IDEwOyAgICAgLy8g5YmU6Zmk5bey5L2/55So5Liq5L2NXG59XG5cblxuMVxuMlxuM1xuNFxuIiwKICAgICJub3JtYWxpemVkQ29udGVudCI6ICI+IOWTiOW4jOihqOeQhuiuuuWfuuehgOOAgTI0Mi4g5pyJ5pWI55qE5a2X5q+N5byC5L2N6K+N44CBMzQ5LiDkuKTkuKrmlbDnu4TnmoTkuqTpm4bjgIEyMDIuIOW/q+S5kOaVsOOAgTEuIOS4pOaVsOS5i+WSjFxuXG5cbiMg5ZOI5biM6KGo55CG6K665Z+656GAXG5cbiAqIOiusuino1xuXG4gKiDopoHmsYLvvJrkuobop6Plk4jluIzooajnmoTlhoXpg6jlrp7njrDljp/nkIbvvIzlk4jluIzlh73mlbDvvIzlk4jluIznorDmkp7vvIzku6Xlj4rluLjop4Hlk4jluIzooajnmoTljLrliKvvvIzmlbDnu4TvvIxzZXQg5ZKMIG1hcFxuXG7mgLvnu5PvvJpcblxuIDEuIOW9k+aIkeS7rOmBh+WIsOS6huimgeW/q+mAn+WIpOaWreS4gOS4quWFg+e0oOaYr+WQpuWHuueOsOmbhuWQiOmHjOeahOaXtuWAme+8jOWwseimgeiAg+iZkeWTiOW4jOazlVxuIDIuIOeJuueJsuS6huepuumXtOaNouWPluS6huaXtumXtFxuXG7pm4blkIggICAgICAgICAgICAgICAgICAgICAgIOW6leWxguWunueOsCAgIOaYr+WQpuacieW6jyAgIOaVsOWAvOaYr+WQpuWPr+S7pemHjeWkjSAgIOiDveWQpuabtOaUueaVsOWAvCAgIOafpeivouaViOeOhyAgICAgICDlop7liKDmlYjnjodcbnN0ZDo6c2V0ICAgICAgICAgICAgICAgICDnuqLpu5HmoJEgICAg5pyJ5bqPICAgICDlkKYgICAgICAgICAg5ZCmICAgICAgICBvKGxvZyBuKSAgIG8obG9nIG4pXG5zdGQ6Om11bHRpc2V0ICAgICAgICAgICAg57qi6buR5qCRICAgIOacieW6jyAgICAg5pivICAgICAgICAgIOWQpiAgICAgICAgbyhsb2duKSAgICBvKGxvZ24pXG5zdGQ6OnVub3JkZXJlZF9zZXQo4pyU77iPKSAgIOWTiOW4jOihqCAgICDml6Dluo8gICAgIOWQpiAgICAgICAgICDlkKYgICAgICAgIG8oMSkgICAgICAgbygxKVxuXG4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbuaYoOWwhCAgICAgICAgICAgICAgICAgICDlupXlsYLlrp7njrAgICDmmK/lkKbmnInluo8gICAgIOaVsOWAvOaYr+WQpuWPr+S7pemHjeWkjSAgIOiDveWQpuabtOaUueaVsOWAvCAgICAg5p+l6K+i5pWI546HICAgICAgIOWinuWIoOaViOeOh1xuc3RkOjptYXAgICAgICAgICAgICAg57qi6buR5qCRICAgIGtleSDmnInluo8gICBrZXkg5LiN5Y+v6YeN5aSNICAga2V5IOS4jeWPr+S/ruaUuSAgIG8obG9nbikgICAgbyhsb2duKVxuc3RkOjptdWx0aW1hcCAgICAgICAg57qi6buR5qCRICAgIGtleSDmnInluo8gICBrZXkg5Y+v6YeN5aSNICAgIGtleSDkuI3lj6/kv67mlLkgICBvKGxvZyBuKSAgIG8obG9nIG4pXG5zdGQ6OnVub3JkZXJlZF9tYXAgICDlk4jluIzooaggICAga2V5IOaXoOW6jyAgIGtleSDkuI3lj6/ph43lpI0gICBrZXkg5LiN5Y+v5L+u5pS5ICAgbygxKSAgICAgICBvKDEpXG5cblxuIyAyNDIuIOacieaViOeahOWtl+avjeW8guS9jeivjVxuXG4gKiDpopjnm67vvJoyNDIuIOacieaViOeahOWtl+avjeW8guS9jeivjVxuXG4gKiDorrLop6PvvJrmlofnq6DorrLop6PjgIHop4bpopHorrLop6NcblxuICog6KaB5rGC77ya5pWw57uE55So5p2l5YGa5ZOI5biM6KGoXG5cblxuIyDlvZXliY3mg7Pms5Vcblxu5oyJ6KaB5rGC77yM5pWw57uE5L2c5Li65ZOI5biM6KGo5p2l6K6w5b2V5q+P5Liq5a2X56ym77yMcyDlrZfnrKbkuLLnmoTlrZfnrKYgKyvvvIx0IOWtl+espuS4sueahOWtl+espiAtLe+8jOiLpeacgOWQjiB0bXAg5pWw57uE5Lit6YO95Li6IDAg5YiZ5Li65pyJ5pWI55qE5a2X5q+N5byC5L2N6K+N44CCXG5cbuS7peS4i+S7o+eggeW3siBhYyAo4pyU77iPKVxuXG5jbGFzcyBzb2x1dGlvbiB7XG5wdWJsaWM6XG4gICAgYm9vbCBpc2FuYWdyYW0oc3RyaW5nIHMsIHN0cmluZyB0KSB7XG4gICAgICAgIFxuICAgICAgICBpZihzLnNpemUoKSAhPSB0LnNpemUoKSl7cmV0dXJuIGZhbHNlO31cblxuICAgICAgICAvLyDliJ3lp4vljJbmlbDnu4RcbiAgICAgICAgaW50IHRtcFsyNl0gPSB7MH07XG5cbiAgICAgICAgLy8gcy5zaXplKCkgPT0gdC5zaXplKClcbiAgICAgICAgZm9yKGludCBpID0gMDsgaSA8IHMuc2l6ZSgpOysraSl7XG4gICAgICAgICAgICAvLyDorrDlvZVz5a2X56ym5LiyXG4gICAgICAgICAgICB0bXBbc1tpXSAtICdhJ10rKztcbiAgICAgICAgICAgIC8vIOS7jnRtcOS4reWIoOmZpHTlrZfnrKbkuLLlrZfnrKZcbiAgICAgICAgICAgIHRtcFt0W2ldIC0gJ2EnXS0tO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8g5p+l55yLdG1w5piv5ZCm5YWo5Li6MFxuICAgICAgICBmb3IoaW50IGkgPSAwOyBpIDwgMjY7KytpKXtcbiAgICAgICAgICAgIGNvdXQ8PHRtcFtpXTw8ZW5kbDtcbiAgICAgICAgICAgIGlmKHRtcFtpXSAhPSAwKXtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiBcbiAgICB9XG59O1xuXG5cbjFcbjJcbjNcbjRcbjVcbjZcbjdcbjhcbjlcbjEwXG4xMVxuMTJcbjEzXG4xNFxuMTVcbjE2XG4xN1xuMThcbjE5XG4yMFxuMjFcbjIyXG4yM1xuMjRcbjI1XG4yNlxuMjdcbjI4XG4yOVxuXG4gKiDml7bpl7TlpI3mnYLluqY6IG8gKG4pXG4gKiDnqbrpl7TlpI3mnYLluqY6IG8gKDEpXG5cblxuIyDlvZXlkI7mg7Pms5Vcblxu5oCd6Lev5LiA6Ie04pyM77iPXG5cblxuIyDmgLvnu5Ncblxu5pegXG5cblxuIyAzNDkuIOS4pOS4quaVsOe7hOeahOS6pOmbhlxuXG4gKiDpopjnm67vvJozNDkuIOS4pOS4quaVsOe7hOeahOS6pOmbhlxuXG4gKiDorrLop6PvvJrmlofnq6DorrLop6PjgIHop4bpopHorrLop6NcblxuICog6KaB5rGC77ya5L2/55So5pWw57uE5ZKMIHNldCDkuKTnp43op6Pms5VcblxuXG4jIOW9leWJjeaDs+azlVxuXG4+IOaVsOe7hFxuXG4gMS4g5a6a5LmJIHNldCDmlbDmja7nu5PmnoTvvIzpmLLmraLnu5Pmnpzph43lpI1cbiAyLiDlrprkuYkgMTAwMCDmlbDnu4RcbiAzLiDorrDlvZUgbnVtczEg5bm25Yik5patIG51bXMyIOaYr+WQpuWtmOWcqFxuIDQuIOexu+Wei+i9rOaNouW5tui/lOWbnlxuXG7lt7IgYWMgKOKclO+4jylcblxuY2xhc3Mgc29sdXRpb24ge1xucHVibGljOlxuICAgIHZlY3RvcjxpbnQ+IGludGVyc2VjdGlvbih2ZWN0b3I8aW50PiYgbnVtczEsIHZlY3RvcjxpbnQ+JiBudW1zMikge1xuICAgICAgICAvLyDljrvph43nu5Pmnpzpm4ZcbiAgICAgICAgdW5vcmRlcmVkX3NldDxpbnQ+IHJlc3VsdDtcblxuICAgICAgICAvLyDkvb/nlKjmlbDnu4RcbiAgICAgICAgaW50IHRtcFsxMDAwXSA9IHswfTtcblxuICAgICAgICAvLyDorrDlvZVudW1zMVxuICAgICAgICBmb3IoaW50IGkgPSAwO2kgPCBudW1zMS5zaXplKCk7KytpKXtcbiAgICAgICAgICAgIHRtcFtudW1zMVtpXV0gPSAxO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8g5Yik5patbnVtczLlhYPntKDmmK/lkKblrZjlnKhcbiAgICAgICAgZm9yKGludCBpID0gMDtpIDwgbnVtczIuc2l6ZSgpOysraSl7XG4gICAgICAgICAgICBpZih0bXBbbnVtczJbaV1dID09IDEpe1xuICAgICAgICAgICAgICAgIHJlc3VsdC5pbnNlcnQobnVtczJbaV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHZlY3RvcjxpbnQ+KHJlc3VsdC5iZWdpbigpLCByZXN1bHQuZW5kKCkpOztcbiAgICB9XG59O1xuXG5cbjFcbjJcbjNcbjRcbjVcbjZcbjdcbjhcbjlcbjEwXG4xMVxuMTJcbjEzXG4xNFxuMTVcbjE2XG4xN1xuMThcbjE5XG4yMFxuMjFcbjIyXG4yM1xuMjRcblxuXG4+IHNldCDmlbDmja7nu5PmnoRcblxu5YaZ5Ye65p2l5ZKM5LiK6Z2i5pWw57uE5beu5LiN5aSa77yM5a+5IHNldCDmlbDmja7nu5PmnoTmk43kvZzkuI3nhp/nu4PjgIJcblxuXG4jIOW9leWQjuaDs+azlVxuXG7kuLvopoHmmK/ov63ku6PlmajnmoTkvb/nlKjvvIxhYyAo4pyU77iPKVxuXG5jbGFzcyBzb2x1dGlvbiB7XG5wdWJsaWM6XG4gICAgdmVjdG9yPGludD4gaW50ZXJzZWN0aW9uKHZlY3RvcjxpbnQ+JiBudW1zMSwgdmVjdG9yPGludD4mIG51bXMyKSB7XG4gICAgICAgIC8vIOWOu+mHjee7k+aenOmbhlxuICAgICAgICB1bm9yZGVyZWRfc2V0PGludD4gcmVzdWx0O1xuICAgICAgICB1bm9yZGVyZWRfc2V0PGludD4gdG1wKG51bXMxLmJlZ2luKCksbnVtczEuZW5kKCkpO1xuXG4gICAgICAgIC8vIOS9v+eUqHNldFxuICAgICAgICBmb3IoaW50IG51bSA6IG51bXMyKXtcbiAgICAgICAgICAgIC8vIHRtcC5maW5kKG51bSkg5pyq5om+5Yiw5YiZ6L+U5ZuedG1wLmVuZCgpXG4gICAgICAgICAgICBpZih0bXAuZmluZChudW0pICE9IHRtcC5lbmQoKSl7XG4gICAgICAgICAgICAgICAgcmVzdWx0Lmluc2VydChudW0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHZlY3RvcjxpbnQ+KHJlc3VsdC5iZWdpbigpLCByZXN1bHQuZW5kKCkpOztcbiAgICB9XG59O1xuXG5cbjFcbjJcbjNcbjRcbjVcbjZcbjdcbjhcbjlcbjEwXG4xMVxuMTJcbjEzXG4xNFxuMTVcbjE2XG4xN1xuMThcblxuXG5cbiMg5oC757uTXG5cbiAqIHNldCDmlbDmja7nu5PmnoTnmoTml6Dph43lpI1cbiAqIOi/reS7o+WZqOeahOS9v+eUqFxuXG5cbiMgMjAyLiDlv6vkuZDmlbBcblxuICog6aKY55uu77yaMjAyLiDlv6vkuZDmlbBcblxuICog6K6y6Kej77ya5paH56ug6K6y6KejXG5cbiAqIOimgeaxgu+8mnNldCDnmoTlupTnlKhcblxuXG4jIOW9leWJjeaDs+azlVxuXG7mmrTlipvmsYLlkozliKTmlq3mmK/lkKbkuLogMe+8jOiLpeWHuueOsOWSjOS4uuS4quS9jeaVsOS4lOS4jeS4uiAxIOWwseaYryBmYWxzZVxuXG7kuIvpnaLmmK/ku6PnoIHlrp7njrDvvIzmnKrpgJrov4cgKOKdjClcblxuY2xhc3Mgc29sdXRpb24ge1xucHVibGljOlxuICAgIGJvb2wgaXNoYXBweShpbnQgbikge1xuXG4gICAgICAgIGlmKG4gPT0gMSl7cmV0dXJuIHRydWU7fVxuXG4gICAgICAgIC8vIOWkh+S7vW5cbiAgICAgICAgaW50IHRtcDtcbiAgICAgICAgaW50IGxlbiA9IDAsc3VtID0gMCxwO1xuXG4gICAgICAgIHdoaWxlKDEpe1xuXG4gICAgICAgICAgICAvLyDlpIfku71uXG4gICAgICAgICAgICB0bXAgPSBuO1xuICAgICAgICAgICAgLy8g5Yid5aeL5YyW44CB5b2S6Zu2XG4gICAgICAgICAgICBsZW4gPSAwO1xuICAgICAgICAgICAgcCA9IDEwO1xuICAgICAgICAgICAgc3VtID0gMDtcblxuICAgICAgICAgICAgLy8g5Yik5patbuacieWHoOS9jVxuICAgICAgICAgICAgd2hpbGUodG1wICE9IDApe1xuICAgICAgICAgICAgICAgIHRtcCAvPSAxMDtcbiAgICAgICAgICAgICAgICArK2xlbjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8g6Iul5Ye6546w5Liq5L2N5YiZ55u05o6l6L+U5ZueZmFsc2VcbiAgICAgICAgICAgIGlmKGxlbiA9PSAxKXtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRtcCA9IG47XG5cbiAgICAgICAgICAgIC8vIOW+queOr+iusOW9leW5s+aWueWSjFxuICAgICAgICAgICAgd2hpbGUobGVuLS0pe1xuXG4gICAgICAgICAgICAgICAgLy8g5Y+W5pWwXG4gICAgICAgICAgICAgICAgdG1wID0gbiVwO1xuICAgICAgICAgICAgICAgIC8vIOiusOW9leWSjFxuICAgICAgICAgICAgICAgIHN1bSArPSB0bXAgKiB0bXA7XG5cbiAgICAgICAgICAgICAgICBpZihsZW4gPT0gMSl7XG4gICAgICAgICAgICAgICAgICAgIHRtcCA9IG4vcDtcbiAgICAgICAgICAgICAgICAgICAgc3VtICs9IHRtcCAqIHRtcDtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHAgKj0gMTA7IFxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyDliKTmlq3mmK/lkKbkuLoxXG4gICAgICAgICAgICBpZihzdW0gPT0gMSl7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICBuID0gc3VtO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICB9XG59O1xuXG5cbjFcbjJcbjNcbjRcbjVcbjZcbjdcbjhcbjlcbjEwXG4xMVxuMTJcbjEzXG4xNFxuMTVcbjE2XG4xN1xuMThcbjE5XG4yMFxuMjFcbjIyXG4yM1xuMjRcbjI1XG4yNlxuMjdcbjI4XG4yOVxuMzBcbjMxXG4zMlxuMzNcbjM0XG4zNVxuMzZcbjM3XG4zOFxuMzlcbjQwXG40MVxuNDJcbjQzXG40NFxuNDVcbjQ2XG40N1xuNDhcbjQ5XG41MFxuNTFcbjUyXG41M1xuNTRcbjU1XG41NlxuNTdcbjU4XG41OVxuXG5cbuW6lOivpeaYr+aAnei3r+mUmeS6hu+8jOS4lOW5tuayoeacieeUqOS4iiBzZXRcblxuXG4jIOW9leWQjuaDs+azlVxuXG4gKiDkvJog5peg6ZmQ5b6q546v77yM6YKj5LmI5Lmf5bCx5piv6K+05rGC5ZKM55qE6L+H56iL5Lit77yMc3VtIOS8mumHjeWkjeWHuueOsO+8jOi/meWvueino+mimOW+iOmHjeimge+8gVxuXG7nnIvkuobljaHlk6XnmoTorrLop6PlkI7lj5HnjrDmmK/mgJ3ot6/plJnkuobvvIzkuI3mmK/lh7rnjrAgc3VtIOS4uuS4quS9jeaVsOaXtui/lOWbniBmYWxzZe+8jOiAjOaYr+WHuueOsOS6humHjeWkjeeahCBzdW1cblxu5qC55o2u6L+Z5Liq5oCd6Lev5Y+v5Lul5YaZ5Ye65Lul5LiL5Luj56CB77yaYWMgKOKclO+4jylcblxuY2xhc3Mgc29sdXRpb24ge1xucHVibGljOlxuICAgIGJvb2wgaXNoYXBweShpbnQgbikge1xuXG4gICAgICAgIGludCBzdW07XG4gICAgICAgIHVub3JkZXJlZF9zZXQ8aW50PiB0bXA7XG5cbiAgICAgICAgd2hpbGUoMSl7XG5cbiAgICAgICAgICAgIC8vIOW+queOr+iusOW9leW5s+aWueWSjFxuICAgICAgICAgICAgc3VtID0gMDtcbiAgICAgICAgICAgIHdoaWxlKG4pe1xuICAgICAgICAgICAgICAgIC8vIOWPluS4quaVsOaVsOW5tuW5s+aWueWSjFxuICAgICAgICAgICAgICAgIHN1bSArPSAobiUxMCkqKG4lMTApO1xuICAgICAgICAgICAgICAgIC8vIOe8qeefreS9jeaVsO+8iOWJlOmZpOS4quS9je+8iVxuICAgICAgICAgICAgICAgIG4gLz0gMTA7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIOWIpOaWreaYr+WQpuS4ujFcbiAgICAgICAgICAgIGlmKHN1bSA9PSAxKXtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgIG4gPSBzdW07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIHN1beabvue7j+WHuueOsOi/h1xuICAgICAgICAgICAgaWYodG1wLmZpbmQoc3VtKSAhPSB0bXAuZW5kKCkpe1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgIHRtcC5pbnNlcnQoc3VtKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG4gICAgfVxufTtcblxuXG4xXG4yXG4zXG40XG41XG42XG43XG44XG45XG4xMFxuMTFcbjEyXG4xM1xuMTRcbjE1XG4xNlxuMTdcbjE4XG4xOVxuMjBcbjIxXG4yMlxuMjNcbjI0XG4yNVxuMjZcbjI3XG4yOFxuMjlcbjMwXG4zMVxuMzJcbjMzXG4zNFxuMzVcblxuXG5cbiMg5oC757uTXG5cbiAqIOaXoOmZkOW+queOryA9IOS8mumHjeWkjeWHuueOsOWAvFxuXG4gKiDliIbop6PmraPmlbDnmoTkuKrkvY3mlbBcbiAgIFxuICAgd2hpbGUobil7XG4gICAgICAgLy8g5Y+W5Liq5pWw5pWw5bm25bmz5pa55ZKMXG4gICAgICAgc3VtICs9IChuJTEwKSoobiUxMCk7XG4gICAgICAgLy8g57yp55+t5L2N5pWw77yI5YmU6Zmk5Liq5L2N77yJXG4gICAgICAgbiAvPSAxMDtcbiAgIH1cbiAgIFxuICAgXG4gICAxXG4gICAyXG4gICAzXG4gICA0XG4gICA1XG4gICA2XG4gICBcblxuXG4jIDEuIOS4pOaVsOS5i+WSjFxuXG4gKiDpopjnm67vvJoxLiDkuKTmlbDkuYvlkoxcblxuICog6K6y6Kej77ya5paH56ug6K6y6Kej44CB6KeG6aKR6K6y6KejXG5cbiAqIOimgeaxgu+8mm1hcCDop6PlhrPlk4jluIzpl67pophcblxuXG4jIOW9leWJjeaDs+azlVxuXG4gMS4g5Y+v5Lul5pq05Yqb55qE5b6q546v5q+U5a+5XG4gMi4g5Yip55So55u45Yqg77yM5L2/55SoIG1hcCDmlbDmja7nu5PmnoTkv53lrZjlgLzvvIzlv6vpgJ/ljLnphY1cblxubWFwIOeahOaOjOaPoeS4jeeGn++8jOS4i+mdouS7o+eggeS4uuaatOWKm+ino+azle+8jOW3siBhYyAo4pyU77iPKVxuXG5jbGFzcyBzb2x1dGlvbiB7XG5wdWJsaWM6XG4gICAgdmVjdG9yPGludD4gdHdvc3VtKHZlY3RvcjxpbnQ+JiBudW1zLCBpbnQgdGFyZ2V0KSB7XG4gICAgICAgIFxuICAgICAgIGZvcihpbnQgaSA9IDA7IGkgPCBudW1zLnNpemUoKTsrK2kpe1xuICAgICAgICAgICAgZm9yKGludCBqID0gaSArIDE7IGogPCBudW1zLnNpemUoKTsrK2ope1xuICAgICAgICAgICAgICAgIGlmKG51bXNbaV0rbnVtc1tqXSA9PSB0YXJnZXQpe1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge2ksan07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge307XG4gICAgfVxufTtcblxuXG4xXG4yXG4zXG40XG41XG42XG43XG44XG45XG4xMFxuMTFcbjEyXG4xM1xuMTRcbjE1XG5cblxuXG4jIOW9leWQjuaDs+azlVxuXG7mgJ3ot6/mraPnoa7vvIzpobrkvr/lrabkuaDku6XkuIsgbWFwIOeUqOazle+8jGFjICjinJTvuI8pXG5cbmNsYXNzIHNvbHV0aW9uIHtcbnB1YmxpYzpcbiAgICB2ZWN0b3I8aW50PiB0d29zdW0odmVjdG9yPGludD4mIG51bXMsIGludCB0YXJnZXQpIHtcbiAgICAgICAgXG4gICAgICAgIC8vIOWwhm51bXPoo4XlhaVtYXDkuK1cbiAgICAgICAgc3RkOjp1bm9yZGVyZWRfbWFwIDxpbnQsaW50PiBtYXA7XG4gICAgICAgIGZvcihpbnQgaSA9IDA7IGkgPCBudW1zLnNpemUoKTsgKytpKXtcbiAgICAgICAgICAgIGF1dG8gaXRlciA9IG1hcC5maW5kKHRhcmdldCAtIG51bXNbaV0pOyBcbiAgICAgICAgICAgIGlmKGl0ZXIgIT0gbWFwLmVuZCgpKXtcbiAgICAgICAgICAgICAgICAvLyBpdGVyLT5zZWNvbmQg5LiL5qCHXG4gICAgICAgICAgICAgICAgLy8gaXRlci0+ZnJpc3QgIOWAvFxuICAgICAgICAgICAgICAgIHJldHVybiB7aXRlci0+c2Vjb25kLCBpfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG1hcC5pbnNlcnQocGFpcjxpbnQsIGludD4obnVtc1tpXSwgaSkpOyBcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7fTtcbiAgICB9XG59O1xuXG5cbjFcbjJcbjNcbjRcbjVcbjZcbjdcbjhcbjlcbjEwXG4xMVxuMTJcbjEzXG4xNFxuMTVcbjE2XG4xN1xuMThcbjE5XG5cblxuXG4jIOaAu+e7k1xuXG4gKiDliKTmlq0ga2V5IOacieW6j+aXoOW6j+mAieaLqeS9v+eUqCBtYXBcblxu5pig5bCEICAgICAgICAgICAgICAgICAgIOW6leWxguWunueOsCAgIOaYr+WQpuacieW6jyAgICAg5pWw5YC85piv5ZCm5Y+v5Lul6YeN5aSNICAg6IO95ZCm5pu05pS55pWw5YC8ICAgICDmn6Xor6LmlYjnjocgICAgICAg5aKe5Yig5pWI546HXG5zdGQ6Om1hcCAgICAgICAgICAgICDnuqLpu5HmoJEgICAga2V5IOacieW6jyAgIGtleSDkuI3lj6/ph43lpI0gICBrZXkg5LiN5Y+v5L+u5pS5ICAgbyhsb2cgbikgICBvKGxvZyBuKVxuc3RkOjptdWx0aW1hcCAgICAgICAg57qi6buR5qCRICAgIGtleSDmnInluo8gICBrZXkg5Y+v6YeN5aSNICAgIGtleSDkuI3lj6/kv67mlLkgICBvKGxvZyBuKSAgIG8obG9nIG4pXG5zdGQ6OnVub3JkZXJlZF9tYXAgICDlk4jluIzooaggICAga2V5IOaXoOW6jyAgIGtleSDkuI3lj6/ph43lpI0gICBrZXkg5LiN5Y+v5L+u5pS5ICAgbygxKSAgICAgICBvKDEpXG5cblxuIyDmgLvnu5NcblxuIDEuIOaVsOe7hOOAgXNldCDpm4blkIjjgIFtYXAg55qE5bqU55SoXG5cbiAqIHNldCDpm4blkIjvvJrmn6XlhYPntKDjgIHkv53lrZjkuI3ph43lpI1cbiAqIG1hcO+8muafpeWFg+e0oO+8jOmcgOimgeS4i+agh1xuXG7pm4blkIggICAgICAgICAgICAgICAgICAgICAgIOW6leWxguWunueOsCAgIOaYr+WQpuacieW6jyAgIOaVsOWAvOaYr+WQpuWPr+S7pemHjeWkjSAgIOiDveWQpuabtOaUueaVsOWAvCAgIOafpeivouaViOeOhyAgICAgICDlop7liKDmlYjnjodcbnN0ZDo6c2V0ICAgICAgICAgICAgICAgICDnuqLpu5HmoJEgICAg5pyJ5bqPICAgICDlkKYgICAgICAgICAg5ZCmICAgICAgICBvKGxvZyBuKSAgIG8obG9nIG4pXG5zdGQ6Om11bHRpc2V0ICAgICAgICAgICAg57qi6buR5qCRICAgIOacieW6jyAgICAg5pivICAgICAgICAgIOWQpiAgICAgICAgbyhsb2duKSAgICBvKGxvZ24pXG5zdGQ6OnVub3JkZXJlZF9zZXQo4pyU77iPKSAgIOWTiOW4jOihqCAgICDml6Dluo8gICAgIOWQpiAgICAgICAgICDlkKYgICAgICAgIG8oMSkgICAgICAgbygxKVxuXG4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbuaYoOWwhCAgICAgICAgICAgICAgICAgICDlupXlsYLlrp7njrAgICDmmK/lkKbmnInluo8gICAgIOaVsOWAvOaYr+WQpuWPr+S7pemHjeWkjSAgIOiDveWQpuabtOaUueaVsOWAvCAgICAg5p+l6K+i5pWI546HICAgICAgIOWinuWIoOaViOeOh1xuc3RkOjptYXAgICAgICAgICAgICAg57qi6buR5qCRICAgIGtleSDmnInluo8gICBrZXkg5LiN5Y+v6YeN5aSNICAga2V5IOS4jeWPr+S/ruaUuSAgIG8obG9nbikgICAgbyhsb2duKVxuc3RkOjptdWx0aW1hcCAgICAgICAg57qi6buR5qCRICAgIGtleSDmnInluo8gICBrZXkg5Y+v6YeN5aSNICAgIGtleSDkuI3lj6/kv67mlLkgICBvKGxvZyBuKSAgIG8obG9nIG4pXG5zdGQ6OnVub3JkZXJlZF9tYXAgICDlk4jluIzooaggICAga2V5IOaXoOW6jyAgIGtleSDkuI3lj6/ph43lpI0gICBrZXkg5LiN5Y+v5L+u5pS5ICAgbygxKSAgICAgICBvKDEpXG5cbiAyLiDov63ku6PlmajnmoTkvb/nlKhcblxuLy8g5Yik5pat5YWD57Sg5piv5ZCm5Ye6546w6L+HXG5pZih0bXAuZmluZChzdW0pICE9IHRtcC5lbmQoKSl7fVxuXG5cbjFcbjJcblxuIDMuIOS4quS9jei/kOeul1xuXG53aGlsZShuKXtcblx0c3VtICs9IG4lMTA7IC8vIG4lMTDkuKrkvY1cblx0biAvPSAxMDsgICAgIC8vIOWJlOmZpOW3suS9v+eUqOS4quS9jVxufVxuXG5cbjFcbjJcbjNcbjRcbiIsCiAgICAiY2hhcnNldHMiOiB7CiAgICAgICJjamsiOiB0cnVlCiAgICB9CiAgfSwgewogICAgInRpdGxlIjogIkRheTA5LeagiOS4jumYn+WIlyIsCiAgICAiZnJvbnRtYXR0ZXIiOiB7CiAgICAgICJ0aXRsZSI6ICJEYXkwOS3moIjkuI7pmJ/liJciLAogICAgICAiZGF0ZSI6ICIyMDIzLTA2LTAyVDA5OjM4OjI4LjAwMFoiLAogICAgICAicGVybWFsaW5rIjogIi9wYWdlcy81YjkxZmEvIiwKICAgICAgImNhdGVnb3JpZXMiOiBbIueul+azlSIsICLnrpfms5XmiZPljaEiXSwKICAgICAgInRhZ3MiOiBbIuaJk+WNoSJdCiAgICB9LAogICAgInJlZ3VsYXJQYXRoIjogIi8wMi4lRTclQUUlOTclRTYlQjMlOTUvMDEuJUU3JUFFJTk3JUU2JUIzJTk1JUU2JTg5JTkzJUU1JThEJUExLzA5LkRheTA5LSVFNiVBMCU4OCVFNCVCOCU4RSVFOSU5OCU5RiVFNSU4OCU5Ny5odG1sIiwKICAgICJyZWxhdGl2ZVBhdGgiOiAiMDIu566X5rOVLzAxLueul+azleaJk+WNoS8wOS5EYXkwOS3moIjkuI7pmJ/liJcubWQiLAogICAgImtleSI6ICJ2LWVhNTk3Mzg2IiwKICAgICJwYXRoIjogIi9wYWdlcy81YjkxZmEvIiwKICAgICJoZWFkZXJzIjogW3sKICAgICAgImxldmVsIjogMiwKICAgICAgInRpdGxlIjogIueQhuiuuuWfuuehgCIsCiAgICAgICJzbHVnIjogIueQhuiuuuWfuuehgCIsCiAgICAgICJub3JtYWxpemVkVGl0bGUiOiAi55CG6K665Z+656GAIiwKICAgICAgImNoYXJJbmRleCI6IDIKICAgIH0sIHsKICAgICAgImxldmVsIjogMywKICAgICAgInRpdGxlIjogIuS4ieS4quW4uOingVNUTOeJiOacrCIsCiAgICAgICJzbHVnIjogIuS4ieS4quW4uOingXN0bOeJiOacrCIsCiAgICAgICJub3JtYWxpemVkVGl0bGUiOiAi5LiJ5Liq5bi46KeBIHN0bCDniYjmnKwiLAogICAgICAiY2hhckluZGV4IjogNDQKICAgIH0sIHsKICAgICAgImxldmVsIjogMywKICAgICAgInRpdGxlIjogIuWbm+S4qumXrumimCIsCiAgICAgICJzbHVnIjogIuWbm+S4qumXrumimCIsCiAgICAgICJub3JtYWxpemVkVGl0bGUiOiAi5Zub5Liq6Zeu6aKYIiwKICAgICAgImNoYXJJbmRleCI6IDMzNwogICAgfSwgewogICAgICAibGV2ZWwiOiAyLAogICAgICAidGl0bGUiOiAiMjMyLueUqOagiOWunueOsOmYn+WIlyIsCiAgICAgICJzbHVnIjogIl8yMzIt55So5qCI5a6e546w6Zif5YiXIiwKICAgICAgIm5vcm1hbGl6ZWRUaXRsZSI6ICIyMzIuIOeUqOagiOWunueOsOmYn+WIlyIsCiAgICAgICJjaGFySW5kZXgiOiA3CiAgICB9LCB7CiAgICAgICJsZXZlbCI6IDMsCiAgICAgICJ0aXRsZSI6ICLlvZXliY3mg7Pms5UiLAogICAgICAic2x1ZyI6ICLlvZXliY3mg7Pms5UiLAogICAgICAibm9ybWFsaXplZFRpdGxlIjogIuW9leWJjeaDs+azlSIsCiAgICAgICJjaGFySW5kZXgiOiAxMzM4CiAgICB9LCB7CiAgICAgICJsZXZlbCI6IDMsCiAgICAgICJ0aXRsZSI6ICLlvZXlkI7mg7Pms5UiLAogICAgICAic2x1ZyI6ICLlvZXlkI7mg7Pms5UiLAogICAgICAibm9ybWFsaXplZFRpdGxlIjogIuW9leWQjuaDs+azlSIsCiAgICAgICJjaGFySW5kZXgiOiAxMzgxCiAgICB9LCB7CiAgICAgICJsZXZlbCI6IDIsCiAgICAgICJ0aXRsZSI6ICIyMjUuIOeUqOmYn+WIl+WunueOsOagiCIsCiAgICAgICJzbHVnIjogIl8yMjUt55So6Zif5YiX5a6e546w5qCIIiwKICAgICAgIm5vcm1hbGl6ZWRUaXRsZSI6ICIyMjUuIOeUqOmYn+WIl+WunueOsOagiCIsCiAgICAgICJjaGFySW5kZXgiOiAxOQogICAgfSwgewogICAgICAibGV2ZWwiOiAzLAogICAgICAidGl0bGUiOiAi5b2V5YmN5oOz5rOVIiwKICAgICAgInNsdWciOiAi5b2V5YmN5oOz5rOVLTIiLAogICAgICAibm9ybWFsaXplZFRpdGxlIjogIuW9leWJjeaDs+azlSIsCiAgICAgICJjaGFySW5kZXgiOiAxMzM4CiAgICB9LCB7CiAgICAgICJsZXZlbCI6IDMsCiAgICAgICJ0aXRsZSI6ICLlvZXlkI7mg7Pms5UiLAogICAgICAic2x1ZyI6ICLlvZXlkI7mg7Pms5UtMiIsCiAgICAgICJub3JtYWxpemVkVGl0bGUiOiAi5b2V5ZCO5oOz5rOVIiwKICAgICAgImNoYXJJbmRleCI6IDEzODEKICAgIH0sIHsKICAgICAgImxldmVsIjogMiwKICAgICAgInRpdGxlIjogIuaAu+e7kyIsCiAgICAgICJzbHVnIjogIuaAu+e7kyIsCiAgICAgICJub3JtYWxpemVkVGl0bGUiOiAi5oC757uTIiwKICAgICAgImNoYXJJbmRleCI6IDMyMTMKICAgIH1dLAogICAgImV4Y2VycHQiOiAiPGJsb2NrcXVvdGU+XG48cD7nkIborrrln7rnoYDjgIEyMzIuIOeUqOagiOWunueOsOmYn+WIl+OAgTIyNS4g55So6Zif5YiX5a6e546w5qCIPC9wPlxuPC9ibG9ja3F1b3RlPlxuIiwKICAgICJsYXN0VXBkYXRlZCI6ICI2LzMvMjAyMywgMzo0NDo0MCBQTSIsCiAgICAibGFzdFVwZGF0ZWRUaW1lc3RhbXAiOiAxNjg1Nzc4MjgwMDAwLAogICAgImhlYWRlcnNTdHIiOiAi55CG6K665Z+656GAIOS4ieS4quW4uOingVNUTOeJiOacrCDlm5vkuKrpl67popggMjMyLueUqOagiOWunueOsOmYn+WIlyDlvZXliY3mg7Pms5Ug5b2V5ZCO5oOz5rOVIDIyNS4g55So6Zif5YiX5a6e546w5qCIIOW9leWJjeaDs+azlSDlvZXlkI7mg7Pms5Ug5oC757uTIiwKICAgICJjb250ZW50IjogIj4g55CG6K665Z+656GA44CBMjMyLiDnlKjmoIjlrp7njrDpmJ/liJfjgIEyMjUuIOeUqOmYn+WIl+WunueOsOagiFxuXG5cbiMg55CG6K665Z+656GAXG5cblxuIyDkuInkuKrluLjop4EgU1RMIOeJiOacrFxuXG4gMS4gSFAgU1RMIOWFtuS7lueJiOacrOeahCBDKysgU1RM77yM5LiA6Iis5piv5LulIEhQIFNUTCDkuLrok53mnKzlrp7njrDlh7rmnaXnmoTvvIxIUCBTVEwg5pivIEMrKyBTVEwg55qE56ys5LiA5Liq5a6e546w54mI5pys77yM6ICM5LiU5byA5pS+5rqQ5Luj56CB44CCXG5cbiAyLiBQLkouUGxhdWdlciBTVEwg55SxIFAuSi5QbGF1Z2VyIOWPgueFpyBIUCBTVEwg5a6e546w5Ye65p2l55qE77yM6KKrIFZpc3VhbCBDKysg57yW6K+R5Zmo5omA6YeH55So77yM5LiN5piv5byA5rqQ55qE44CCXG5cbiAzLiBTR0kgU1RMIOeUsSBTaWxpY29uIEdyYXBoaWNzIENvbXB1dGVyIFN5c3RlbXMg5YWs5Y+45Y+C54WnIEhQIFNUTCDlrp7njrDvvIzooqsgTGludXgg55qEIEMrKyDnvJbor5HlmaggR0NDIOaJgOmHh+eUqO+8jFNHSSBTVEwg5piv5byA5rqQ6L2v5Lu277yM5rqQ56CB5Y+v6K+75oCn55Sa6auY44CCKOS4u+imgSlcblxuXG4jIOWbm+S4qumXrumimFxuXG4+ICAxLiBDKysg5LitIHN0YWNrIOaYr+WuueWZqOS5iO+8n1xuPiAgMi4g5oiR5Lus5L2/55So55qEIHN0YWNrIOaYr+WxnuS6juWTquS4queJiOacrOeahCBTVEzvvJ9cbj4gIDMuIOaIkeS7rOS9v+eUqOeahCBTVEwg5LitIHN0YWNrIOaYr+WmguS9leWunueOsOeahO+8n1xuPiAgNC4gc3RhY2sg5o+Q5L6b6L+t5Luj5Zmo5p2l6YGN5Y6GIHN0YWNrIOepuumXtOS5iO+8n1xuXG4gMS4gQysrIOS4rSBzdGFjayDmmK/lrrnlmajkuYjvvJ9cbiAgICBcbiAgICDkuI3lsZ7kuo7lrrnlmajvvIzmoIjmmK/ku6XlupXlsYLlrrnlmajlrozmiJDlhbbmiYDmnInnmoTlt6XkvZzvvIzlr7nlpJbmj5Dkvpvnu5/kuIDnmoTmjqXlj6PvvIzlupXlsYLlrrnlmajmmK/lj6/mj5Lmi5TnmoTvvIjkuZ/lsLHmmK/or7TmiJHku6zlj6/ku6XmjqfliLbkvb/nlKjlk6rnp43lrrnlmajmnaXlrp7njrDmoIjnmoTlip/og73vvInjgIJcblxu5omA5LulIFNUTCDkuK3moIjlvoDlvoDkuI3ooqvlvZLnsbvkuLrlrrnlmajvvIzogIzooqvlvZLnsbvkuLogY29udGFpbmVyIGFkYXB0ZXLvvIjlrrnlmajpgILphY3lmajvvInjgIJcblxuIDIuIOaIkeS7rOS9v+eUqOeahCBzdGFjayDmmK/lsZ7kuo7lk6rkuKrniYjmnKznmoQgU1RM77yfXG5cbiAqIFZpc3VhbCBDKysg57yW6K+R5Zmo5omA6YeH55SoIFAuSi5QbGF1Z2VyIFNUTFxuXG4gKiBMaW51eCDnmoQgQysrIOe8luivkeWZqCBHQ0Mg5omA6YeH55SoIFNHSSBTVExcblxuIDMuIOaIkeS7rOS9v+eUqOeahCBTVEwg5LitIHN0YWNrIOaYr+WmguS9leWunueOsOeahO+8n1xuXG7moIjnmoTlupXlsYLlrp7njrDlj6/ku6XmmK8gdmVjdG9y77yMZGVxdWXvvIxsaXN0IOmDveaYr+WPr+S7peeahO+8jCDkuLvopoHlsLHmmK/mlbDnu4Tlkozpk77ooajnmoTlupXlsYLlrp7njrDjgIJcblxuXG5cbuaIkeS7rOW4uOeUqOeahCBTR0kgU1RM77yM6buY6K6k5piv5LulIGRlcXVlIOS4uue8uuecgeaDheWGteS4i+agiOWSjOmYn+WIl+eahOW6leWxgue7k+aehOOAglxuXG5kZXF1ZSDmmK/kuIDkuKrlj4zlkJHpmJ/liJfvvIzlj6ropoHlsIHkvY/kuIDmrrXvvIzlj6rlvIDpgJrlj6bkuIDnq6/lsLHlj6/ku6Xlrp7njrDmoIjnmoTpgLvovpHkuobjgIJcblxuLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG7miJHku6zkuZ/lj6/ku6XmjIflrpogdmVjdG9yIOS4uuagiOeahOW6leWxguWunueOsO+8jOWIneWni+WMluivreWPpeWmguS4i++8mlxuXG5zdGQ6OnN0YWNrPGludCwgc3RkOjp2ZWN0b3I8aW50PiA+IHRoaXJkOyAgLy8g5L2/55SodmVjdG9y5Li65bqV5bGC5a655Zmo55qE5qCIXG5cblxuMVxuXG5cbuS5n+WPr+S7peaMh+WumiBsaXN0IOS4uui1t+W6leWxguWunueOsO+8jOWIneWni+WMliBxdWV1ZSDnmoTor63lj6XlpoLkuIvvvJpcblxuc3RkOjpxdWV1ZTxpbnQsIHN0ZDo6bGlzdDxpbnQ+PiB0aGlyZDsgLy8g5a6a5LmJ5LulbGlzdOS4uuW6leWxguWuueWZqOeahOmYn+WIl1xuXG5cbjFcblxuIDQuIHN0YWNrIOaPkOS+m+i/reS7o+WZqOadpemBjeWOhiBzdGFjayDnqbrpl7TkuYjvvJ9cblxuTk/vvIzmoIjmj5DkvpsgcHVzaCDlkowgcG9wIOetieetieaOpeWPo++8jOaJgOacieWFg+e0oOW/hemhu+espuWQiOWFiOi/m+WQjuWHuuinhOWIme+8jOaJgOS7peagiOS4jeaPkOS+m+i1sOiuv+WKn+iDve+8jOS5n+S4jeaPkOS+m+i/reS7o+WZqCAoaXRlcmF0b3Ip44CCIOS4jeWDj+aYryBzZXQg5oiW6ICFIG1hcCDmj5Dkvpvov63ku6PlmaggaXRlcmF0b3Ig5p2l6YGN5Y6G5omA5pyJ5YWD57Sg44CCXG5cblxuIyAyMzIuIOeUqOagiOWunueOsOmYn+WIl1xuXG4gKiDpopjnm67vvJoyMzIuIOeUqOagiOWunueOsOmYn+WIl1xuXG4gKiDorrLop6PvvJrmlofnq6DorrLop6PjgIHop4bpopHorrLop6NcblxuICog6KaB5rGC77ya5qih5ouf6L+H56iLXG5cblxuIyDlvZXliY3mg7Pms5Vcblxu5L2/55So5Lik5Liq5qCI5a6e546w5Y2V5ZCR55qE6Zif5YiX77yI5YWI6L+b5YWI5Ye677yJ77yM5rKh5pyJ6Ieq5bex5Yqo5omL5a6e546w77yM6K6y6Kej6KeG6aKRXG5cblxuIyDlvZXlkI7mg7Pms5VcblxuICog5Y+M5qCI77yI6L+b5Ye65qCI55qE6K6+6K6h77yJXG4gKiBwZWVrICgpIOWHveaVsOiuvuiuoeaXtueahOW3p+eUqFxuXG5cblxu5Lul5LiL5pe255yL5a6M6K6y6Kej5ZCO55qE5a6e546w5Luj56CB77yM5beyIEFDICjinJTvuI8pXG5cbmNsYXNzIE15UXVldWUge1xucHVibGljOlxuICAgIE15UXVldWUoKSB7XG5cbiAgICB9XG4gICAgXG4gICAgdm9pZCBwdXNoKGludCB4KSB7XG4gICAgICAgIHN0SW4ucHVzaCh4KTtcbiAgICB9XG4gICAgXG4gICAgaW50IHBvcCgpIHtcbiAgICAgICAgLy8g6L6T5Ye65qCI5Li656m6XG4gICAgICAgIGlmKHN0T3V0LmVtcHR5KCkpe1xuICAgICAgICAgICAgLy8g5bCG6L6T5YWl5qCI5YWo6YOo5pS+5YWlXG4gICAgICAgICAgICB3aGlsZSghc3RJbi5lbXB0eSgpKXtcbiAgICAgICAgICAgICAgICBzdE91dC5wdXNoKHN0SW4udG9wKCkpO1xuICAgICAgICAgICAgICAgIHN0SW4ucG9wKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaW50IHJlc3VsdCA9IHN0T3V0LnRvcCgpO1xuICAgICAgICBzdE91dC5wb3AoKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgXG4gICAgaW50IHBlZWsoKSB7XG4gICAgICAgIC8vIOWFiOS7jui+k+WHuuagiOS4reW8ueWHulxuICAgICAgICBpbnQgdG1wID0gdGhpcy0+cG9wKCk7XG4gICAgICAgIC8vIOWGjeaUvuWFpei+k+WHuuagiFxuICAgICAgICBzdE91dC5wdXNoKHRtcCk7XG4gICAgICAgIHJldHVybiB0bXA7XG4gICAgfVxuICAgIFxuICAgIGJvb2wgZW1wdHkoKSB7XG4gICAgICAgIHJldHVybiBzdEluLmVtcHR5KCkgJiYgc3RPdXQuZW1wdHkoKTtcbiAgICB9XG5wcml2YXRlOlxuICAgIHN0YWNrPGludD4gc3RJbjtcbiAgICBzdGFjazxpbnQ+IHN0T3V0O1xufTtcblxuXG4xXG4yXG4zXG40XG41XG42XG43XG44XG45XG4xMFxuMTFcbjEyXG4xM1xuMTRcbjE1XG4xNlxuMTdcbjE4XG4xOVxuMjBcbjIxXG4yMlxuMjNcbjI0XG4yNVxuMjZcbjI3XG4yOFxuMjlcbjMwXG4zMVxuMzJcbjMzXG4zNFxuMzVcbjM2XG4zN1xuMzhcbjM5XG5cblxuXG4jIDIyNS4g55So6Zif5YiX5a6e546w5qCIXG5cbiAqIOmimOebru+8mjIyNS4g55So6Zif5YiX5a6e546w5qCIXG5cbiAqIOiusuino++8muaWh+eroOiusuino+OAgeinhumikeiusuino1xuXG4gKiDopoHmsYLvvJrnlKjkuIDkuKrpmJ/liJfmqKHmi5/moIhcblxuXG4jIOW9leWJjeaDs+azlVxuXG7lj6rogIPomZHkuobkvb/nlKjkuIDkuKrpmJ/liJfmqKHmi5/moIjnmoTmg4XlhrXvvIzmoLjlv4Pov5jmmK/lh7rmoIjnmoTorr7orqHvvIzmiJHnmoTmgJ3ot6/mmK/pgJrov4flh7rkuI3lgZznmoTlh7rpmJ/liJflkozlhaXpmJ/liJflsIbmnIDlkI7kuIDkuKrlhYPntKDmjqjliLDnrKzkuIDkuKrlhYPntKDnmoTkvY3nva7kuIrvvIzlho3ov5vooYzmk43kvZxcblxuICogMSAyIDNcbiAqIDIgMyAxXG4gKiAzIDEgMlxuXG7ku6XkuIvmmK/lrp7njrDku6PnoIHvvIzlt7IgQUMgKOKclO+4jylcblxuY2xhc3MgTXlTdGFjayB7XG5wdWJsaWM6XG4gICAgTXlTdGFjaygpIHtcblxuICAgIH1cbiAgICBcbiAgICB2b2lkIHB1c2goaW50IHgpIHtcbiAgICAgICAgcS5wdXNoKHgpO1xuICAgIH1cbiAgICBcbiAgICBpbnQgcG9wKCkge1xuICAgICAgICBpbnQgc2l6ZSA9IHEuc2l6ZSgpO1xuICAgICAgICBpbnQgcmVzdWx0ID0gcS5iYWNrKCk7XG5cbiAgICAgICAgLy8g5b6q546v6L+b5Ye677yM5pq06Zyy5Ye65pyA5ZCO5LiA5Liq5YWD57SgXG4gICAgICAgIHdoaWxlKC0tc2l6ZSl7XG4gICAgICAgICAgICAvLyDojrflj5bnrKzkuIDkuKrlhYPntKBcbiAgICAgICAgICAgIGludCB0bXAgPSBxLmZyb250KCk7XG4gICAgICAgICAgICAvLyDnrKzkuIDkuKrlhYPntKDlh7rpmJ9cbiAgICAgICAgICAgIHEucG9wKCk7XG4gICAgICAgICAgICAvLyDlsIblhbblho3mj5LlhaXmnKvlsL5cbiAgICAgICAgICAgIHEucHVzaCh0bXApO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8g5Yig6Zmk5pyA5ZCO5LiA5Liq5YWD57SgXG4gICAgICAgIHEucG9wKCk7XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgXG4gICAgaW50IHRvcCgpIHtcbiAgICAgICAgcmV0dXJuIHEuYmFjaygpO1xuICAgIH1cbiAgICBcbiAgICBib29sIGVtcHR5KCkge1xuICAgICAgICByZXR1cm4gcS5lbXB0eSgpO1xuICAgIH1cbnByaXZhdGU6XG4gICAgcXVldWU8aW50PiBxO1xufTtcblxuXG4xXG4yXG4zXG40XG41XG42XG43XG44XG45XG4xMFxuMTFcbjEyXG4xM1xuMTRcbjE1XG4xNlxuMTdcbjE4XG4xOVxuMjBcbjIxXG4yMlxuMjNcbjI0XG4yNVxuMjZcbjI3XG4yOFxuMjlcbjMwXG4zMVxuMzJcbjMzXG4zNFxuMzVcbjM2XG4zN1xuMzhcbjM5XG40MFxuXG4gKiDml7bpl7TlpI3mnYLluqY6IHB1c2gg5Li6IE8gKG4p77yM5YW25LuW5Li6IE8gKDEpXG4gKiDnqbrpl7TlpI3mnYLluqY6IE8gKG4pXG5cblxuIyDlvZXlkI7mg7Pms5Vcblxu5ZKM5Y2h5ZOl5oCd6Lev5LiA6Ie04pyM77iPXG5cblxuIyDmgLvnu5NcblxuUXVldWXnsbsg5oiQ5ZGY5Ye95pWw5aaC5LiL77yaXG5cbiAqIGJhY2sgKCkg6L+U5Zue5pyA5ZCO5LiA5Liq5YWD57SgXG4gKiBlbXB0eSAoKSDlpoLmnpzpmJ/liJfnqbrliJnov5Tlm57nnJ9cbiAqIGZyb250ICgpIOi/lOWbnuesrOS4gOS4quWFg+e0oFxuICogcG9wICgpIOWIoOmZpOesrOS4gOS4quWFg+e0oFxuICogcHVzaCAoKSDlnKjmnKvlsL7liqDlhaXkuIDkuKrlhYPntKBcbiAqIHNpemUgKCkg6L+U5Zue6Zif5YiX5Lit5YWD57Sg55qE5Liq5pWwXG5cblN0YWNr57G7IOaIkOWRmOWHveaVsOWmguS4i++8mlxuXG4gKiDlh7rmoIjvvJpwdXNoICgpXG4gKiDljovmoIjvvJpwb3AgKClcbiAqIOagiOaYr+WQpuS4uuepuu+8mmVtcHR5ICgpXG4gKiDmoIjnmoTlpKflsI/vvJpzaXplICgpXG4gKiDorr/pl67moIjpobbvvJp0b3AgKCkiLAogICAgIm5vcm1hbGl6ZWRDb250ZW50IjogIj4g55CG6K665Z+656GA44CBMjMyLiDnlKjmoIjlrp7njrDpmJ/liJfjgIEyMjUuIOeUqOmYn+WIl+WunueOsOagiFxuXG5cbiMg55CG6K665Z+656GAXG5cblxuIyDkuInkuKrluLjop4Egc3RsIOeJiOacrFxuXG4gMS4gaHAgc3RsIOWFtuS7lueJiOacrOeahCBjKysgc3Rs77yM5LiA6Iis5piv5LulIGhwIHN0bCDkuLrok53mnKzlrp7njrDlh7rmnaXnmoTvvIxocCBzdGwg5pivIGMrKyBzdGwg55qE56ys5LiA5Liq5a6e546w54mI5pys77yM6ICM5LiU5byA5pS+5rqQ5Luj56CB44CCXG5cbiAyLiBwLmoucGxhdWdlciBzdGwg55SxIHAuai5wbGF1Z2VyIOWPgueFpyBocCBzdGwg5a6e546w5Ye65p2l55qE77yM6KKrIHZpc3VhbCBjKysg57yW6K+R5Zmo5omA6YeH55So77yM5LiN5piv5byA5rqQ55qE44CCXG5cbiAzLiBzZ2kgc3RsIOeUsSBzaWxpY29uIGdyYXBoaWNzIGNvbXB1dGVyIHN5c3RlbXMg5YWs5Y+45Y+C54WnIGhwIHN0bCDlrp7njrDvvIzooqsgbGludXgg55qEIGMrKyDnvJbor5HlmaggZ2NjIOaJgOmHh+eUqO+8jHNnaSBzdGwg5piv5byA5rqQ6L2v5Lu277yM5rqQ56CB5Y+v6K+75oCn55Sa6auY44CCKOS4u+imgSlcblxuXG4jIOWbm+S4qumXrumimFxuXG4+ICAxLiBjKysg5LitIHN0YWNrIOaYr+WuueWZqOS5iO+8n1xuPiAgMi4g5oiR5Lus5L2/55So55qEIHN0YWNrIOaYr+WxnuS6juWTquS4queJiOacrOeahCBzdGzvvJ9cbj4gIDMuIOaIkeS7rOS9v+eUqOeahCBzdGwg5LitIHN0YWNrIOaYr+WmguS9leWunueOsOeahO+8n1xuPiAgNC4gc3RhY2sg5o+Q5L6b6L+t5Luj5Zmo5p2l6YGN5Y6GIHN0YWNrIOepuumXtOS5iO+8n1xuXG4gMS4gYysrIOS4rSBzdGFjayDmmK/lrrnlmajkuYjvvJ9cbiAgICBcbiAgICDkuI3lsZ7kuo7lrrnlmajvvIzmoIjmmK/ku6XlupXlsYLlrrnlmajlrozmiJDlhbbmiYDmnInnmoTlt6XkvZzvvIzlr7nlpJbmj5Dkvpvnu5/kuIDnmoTmjqXlj6PvvIzlupXlsYLlrrnlmajmmK/lj6/mj5Lmi5TnmoTvvIjkuZ/lsLHmmK/or7TmiJHku6zlj6/ku6XmjqfliLbkvb/nlKjlk6rnp43lrrnlmajmnaXlrp7njrDmoIjnmoTlip/og73vvInjgIJcblxu5omA5LulIHN0bCDkuK3moIjlvoDlvoDkuI3ooqvlvZLnsbvkuLrlrrnlmajvvIzogIzooqvlvZLnsbvkuLogY29udGFpbmVyIGFkYXB0ZXLvvIjlrrnlmajpgILphY3lmajvvInjgIJcblxuIDIuIOaIkeS7rOS9v+eUqOeahCBzdGFjayDmmK/lsZ7kuo7lk6rkuKrniYjmnKznmoQgc3Rs77yfXG5cbiAqIHZpc3VhbCBjKysg57yW6K+R5Zmo5omA6YeH55SoIHAuai5wbGF1Z2VyIHN0bFxuXG4gKiBsaW51eCDnmoQgYysrIOe8luivkeWZqCBnY2Mg5omA6YeH55SoIHNnaSBzdGxcblxuIDMuIOaIkeS7rOS9v+eUqOeahCBzdGwg5LitIHN0YWNrIOaYr+WmguS9leWunueOsOeahO+8n1xuXG7moIjnmoTlupXlsYLlrp7njrDlj6/ku6XmmK8gdmVjdG9y77yMZGVxdWXvvIxsaXN0IOmDveaYr+WPr+S7peeahO+8jCDkuLvopoHlsLHmmK/mlbDnu4Tlkozpk77ooajnmoTlupXlsYLlrp7njrDjgIJcblxuXG5cbuaIkeS7rOW4uOeUqOeahCBzZ2kgc3Rs77yM6buY6K6k5piv5LulIGRlcXVlIOS4uue8uuecgeaDheWGteS4i+agiOWSjOmYn+WIl+eahOW6leWxgue7k+aehOOAglxuXG5kZXF1ZSDmmK/kuIDkuKrlj4zlkJHpmJ/liJfvvIzlj6ropoHlsIHkvY/kuIDmrrXvvIzlj6rlvIDpgJrlj6bkuIDnq6/lsLHlj6/ku6Xlrp7njrDmoIjnmoTpgLvovpHkuobjgIJcblxuLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG7miJHku6zkuZ/lj6/ku6XmjIflrpogdmVjdG9yIOS4uuagiOeahOW6leWxguWunueOsO+8jOWIneWni+WMluivreWPpeWmguS4i++8mlxuXG5zdGQ6OnN0YWNrPGludCwgc3RkOjp2ZWN0b3I8aW50PiA+IHRoaXJkOyAgLy8g5L2/55SodmVjdG9y5Li65bqV5bGC5a655Zmo55qE5qCIXG5cblxuMVxuXG5cbuS5n+WPr+S7peaMh+WumiBsaXN0IOS4uui1t+W6leWxguWunueOsO+8jOWIneWni+WMliBxdWV1ZSDnmoTor63lj6XlpoLkuIvvvJpcblxuc3RkOjpxdWV1ZTxpbnQsIHN0ZDo6bGlzdDxpbnQ+PiB0aGlyZDsgLy8g5a6a5LmJ5LulbGlzdOS4uuW6leWxguWuueWZqOeahOmYn+WIl1xuXG5cbjFcblxuIDQuIHN0YWNrIOaPkOS+m+i/reS7o+WZqOadpemBjeWOhiBzdGFjayDnqbrpl7TkuYjvvJ9cblxubm/vvIzmoIjmj5DkvpsgcHVzaCDlkowgcG9wIOetieetieaOpeWPo++8jOaJgOacieWFg+e0oOW/hemhu+espuWQiOWFiOi/m+WQjuWHuuinhOWIme+8jOaJgOS7peagiOS4jeaPkOS+m+i1sOiuv+WKn+iDve+8jOS5n+S4jeaPkOS+m+i/reS7o+WZqCAoaXRlcmF0b3Ip44CCIOS4jeWDj+aYryBzZXQg5oiW6ICFIG1hcCDmj5Dkvpvov63ku6PlmaggaXRlcmF0b3Ig5p2l6YGN5Y6G5omA5pyJ5YWD57Sg44CCXG5cblxuIyAyMzIuIOeUqOagiOWunueOsOmYn+WIl1xuXG4gKiDpopjnm67vvJoyMzIuIOeUqOagiOWunueOsOmYn+WIl1xuXG4gKiDorrLop6PvvJrmlofnq6DorrLop6PjgIHop4bpopHorrLop6NcblxuICog6KaB5rGC77ya5qih5ouf6L+H56iLXG5cblxuIyDlvZXliY3mg7Pms5Vcblxu5L2/55So5Lik5Liq5qCI5a6e546w5Y2V5ZCR55qE6Zif5YiX77yI5YWI6L+b5YWI5Ye677yJ77yM5rKh5pyJ6Ieq5bex5Yqo5omL5a6e546w77yM6K6y6Kej6KeG6aKRXG5cblxuIyDlvZXlkI7mg7Pms5VcblxuICog5Y+M5qCI77yI6L+b5Ye65qCI55qE6K6+6K6h77yJXG4gKiBwZWVrICgpIOWHveaVsOiuvuiuoeaXtueahOW3p+eUqFxuXG5cblxu5Lul5LiL5pe255yL5a6M6K6y6Kej5ZCO55qE5a6e546w5Luj56CB77yM5beyIGFjICjinJTvuI8pXG5cbmNsYXNzIG15cXVldWUge1xucHVibGljOlxuICAgIG15cXVldWUoKSB7XG5cbiAgICB9XG4gICAgXG4gICAgdm9pZCBwdXNoKGludCB4KSB7XG4gICAgICAgIHN0aW4ucHVzaCh4KTtcbiAgICB9XG4gICAgXG4gICAgaW50IHBvcCgpIHtcbiAgICAgICAgLy8g6L6T5Ye65qCI5Li656m6XG4gICAgICAgIGlmKHN0b3V0LmVtcHR5KCkpe1xuICAgICAgICAgICAgLy8g5bCG6L6T5YWl5qCI5YWo6YOo5pS+5YWlXG4gICAgICAgICAgICB3aGlsZSghc3Rpbi5lbXB0eSgpKXtcbiAgICAgICAgICAgICAgICBzdG91dC5wdXNoKHN0aW4udG9wKCkpO1xuICAgICAgICAgICAgICAgIHN0aW4ucG9wKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaW50IHJlc3VsdCA9IHN0b3V0LnRvcCgpO1xuICAgICAgICBzdG91dC5wb3AoKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgXG4gICAgaW50IHBlZWsoKSB7XG4gICAgICAgIC8vIOWFiOS7jui+k+WHuuagiOS4reW8ueWHulxuICAgICAgICBpbnQgdG1wID0gdGhpcy0+cG9wKCk7XG4gICAgICAgIC8vIOWGjeaUvuWFpei+k+WHuuagiFxuICAgICAgICBzdG91dC5wdXNoKHRtcCk7XG4gICAgICAgIHJldHVybiB0bXA7XG4gICAgfVxuICAgIFxuICAgIGJvb2wgZW1wdHkoKSB7XG4gICAgICAgIHJldHVybiBzdGluLmVtcHR5KCkgJiYgc3RvdXQuZW1wdHkoKTtcbiAgICB9XG5wcml2YXRlOlxuICAgIHN0YWNrPGludD4gc3RpbjtcbiAgICBzdGFjazxpbnQ+IHN0b3V0O1xufTtcblxuXG4xXG4yXG4zXG40XG41XG42XG43XG44XG45XG4xMFxuMTFcbjEyXG4xM1xuMTRcbjE1XG4xNlxuMTdcbjE4XG4xOVxuMjBcbjIxXG4yMlxuMjNcbjI0XG4yNVxuMjZcbjI3XG4yOFxuMjlcbjMwXG4zMVxuMzJcbjMzXG4zNFxuMzVcbjM2XG4zN1xuMzhcbjM5XG5cblxuXG4jIDIyNS4g55So6Zif5YiX5a6e546w5qCIXG5cbiAqIOmimOebru+8mjIyNS4g55So6Zif5YiX5a6e546w5qCIXG5cbiAqIOiusuino++8muaWh+eroOiusuino+OAgeinhumikeiusuino1xuXG4gKiDopoHmsYLvvJrnlKjkuIDkuKrpmJ/liJfmqKHmi5/moIhcblxuXG4jIOW9leWJjeaDs+azlVxuXG7lj6rogIPomZHkuobkvb/nlKjkuIDkuKrpmJ/liJfmqKHmi5/moIjnmoTmg4XlhrXvvIzmoLjlv4Pov5jmmK/lh7rmoIjnmoTorr7orqHvvIzmiJHnmoTmgJ3ot6/mmK/pgJrov4flh7rkuI3lgZznmoTlh7rpmJ/liJflkozlhaXpmJ/liJflsIbmnIDlkI7kuIDkuKrlhYPntKDmjqjliLDnrKzkuIDkuKrlhYPntKDnmoTkvY3nva7kuIrvvIzlho3ov5vooYzmk43kvZxcblxuICogMSAyIDNcbiAqIDIgMyAxXG4gKiAzIDEgMlxuXG7ku6XkuIvmmK/lrp7njrDku6PnoIHvvIzlt7IgYWMgKOKclO+4jylcblxuY2xhc3MgbXlzdGFjayB7XG5wdWJsaWM6XG4gICAgbXlzdGFjaygpIHtcblxuICAgIH1cbiAgICBcbiAgICB2b2lkIHB1c2goaW50IHgpIHtcbiAgICAgICAgcS5wdXNoKHgpO1xuICAgIH1cbiAgICBcbiAgICBpbnQgcG9wKCkge1xuICAgICAgICBpbnQgc2l6ZSA9IHEuc2l6ZSgpO1xuICAgICAgICBpbnQgcmVzdWx0ID0gcS5iYWNrKCk7XG5cbiAgICAgICAgLy8g5b6q546v6L+b5Ye677yM5pq06Zyy5Ye65pyA5ZCO5LiA5Liq5YWD57SgXG4gICAgICAgIHdoaWxlKC0tc2l6ZSl7XG4gICAgICAgICAgICAvLyDojrflj5bnrKzkuIDkuKrlhYPntKBcbiAgICAgICAgICAgIGludCB0bXAgPSBxLmZyb250KCk7XG4gICAgICAgICAgICAvLyDnrKzkuIDkuKrlhYPntKDlh7rpmJ9cbiAgICAgICAgICAgIHEucG9wKCk7XG4gICAgICAgICAgICAvLyDlsIblhbblho3mj5LlhaXmnKvlsL5cbiAgICAgICAgICAgIHEucHVzaCh0bXApO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8g5Yig6Zmk5pyA5ZCO5LiA5Liq5YWD57SgXG4gICAgICAgIHEucG9wKCk7XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgXG4gICAgaW50IHRvcCgpIHtcbiAgICAgICAgcmV0dXJuIHEuYmFjaygpO1xuICAgIH1cbiAgICBcbiAgICBib29sIGVtcHR5KCkge1xuICAgICAgICByZXR1cm4gcS5lbXB0eSgpO1xuICAgIH1cbnByaXZhdGU6XG4gICAgcXVldWU8aW50PiBxO1xufTtcblxuXG4xXG4yXG4zXG40XG41XG42XG43XG44XG45XG4xMFxuMTFcbjEyXG4xM1xuMTRcbjE1XG4xNlxuMTdcbjE4XG4xOVxuMjBcbjIxXG4yMlxuMjNcbjI0XG4yNVxuMjZcbjI3XG4yOFxuMjlcbjMwXG4zMVxuMzJcbjMzXG4zNFxuMzVcbjM2XG4zN1xuMzhcbjM5XG40MFxuXG4gKiDml7bpl7TlpI3mnYLluqY6IHB1c2gg5Li6IG8gKG4p77yM5YW25LuW5Li6IG8gKDEpXG4gKiDnqbrpl7TlpI3mnYLluqY6IG8gKG4pXG5cblxuIyDlvZXlkI7mg7Pms5Vcblxu5ZKM5Y2h5ZOl5oCd6Lev5LiA6Ie04pyM77iPXG5cblxuIyDmgLvnu5NcblxucXVldWXnsbsg5oiQ5ZGY5Ye95pWw5aaC5LiL77yaXG5cbiAqIGJhY2sgKCkg6L+U5Zue5pyA5ZCO5LiA5Liq5YWD57SgXG4gKiBlbXB0eSAoKSDlpoLmnpzpmJ/liJfnqbrliJnov5Tlm57nnJ9cbiAqIGZyb250ICgpIOi/lOWbnuesrOS4gOS4quWFg+e0oFxuICogcG9wICgpIOWIoOmZpOesrOS4gOS4quWFg+e0oFxuICogcHVzaCAoKSDlnKjmnKvlsL7liqDlhaXkuIDkuKrlhYPntKBcbiAqIHNpemUgKCkg6L+U5Zue6Zif5YiX5Lit5YWD57Sg55qE5Liq5pWwXG5cbnN0YWNr57G7IOaIkOWRmOWHveaVsOWmguS4i++8mlxuXG4gKiDlh7rmoIjvvJpwdXNoICgpXG4gKiDljovmoIjvvJpwb3AgKClcbiAqIOagiOaYr+WQpuS4uuepuu+8mmVtcHR5ICgpXG4gKiDmoIjnmoTlpKflsI/vvJpzaXplICgpXG4gKiDorr/pl67moIjpobbvvJp0b3AgKCkiLAogICAgImNoYXJzZXRzIjogewogICAgICAiY2prIjogdHJ1ZQogICAgfQogIH0sIHsKICAgICJ0aXRsZSI6ICJEYXkxMC3moIjkuI7pmJ/liJciLAogICAgImZyb250bWF0dGVyIjogewogICAgICAidGl0bGUiOiAiRGF5MTAt5qCI5LiO6Zif5YiXIiwKICAgICAgImRhdGUiOiAiMjAyMy0wNi0wM1QxMTowNTozNC4wMDBaIiwKICAgICAgInBlcm1hbGluayI6ICIvcGFnZXMvNTFlMDM2LyIsCiAgICAgICJjYXRlZ29yaWVzIjogWyLnrpfms5UiLCAi566X5rOV5omT5Y2hIl0sCiAgICAgICJ0YWdzIjogWyLmiZPljaEiXQogICAgfSwKICAgICJyZWd1bGFyUGF0aCI6ICIvMDIuJUU3JUFFJTk3JUU2JUIzJTk1LzAxLiVFNyVBRSU5NyVFNiVCMyU5NSVFNiU4OSU5MyVFNSU4RCVBMS8xMC5EYXkxMC0lRTYlQTAlODglRTQlQjglOEUlRTklOTglOUYlRTUlODglOTcuaHRtbCIsCiAgICAicmVsYXRpdmVQYXRoIjogIjAyLueul+azlS8wMS7nrpfms5XmiZPljaEvMTAuRGF5MTAt5qCI5LiO6Zif5YiXLm1kIiwKICAgICJrZXkiOiAidi03NDgzYjhiZCIsCiAgICAicGF0aCI6ICIvcGFnZXMvNTFlMDM2LyIsCiAgICAiaGVhZGVycyI6IFt7CiAgICAgICJsZXZlbCI6IDIsCiAgICAgICJ0aXRsZSI6ICIyMC7mnInmlYjnmoTmi6zlj7ciLAogICAgICAic2x1ZyI6ICJfMjAt5pyJ5pWI55qE5ous5Y+3IiwKICAgICAgIm5vcm1hbGl6ZWRUaXRsZSI6ICIyMC4g5pyJ5pWI55qE5ous5Y+3IiwKICAgICAgImNoYXJJbmRleCI6IDIKICAgIH0sIHsKICAgICAgImxldmVsIjogMywKICAgICAgInRpdGxlIjogIuW9leWJjeaDs+azlSIsCiAgICAgICJzbHVnIjogIuW9leWJjeaDs+azlSIsCiAgICAgICJub3JtYWxpemVkVGl0bGUiOiAi5b2V5YmN5oOz5rOVIiwKICAgICAgImNoYXJJbmRleCI6IDExOAogICAgfSwgewogICAgICAibGV2ZWwiOiAzLAogICAgICAidGl0bGUiOiAi5b2V5ZCO5oOz5rOVIiwKICAgICAgInNsdWciOiAi5b2V5ZCO5oOz5rOVIiwKICAgICAgIm5vcm1hbGl6ZWRUaXRsZSI6ICLlvZXlkI7mg7Pms5UiLAogICAgICAiY2hhckluZGV4IjogMTQxMQogICAgfSwgewogICAgICAibGV2ZWwiOiAyLAogICAgICAidGl0bGUiOiAiMTA0Ny4g5Yig6Zmk5a2X56ym5Liy5Lit55qE5omA5pyJ55u46YK76YeN5aSN6aG5IiwKICAgICAgInNsdWciOiAiXzEwNDct5Yig6Zmk5a2X56ym5Liy5Lit55qE5omA5pyJ55u46YK76YeN5aSN6aG5IiwKICAgICAgIm5vcm1hbGl6ZWRUaXRsZSI6ICIxMDQ3LiDliKDpmaTlrZfnrKbkuLLkuK3nmoTmiYDmnInnm7jpgrvph43lpI3pobkiLAogICAgICAiY2hhckluZGV4IjogMTIKICAgIH0sIHsKICAgICAgImxldmVsIjogMywKICAgICAgInRpdGxlIjogIuW9leWJjeaDs+azlSIsCiAgICAgICJzbHVnIjogIuW9leWJjeaDs+azlS0yIiwKICAgICAgIm5vcm1hbGl6ZWRUaXRsZSI6ICLlvZXliY3mg7Pms5UiLAogICAgICAiY2hhckluZGV4IjogMTE4CiAgICB9LCB7CiAgICAgICJsZXZlbCI6IDMsCiAgICAgICJ0aXRsZSI6ICLlvZXlkI7mg7Pms5UiLAogICAgICAic2x1ZyI6ICLlvZXlkI7mg7Pms5UtMiIsCiAgICAgICJub3JtYWxpemVkVGl0bGUiOiAi5b2V5ZCO5oOz5rOVIiwKICAgICAgImNoYXJJbmRleCI6IDE0MTEKICAgIH0sIHsKICAgICAgImxldmVsIjogMywKICAgICAgInRpdGxlIjogIuaAu+e7kyIsCiAgICAgICJzbHVnIjogIuaAu+e7kyIsCiAgICAgICJub3JtYWxpemVkVGl0bGUiOiAi5oC757uTIiwKICAgICAgImNoYXJJbmRleCI6IDIxODAKICAgIH0sIHsKICAgICAgImxldmVsIjogMiwKICAgICAgInRpdGxlIjogIjE1MC4g6YCG5rOi5YWw6KGo6L6+5byP5rGC5YC8IiwKICAgICAgInNsdWciOiAiXzE1MC3pgIbms6LlhbDooajovr7lvI/msYLlgLwiLAogICAgICAibm9ybWFsaXplZFRpdGxlIjogIjE1MC4g6YCG5rOi5YWw6KGo6L6+5byP5rGC5YC8IiwKICAgICAgImNoYXJJbmRleCI6IDMzCiAgICB9LCB7CiAgICAgICJsZXZlbCI6IDMsCiAgICAgICJ0aXRsZSI6ICLlvZXliY3mg7Pms5UiLAogICAgICAic2x1ZyI6ICLlvZXliY3mg7Pms5UtMyIsCiAgICAgICJub3JtYWxpemVkVGl0bGUiOiAi5b2V5YmN5oOz5rOVIiwKICAgICAgImNoYXJJbmRleCI6IDExOAogICAgfSwgewogICAgICAibGV2ZWwiOiAzLAogICAgICAidGl0bGUiOiAi5b2V5ZCO5oOz5rOVIiwKICAgICAgInNsdWciOiAi5b2V5ZCO5oOz5rOVLTMiLAogICAgICAibm9ybWFsaXplZFRpdGxlIjogIuW9leWQjuaDs+azlSIsCiAgICAgICJjaGFySW5kZXgiOiAxNDExCiAgICB9LCB7CiAgICAgICJsZXZlbCI6IDMsCiAgICAgICJ0aXRsZSI6ICLmgLvnu5MiLAogICAgICAic2x1ZyI6ICLmgLvnu5MtMiIsCiAgICAgICJub3JtYWxpemVkVGl0bGUiOiAi5oC757uTIiwKICAgICAgImNoYXJJbmRleCI6IDIxODAKICAgIH1dLAogICAgImV4Y2VycHQiOiAiPGJsb2NrcXVvdGU+XG48cD4yMC4g5pyJ5pWI55qE5ous5Y+344CBMTA0Ny4g5Yig6Zmk5a2X56ym5Liy5Lit55qE5omA5pyJ55u46YK76YeN5aSN6aG544CBMTUwLiDpgIbms6LlhbDooajovr7lvI/msYLlgLw8L3A+XG48L2Jsb2NrcXVvdGU+XG4iLAogICAgImxhc3RVcGRhdGVkIjogIjYvMy8yMDIzLCAzOjQ0OjQwIFBNIiwKICAgICJsYXN0VXBkYXRlZFRpbWVzdGFtcCI6IDE2ODU3NzgyODAwMDAsCiAgICAiaGVhZGVyc1N0ciI6ICIyMC7mnInmlYjnmoTmi6zlj7cg5b2V5YmN5oOz5rOVIOW9leWQjuaDs+azlSAxMDQ3LiDliKDpmaTlrZfnrKbkuLLkuK3nmoTmiYDmnInnm7jpgrvph43lpI3pobkg5b2V5YmN5oOz5rOVIOW9leWQjuaDs+azlSDmgLvnu5MgMTUwLiDpgIbms6LlhbDooajovr7lvI/msYLlgLwg5b2V5YmN5oOz5rOVIOW9leWQjuaDs+azlSDmgLvnu5MiLAogICAgImNvbnRlbnQiOiAiPiAyMC4g5pyJ5pWI55qE5ous5Y+344CBMTA0Ny4g5Yig6Zmk5a2X56ym5Liy5Lit55qE5omA5pyJ55u46YK76YeN5aSN6aG544CBMTUwLiDpgIbms6LlhbDooajovr7lvI/msYLlgLxcblxuXG4jIDIwLiDmnInmlYjnmoTmi6zlj7dcblxuICog6aKY55uu77yaMjAuIOacieaViOeahOaLrOWPt1xuXG4gKiDorrLop6PvvJrmlofnq6DorrLop6PjgIHop4bpopHorrLop6NcblxuICog6KaB5rGC77ya5oCd6ICD5pyJ5ZOq5Lqb5LiN5Yy56YWN55qE5Zy65pmvXG5cblxuIyDlvZXliY3mg7Pms5Vcblxu6YGH5YiwIChbeyDlsLHnm7TmjqXov5vmoIjvvIzoi6XpgYfliLAgfV0pIOmcgOimgeWFiOWIpOaWreagiOaYr+WQpuS4uuepuu+8jOiLpeS4uuepuuWImeebtOaOpei/lOWbniBmYWxzZe+8jOiLpeagiOS4rSB0b3AgKCkg5LiN5piv5a+55bqU55qE5Y+m5LiA5Y2K5YWD57Sg77yM5Lmf55u05o6l6L+U5ZueIGZhbHNlXG5cbuS7o+eggeWunueOsOWmguS4i++8jOW3siBBQyAo4pyU77iPKVxuXG5jbGFzcyBTb2x1dGlvbiB7XG5wdWJsaWM6XG4gICAgYm9vbCBpc1ZhbGlkKHN0cmluZyBzdHIpIHtcblxuICAgICAgICBzdGFjazxjaGFyPiBzO1xuXG4gICAgICAgIGZvcihpbnQgaSA9IDA7IGkgPCBzdHIuc2l6ZSgpOyArK2kpe1xuXG4gICAgICAgICAgICBpZihzdHJbaV0gPT0gJygnIHx8IHN0cltpXSA9PSAnWycgfHwgc3RyW2ldID09ICd7Jyl7XG4gICAgICAgICAgICAgICAgcy5wdXNoKHN0cltpXSk7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIHN3aXRjaCBjYXNlXG4gICAgICAgICAgICBzd2l0Y2goc3RyW2ldKXtcbiAgICAgICAgICAgICAgICBjYXNlICcpJzpcbiAgICAgICAgICAgICAgICAgICAgaWYocy5lbXB0eSgpIHx8IHMudG9wKCkgIT0gJygnKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgICAgICAgICBzLnBvcCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ10nOlxuICAgICAgICAgICAgICAgICAgICBpZihzLmVtcHR5KCkgfHwgcy50b3AoKSAhPSAnWycpe1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHMucG9wKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnfSc6XG4gICAgICAgICAgICAgICAgICAgIGlmKHMuZW1wdHkoKSB8fCBzLnRvcCgpICE9ICd7Jyl7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgICAgICAgICAgcy5wb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHMuZW1wdHkoKTtcbiAgICB9ICAgXG59O1xuXG5cbjFcbjJcbjNcbjRcbjVcbjZcbjdcbjhcbjlcbjEwXG4xMVxuMTJcbjEzXG4xNFxuMTVcbjE2XG4xN1xuMThcbjE5XG4yMFxuMjFcbjIyXG4yM1xuMjRcbjI1XG4yNlxuMjdcbjI4XG4yOVxuMzBcbjMxXG4zMlxuMzNcbjM0XG4zNVxuMzZcbjM3XG4zOFxuMzlcbjQwXG40MVxuXG4gKiDml7bpl7TlpI3mnYLluqY6IE8gKG4pXG4gKiDnqbrpl7TlpI3mnYLluqY6IE8gKG4pXG5cblxuIyDlvZXlkI7mg7Pms5VcblxuXG5cbuWNoeWTpeeahOaDs+azleabtOeyvueCvO+8jOayoeazqOaEj+WIsOWlh+aVsOeahOaDheWGte+8gVxuXG7moLnmja7ljaHlk6XnmoTmgJ3ot6/vvIzkuI3pmr7lhpnlh7rku6XkuIvku6PnoIHvvIzlt7IgQUMgKOKclO+4jylcblxuY2xhc3MgU29sdXRpb24ge1xucHVibGljOlxuICAgIGJvb2wgaXNWYWxpZChzdHJpbmcgcykge1xuXG4gICAgICAgIC8vIOaOkumZpOWlh+aVsOaDheWGtVxuICAgICAgICBpZiAocy5zaXplKCkgJSAyICE9IDApIHJldHVybiBmYWxzZTsgXG5cbiAgICAgICAgc3RhY2s8Y2hhcj4gc3Q7XG5cbiAgICAgICAgZm9yKGludCBpID0gMDsgaSA8IHMuc2l6ZSgpOyArK2kpe1xuXG4gICAgICAgICAgICBpZihzW2ldID09ICcoJykgc3QucHVzaCgnKScpO1xuICAgICAgICAgICAgZWxzZSBpZihzW2ldID09ICdbJykgc3QucHVzaCgnXScpO1xuICAgICAgICAgICAgZWxzZSBpZihzW2ldID09ICd7Jykgc3QucHVzaCgnfScpO1xuICAgICAgICAgICAgLy8g6Iul5Ye6546wJykgfSBdICfmraTml7bmoIjkuLrnqbrml7Yg5ZKMIOagiOmmluS4jeaYr+WvueW6lOWtl+espuaXtuW/heWHuumUmVxuICAgICAgICAgICAgZWxzZSBpZihzdC5lbXB0eSgpIHx8IHNbaV0gIT0gc3QudG9wKCkpIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIGVsc2Ugc3QucG9wKCk7XG5cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBzdC5lbXB0eSgpO1xuICAgIH0gICBcbn07XG5cblxuMVxuMlxuM1xuNFxuNVxuNlxuN1xuOFxuOVxuMTBcbjExXG4xMlxuMTNcbjE0XG4xNVxuMTZcbjE3XG4xOFxuMTlcbjIwXG4yMVxuMjJcbjIzXG5cbiAqIOaXtumXtOWkjeadguW6pjogTyAobilcbiAqIOepuumXtOWkjeadguW6pjogTyAobilcblxuXG4jIDEwNDcuIOWIoOmZpOWtl+espuS4suS4reeahOaJgOacieebuOmCu+mHjeWkjemhuVxuXG4gKiDpopjnm67vvJoxMDQ3LiDliKDpmaTlrZfnrKbkuLLkuK3nmoTmiYDmnInnm7jpgrvph43lpI3poblcblxuICog6K6y6Kej77ya5paH56ug6K6y6Kej44CB6KeG6aKR6K6y6KejXG5cbiAqIOimgeaxgu+8mlxuXG5cbiMg5b2V5YmN5oOz5rOVXG5cblxuIyDlvZXlkI7mg7Pms5VcblxuXG4jIOaAu+e7k1xuXG5cbiMgMTUwLiDpgIbms6LlhbDooajovr7lvI/msYLlgLxcblxuICog6aKY55uu77yaMTUwLiDpgIbms6LlhbDooajovr7lvI/msYLlgLxcblxuICog6K6y6Kej77ya5paH56ug6K6y6Kej44CB6KeG6aKR6K6y6KejXG5cbiAqIOimgeaxgu+8mlxuXG5cbiMg5b2V5YmN5oOz5rOVXG5cblxuIyDlvZXlkI7mg7Pms5VcblxuXG4jIOaAu+e7kyIsCiAgICAibm9ybWFsaXplZENvbnRlbnQiOiAiPiAyMC4g5pyJ5pWI55qE5ous5Y+344CBMTA0Ny4g5Yig6Zmk5a2X56ym5Liy5Lit55qE5omA5pyJ55u46YK76YeN5aSN6aG544CBMTUwLiDpgIbms6LlhbDooajovr7lvI/msYLlgLxcblxuXG4jIDIwLiDmnInmlYjnmoTmi6zlj7dcblxuICog6aKY55uu77yaMjAuIOacieaViOeahOaLrOWPt1xuXG4gKiDorrLop6PvvJrmlofnq6DorrLop6PjgIHop4bpopHorrLop6NcblxuICog6KaB5rGC77ya5oCd6ICD5pyJ5ZOq5Lqb5LiN5Yy56YWN55qE5Zy65pmvXG5cblxuIyDlvZXliY3mg7Pms5Vcblxu6YGH5YiwIChbeyDlsLHnm7TmjqXov5vmoIjvvIzoi6XpgYfliLAgfV0pIOmcgOimgeWFiOWIpOaWreagiOaYr+WQpuS4uuepuu+8jOiLpeS4uuepuuWImeebtOaOpei/lOWbniBmYWxzZe+8jOiLpeagiOS4rSB0b3AgKCkg5LiN5piv5a+55bqU55qE5Y+m5LiA5Y2K5YWD57Sg77yM5Lmf55u05o6l6L+U5ZueIGZhbHNlXG5cbuS7o+eggeWunueOsOWmguS4i++8jOW3siBhYyAo4pyU77iPKVxuXG5jbGFzcyBzb2x1dGlvbiB7XG5wdWJsaWM6XG4gICAgYm9vbCBpc3ZhbGlkKHN0cmluZyBzdHIpIHtcblxuICAgICAgICBzdGFjazxjaGFyPiBzO1xuXG4gICAgICAgIGZvcihpbnQgaSA9IDA7IGkgPCBzdHIuc2l6ZSgpOyArK2kpe1xuXG4gICAgICAgICAgICBpZihzdHJbaV0gPT0gJygnIHx8IHN0cltpXSA9PSAnWycgfHwgc3RyW2ldID09ICd7Jyl7XG4gICAgICAgICAgICAgICAgcy5wdXNoKHN0cltpXSk7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIHN3aXRjaCBjYXNlXG4gICAgICAgICAgICBzd2l0Y2goc3RyW2ldKXtcbiAgICAgICAgICAgICAgICBjYXNlICcpJzpcbiAgICAgICAgICAgICAgICAgICAgaWYocy5lbXB0eSgpIHx8IHMudG9wKCkgIT0gJygnKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgICAgICAgICBzLnBvcCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ10nOlxuICAgICAgICAgICAgICAgICAgICBpZihzLmVtcHR5KCkgfHwgcy50b3AoKSAhPSAnWycpe1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHMucG9wKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnfSc6XG4gICAgICAgICAgICAgICAgICAgIGlmKHMuZW1wdHkoKSB8fCBzLnRvcCgpICE9ICd7Jyl7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgICAgICAgICAgcy5wb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHMuZW1wdHkoKTtcbiAgICB9ICAgXG59O1xuXG5cbjFcbjJcbjNcbjRcbjVcbjZcbjdcbjhcbjlcbjEwXG4xMVxuMTJcbjEzXG4xNFxuMTVcbjE2XG4xN1xuMThcbjE5XG4yMFxuMjFcbjIyXG4yM1xuMjRcbjI1XG4yNlxuMjdcbjI4XG4yOVxuMzBcbjMxXG4zMlxuMzNcbjM0XG4zNVxuMzZcbjM3XG4zOFxuMzlcbjQwXG40MVxuXG4gKiDml7bpl7TlpI3mnYLluqY6IG8gKG4pXG4gKiDnqbrpl7TlpI3mnYLluqY6IG8gKG4pXG5cblxuIyDlvZXlkI7mg7Pms5VcblxuXG5cbuWNoeWTpeeahOaDs+azleabtOeyvueCvO+8jOayoeazqOaEj+WIsOWlh+aVsOeahOaDheWGte+8gVxuXG7moLnmja7ljaHlk6XnmoTmgJ3ot6/vvIzkuI3pmr7lhpnlh7rku6XkuIvku6PnoIHvvIzlt7IgYWMgKOKclO+4jylcblxuY2xhc3Mgc29sdXRpb24ge1xucHVibGljOlxuICAgIGJvb2wgaXN2YWxpZChzdHJpbmcgcykge1xuXG4gICAgICAgIC8vIOaOkumZpOWlh+aVsOaDheWGtVxuICAgICAgICBpZiAocy5zaXplKCkgJSAyICE9IDApIHJldHVybiBmYWxzZTsgXG5cbiAgICAgICAgc3RhY2s8Y2hhcj4gc3Q7XG5cbiAgICAgICAgZm9yKGludCBpID0gMDsgaSA8IHMuc2l6ZSgpOyArK2kpe1xuXG4gICAgICAgICAgICBpZihzW2ldID09ICcoJykgc3QucHVzaCgnKScpO1xuICAgICAgICAgICAgZWxzZSBpZihzW2ldID09ICdbJykgc3QucHVzaCgnXScpO1xuICAgICAgICAgICAgZWxzZSBpZihzW2ldID09ICd7Jykgc3QucHVzaCgnfScpO1xuICAgICAgICAgICAgLy8g6Iul5Ye6546wJykgfSBdICfmraTml7bmoIjkuLrnqbrml7Yg5ZKMIOagiOmmluS4jeaYr+WvueW6lOWtl+espuaXtuW/heWHuumUmVxuICAgICAgICAgICAgZWxzZSBpZihzdC5lbXB0eSgpIHx8IHNbaV0gIT0gc3QudG9wKCkpIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIGVsc2Ugc3QucG9wKCk7XG5cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBzdC5lbXB0eSgpO1xuICAgIH0gICBcbn07XG5cblxuMVxuMlxuM1xuNFxuNVxuNlxuN1xuOFxuOVxuMTBcbjExXG4xMlxuMTNcbjE0XG4xNVxuMTZcbjE3XG4xOFxuMTlcbjIwXG4yMVxuMjJcbjIzXG5cbiAqIOaXtumXtOWkjeadguW6pjogbyAobilcbiAqIOepuumXtOWkjeadguW6pjogbyAobilcblxuXG4jIDEwNDcuIOWIoOmZpOWtl+espuS4suS4reeahOaJgOacieebuOmCu+mHjeWkjemhuVxuXG4gKiDpopjnm67vvJoxMDQ3LiDliKDpmaTlrZfnrKbkuLLkuK3nmoTmiYDmnInnm7jpgrvph43lpI3poblcblxuICog6K6y6Kej77ya5paH56ug6K6y6Kej44CB6KeG6aKR6K6y6KejXG5cbiAqIOimgeaxgu+8mlxuXG5cbiMg5b2V5YmN5oOz5rOVXG5cblxuIyDlvZXlkI7mg7Pms5VcblxuXG4jIOaAu+e7k1xuXG5cbiMgMTUwLiDpgIbms6LlhbDooajovr7lvI/msYLlgLxcblxuICog6aKY55uu77yaMTUwLiDpgIbms6LlhbDooajovr7lvI/msYLlgLxcblxuICog6K6y6Kej77ya5paH56ug6K6y6Kej44CB6KeG6aKR6K6y6KejXG5cbiAqIOimgeaxgu+8mlxuXG5cbiMg5b2V5YmN5oOz5rOVXG5cblxuIyDlvZXlkI7mg7Pms5VcblxuXG4jIOaAu+e7kyIsCiAgICAiY2hhcnNldHMiOiB7CiAgICAgICJjamsiOiB0cnVlCiAgICB9CiAgfSwgewogICAgInRpdGxlIjogIkRheTA4LeWtl+espuS4siIsCiAgICAiZnJvbnRtYXR0ZXIiOiB7CiAgICAgICJ0aXRsZSI6ICJEYXkwOC3lrZfnrKbkuLIiLAogICAgICAiZGF0ZSI6ICIyMDIzLTA2LTAxVDEyOjMzOjU0LjAwMFoiLAogICAgICAicGVybWFsaW5rIjogIi9wYWdlcy84ZWYxN2MvIiwKICAgICAgImNhdGVnb3JpZXMiOiBbIueul+azlSIsICLnrpfms5XmiZPljaEiXSwKICAgICAgInRhZ3MiOiBbIuaJk+WNoSJdCiAgICB9LAogICAgInJlZ3VsYXJQYXRoIjogIi8wMi4lRTclQUUlOTclRTYlQjMlOTUvMDEuJUU3JUFFJTk3JUU2JUIzJTk1JUU2JTg5JTkzJUU1JThEJUExLzA4LkRheTA4LSVFNSVBRCU5NyVFNyVBQyVBNiVFNCVCOCVCMi5odG1sIiwKICAgICJyZWxhdGl2ZVBhdGgiOiAiMDIu566X5rOVLzAxLueul+azleaJk+WNoS8wOC5EYXkwOC3lrZfnrKbkuLIubWQiLAogICAgImtleSI6ICJ2LTI3MTE1YjZjIiwKICAgICJwYXRoIjogIi9wYWdlcy84ZWYxN2MvIiwKICAgICJoZWFkZXJzIjogW3sKICAgICAgImxldmVsIjogMiwKICAgICAgInRpdGxlIjogIjI4LuWunueOsCBzdHJTdHIoKSIsCiAgICAgICJzbHVnIjogIl8yOC3lrp7njrAtc3Ryc3RyIiwKICAgICAgIm5vcm1hbGl6ZWRUaXRsZSI6ICIyOC4g5a6e546wIHN0cnN0ciAoKSIsCiAgICAgICJjaGFySW5kZXgiOiAyCiAgICB9LCB7CiAgICAgICJsZXZlbCI6IDMsCiAgICAgICJ0aXRsZSI6ICLlvZXliY3mg7Pms5UiLAogICAgICAic2x1ZyI6ICLlvZXliY3mg7Pms5UiLAogICAgICAibm9ybWFsaXplZFRpdGxlIjogIuW9leWJjeaDs+azlSIsCiAgICAgICJjaGFySW5kZXgiOiAxMzkKICAgIH0sIHsKICAgICAgImxldmVsIjogMywKICAgICAgInRpdGxlIjogIuW9leWQjuaDs+azlSIsCiAgICAgICJzbHVnIjogIuW9leWQjuaDs+azlSIsCiAgICAgICJub3JtYWxpemVkVGl0bGUiOiAi5b2V5ZCO5oOz5rOVIiwKICAgICAgImNoYXJJbmRleCI6IDE2NwogICAgfSwgewogICAgICAibGV2ZWwiOiAzLAogICAgICAidGl0bGUiOiAi5oC757uTIiwKICAgICAgInNsdWciOiAi5oC757uTIiwKICAgICAgIm5vcm1hbGl6ZWRUaXRsZSI6ICLmgLvnu5MiLAogICAgICAiY2hhckluZGV4IjogMTc2MQogICAgfSwgewogICAgICAibGV2ZWwiOiAyLAogICAgICAidGl0bGUiOiAiNDU5LumHjeWkjeeahOWtkOWtl+espuS4siIsCiAgICAgICJzbHVnIjogIl80NTkt6YeN5aSN55qE5a2Q5a2X56ym5LiyIiwKICAgICAgIm5vcm1hbGl6ZWRUaXRsZSI6ICI0NTkuIOmHjeWkjeeahOWtkOWtl+espuS4siIsCiAgICAgICJjaGFySW5kZXgiOiAyMAogICAgfSwgewogICAgICAibGV2ZWwiOiAzLAogICAgICAidGl0bGUiOiAi5b2V5YmN5oOz5rOVIiwKICAgICAgInNsdWciOiAi5b2V5YmN5oOz5rOVLTIiLAogICAgICAibm9ybWFsaXplZFRpdGxlIjogIuW9leWJjeaDs+azlSIsCiAgICAgICJjaGFySW5kZXgiOiAxMzkKICAgIH0sIHsKICAgICAgImxldmVsIjogMywKICAgICAgInRpdGxlIjogIuW9leWQjuaDs+azlSIsCiAgICAgICJzbHVnIjogIuW9leWQjuaDs+azlS0yIiwKICAgICAgIm5vcm1hbGl6ZWRUaXRsZSI6ICLlvZXlkI7mg7Pms5UiLAogICAgICAiY2hhckluZGV4IjogMTY3CiAgICB9LCB7CiAgICAgICJsZXZlbCI6IDMsCiAgICAgICJ0aXRsZSI6ICLmgLvnu5MiLAogICAgICAic2x1ZyI6ICLmgLvnu5MtMiIsCiAgICAgICJub3JtYWxpemVkVGl0bGUiOiAi5oC757uTIiwKICAgICAgImNoYXJJbmRleCI6IDE3NjEKICAgIH0sIHsKICAgICAgImxldmVsIjogMiwKICAgICAgInRpdGxlIjogIuaAu+e7kyIsCiAgICAgICJzbHVnIjogIuaAu+e7ky0zIiwKICAgICAgIm5vcm1hbGl6ZWRUaXRsZSI6ICLmgLvnu5MiLAogICAgICAiY2hhckluZGV4IjogMTc2MQogICAgfV0sCiAgICAiZXhjZXJwdCI6ICI8YmxvY2txdW90ZT5cbjxwPjI4LiDlrp7njrAgc3RyU3RyICgp44CBIDQ1OS4g6YeN5aSN55qE5a2Q5a2X56ym5LiyPC9wPlxuPC9ibG9ja3F1b3RlPlxuIiwKICAgICJsYXN0VXBkYXRlZCI6ICI2LzIvMjAyMywgNjozNDowMCBQTSIsCiAgICAibGFzdFVwZGF0ZWRUaW1lc3RhbXAiOiAxNjg1NzAyMDQwMDAwLAogICAgImhlYWRlcnNTdHIiOiAiMjgu5a6e546wIHN0clN0cigpIOW9leWJjeaDs+azlSDlvZXlkI7mg7Pms5Ug5oC757uTIDQ1OS7ph43lpI3nmoTlrZDlrZfnrKbkuLIg5b2V5YmN5oOz5rOVIOW9leWQjuaDs+azlSDmgLvnu5Mg5oC757uTIiwKICAgICJjb250ZW50IjogIj4gMjguIOWunueOsCBzdHJTdHIgKCnjgIEgNDU5LiDph43lpI3nmoTlrZDlrZfnrKbkuLJcblxuXG4jIDI4LiDlrp7njrAgc3RyU3RyICgpXG5cbiAqIOmimOebru+8mjI4LiDlrp7njrAgc3RyU3RyICgpXG4gKiDorrLop6PvvJrmlofnq6DorrLop6PjgIHop4bpopHorrLop6MgKOeQhuiuuinjgIHop4bpopHorrLop6MgKG5leHQg5pWw57uEKVxuICog6KaB5rGC77ya55CG6Kej5aSn5ZCN6byO6byO55qEIEtNUCDnrpfms5VcblxuXG4jIOW9leWJjeaDs+azlVxuXG7lj6rmg7Plh7rmmrTlipsgTyAobl4yKSDnmoTop6Pms5VcblxuXG4jIOW9leWQjuaDs+azlVxuXG7nnIvlrozorrLop6PvvIzkuIDlvIDlp4vlr7nmsYIgbmV4dCDmlbDnu4Tpg6jliIbnmoTliJ3lp4vljJblj5jph4/pnZ7luLjkuI3op6PvvIzlsKTlhbbmmK/kuKTkuKogXCLmnKvlsL5cIlxuXG7pmr7ngrnmiJHop4nlvpflnKjkuo7ljZXkuKrlj5jph4/ljIXlkKvkuobkuKTnp43lkKvkuYnvvIzml6LmmK/liY3nvIDlpLTlj4jmmK/mnIDplb/nm7jnrYnliY3lkI7nvIDvvIzmsqHnu5XmmI7nmb1cblxu5YaN5pG457Si5pG457SiXG5cbuiHquW3seaFouaFouejqOWHuuS6huS7o+egge+8jOW3siBBQyAo4pyU77iPKVxuXG5jbGFzcyBTb2x1dGlvbiB7XG5wdWJsaWM6XG4gICAgaW50IHN0clN0cihzdHJpbmcgaGF5c3RhY2ssIHN0cmluZyBuZWVkbGUpIHtcblxuICAgICAgICBpbnQgbmVlZGxlTGVuID0gbmVlZGxlLnNpemUoKTtcbiAgICAgICAgaW50IGhheXN0YWNrTGVuID0gaGF5c3RhY2suc2l6ZSgpO1xuICAgICAgICBpbnQgbmV4dFtuZWVkbGVMZW5dO1xuXG4gICAgICAgIC8vIOaxguWHum5leHTmlbDnu4RcbiAgICAgICAgZ2V0TmV4dChuZXh0LG5lZWRsZSk7XG5cbiAgICAgICAgLy8g6YGN5Y6GXG4gICAgICAgIC8vIGkg5o6n5Yi25paH5pys5LiyXG4gICAgICAgIC8vIGog5o6n5Yi25qih5byP5LiyXG4gICAgICAgIGZvcihpbnQgaSA9IDAsaiA9IDA7IGkgPCBoYXlzdGFja0xlbjsgKytpKXtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8g5Yy56YWN5LiN55u4562JXG4gICAgICAgICAgICB3aGlsZShoYXlzdGFja1tpXSAhPSBuZWVkbGVbal0gJiYgaiA+IDApe1xuICAgICAgICAgICAgICAgIGogPSBuZXh0W2ogLSAxXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8g5Yy56YWNXG4gICAgICAgICAgICBpZihoYXlzdGFja1tpXSA9PSBuZWVkbGVbal0pe1xuICAgICAgICAgICAgICAgIGorKztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8g5Lul5ruh6Laz6L+U5ZueXG4gICAgICAgICAgICBpZihqID09IG5lZWRsZUxlbil7XG4gICAgICAgICAgICAgICAgLy8gaSA9IDhcbiAgICAgICAgICAgICAgICAvLyBuZWVkbGVMZW4gPSA2XG4gICAgICAgICAgICAgICAgLy8gYW5zID0gM1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGkgLSBuZWVkbGVMZW4gKyAxO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIC0xO1xuICAgIH1cblxuICAgIC8vIOaxgm5leHTmlbDnu4RcbiAgICB2b2lkIGdldE5leHQoaW50ICpuZXh0LHN0cmluZyBuZWVkbGUpe1xuXG4gICAgICAgIGludCBwID0gMDsgLy8g5a6a5LmJ5YmN57yA5aS05ZKM6K6w5b2V5pyA6ZW/55u4562J5YmN5ZCO57yA6K6w5b2VXG4gICAgICAgIG5leHRbMF0gPSAwO1xuXG4gICAgICAgIC8vIOWumuS5ieWQjue8gOihqOWwvuWSjOaOp+WItuaVtOS9k+aooeW8j+S4slxuICAgICAgICBmb3IoaW50IHMgPSAxO3MgPCBuZWVkbGUuc2l6ZSgpOyArK3Mpe1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyDkuI3ljLnphY3ml7bvvIzlm57pgIBcbiAgICAgICAgICAgIHdoaWxlKHAgPiAwICYmIG5lZWRsZVtwXSAhPSBuZWVkbGVbc10pe1xuICAgICAgICAgICAgICAgIHAgPSBuZXh0W3AtMV07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIOWMuemFjVxuICAgICAgICAgICAgaWYobmVlZGxlW3BdID09IG5lZWRsZVtzXSl7XG4gICAgICAgICAgICAgICAgKytwO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyDmm7TmlrBcbiAgICAgICAgICAgIG5leHRbc10gPSBwO1xuICAgICAgICB9XG4gICAgfVxufTtcblxuXG4xXG4yXG4zXG40XG41XG42XG43XG44XG45XG4xMFxuMTFcbjEyXG4xM1xuMTRcbjE1XG4xNlxuMTdcbjE4XG4xOVxuMjBcbjIxXG4yMlxuMjNcbjI0XG4yNVxuMjZcbjI3XG4yOFxuMjlcbjMwXG4zMVxuMzJcbjMzXG4zNFxuMzVcbjM2XG4zN1xuMzhcbjM5XG40MFxuNDFcbjQyXG40M1xuNDRcbjQ1XG40NlxuNDdcbjQ4XG40OVxuNTBcbjUxXG41MlxuNTNcbjU0XG41NVxuNTZcbjU3XG41OFxuNTlcbjYwXG42MVxuNjJcbjYzXG5cblxuXG4jIOaAu+e7k1xuXG4gKiDlm57pgIDpg6jliIbnoa7lrp7lpoLljaHlk6XmiYDor7TkuIDlvIDlp4vlhpnnmoTml7YgaWYg5LiN5pivIHdoaWxl8J+YglxuXG5cbiMgNDU5LiDph43lpI3nmoTlrZDlrZfnrKbkuLJcblxuICog6aKY55uu77yaNDU5LiDph43lpI3nmoTlrZDlrZfnrKbkuLJcbiAqIOiusuino++8muaWh+eroOiusuino+OAgeinhumikeiusuino1xuICog6KaB5rGC77yaS01QIOeul+azleeahOW6lOeUqFxuXG5cbiMg5b2V5YmN5oOz5rOVXG5cblxuIyDlvZXlkI7mg7Pms5VcblxuXG4jIOaAu+e7k1xuXG5cbiMg5oC757uTXG5cbiAqIOaVsOe7hOWIneWni+WMlueahOe7huiKgu+8mlxuXG5pbnQgYVtuXT17MH07IC8vIOazqOaEj27lv4XpobvkuLpjb25zdOexu+Wei++8jOWQpuWImemUmeivr1xuXG5cbjFcbiIsCiAgICAibm9ybWFsaXplZENvbnRlbnQiOiAiPiAyOC4g5a6e546wIHN0cnN0ciAoKeOAgSA0NTkuIOmHjeWkjeeahOWtkOWtl+espuS4slxuXG5cbiMgMjguIOWunueOsCBzdHJzdHIgKClcblxuICog6aKY55uu77yaMjguIOWunueOsCBzdHJzdHIgKClcbiAqIOiusuino++8muaWh+eroOiusuino+OAgeinhumikeiusuinoyAo55CG6K66KeOAgeinhumikeiusuinoyAobmV4dCDmlbDnu4QpXG4gKiDopoHmsYLvvJrnkIbop6PlpKflkI3pvI7pvI7nmoQga21wIOeul+azlVxuXG5cbiMg5b2V5YmN5oOz5rOVXG5cbuWPquaDs+WHuuaatOWKmyBvIChuXjIpIOeahOino+azlVxuXG5cbiMg5b2V5ZCO5oOz5rOVXG5cbueci+WujOiusuino++8jOS4gOW8gOWni+WvueaxgiBuZXh0IOaVsOe7hOmDqOWIhueahOWIneWni+WMluWPmOmHj+mdnuW4uOS4jeino++8jOWwpOWFtuaYr+S4pOS4qiBcIuacq+WwvlwiXG5cbumavueCueaIkeinieW+l+WcqOS6juWNleS4quWPmOmHj+WMheWQq+S6huS4pOenjeWQq+S5ie+8jOaXouaYr+WJjee8gOWktOWPiOaYr+acgOmVv+ebuOetieWJjeWQjue8gO+8jOayoee7leaYjueZvVxuXG7lho3mkbjntKLmkbjntKJcblxu6Ieq5bex5oWi5oWi56Oo5Ye65LqG5Luj56CB77yM5beyIGFjICjinJTvuI8pXG5cbmNsYXNzIHNvbHV0aW9uIHtcbnB1YmxpYzpcbiAgICBpbnQgc3Ryc3RyKHN0cmluZyBoYXlzdGFjaywgc3RyaW5nIG5lZWRsZSkge1xuXG4gICAgICAgIGludCBuZWVkbGVsZW4gPSBuZWVkbGUuc2l6ZSgpO1xuICAgICAgICBpbnQgaGF5c3RhY2tsZW4gPSBoYXlzdGFjay5zaXplKCk7XG4gICAgICAgIGludCBuZXh0W25lZWRsZWxlbl07XG5cbiAgICAgICAgLy8g5rGC5Ye6bmV4dOaVsOe7hFxuICAgICAgICBnZXRuZXh0KG5leHQsbmVlZGxlKTtcblxuICAgICAgICAvLyDpgY3ljoZcbiAgICAgICAgLy8gaSDmjqfliLbmlofmnKzkuLJcbiAgICAgICAgLy8gaiDmjqfliLbmqKHlvI/kuLJcbiAgICAgICAgZm9yKGludCBpID0gMCxqID0gMDsgaSA8IGhheXN0YWNrbGVuOyArK2kpe1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyDljLnphY3kuI3nm7jnrYlcbiAgICAgICAgICAgIHdoaWxlKGhheXN0YWNrW2ldICE9IG5lZWRsZVtqXSAmJiBqID4gMCl7XG4gICAgICAgICAgICAgICAgaiA9IG5leHRbaiAtIDFdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyDljLnphY1cbiAgICAgICAgICAgIGlmKGhheXN0YWNrW2ldID09IG5lZWRsZVtqXSl7XG4gICAgICAgICAgICAgICAgaisrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyDku6Xmu6HotrPov5Tlm55cbiAgICAgICAgICAgIGlmKGogPT0gbmVlZGxlbGVuKXtcbiAgICAgICAgICAgICAgICAvLyBpID0gOFxuICAgICAgICAgICAgICAgIC8vIG5lZWRsZWxlbiA9IDZcbiAgICAgICAgICAgICAgICAvLyBhbnMgPSAzXG5cbiAgICAgICAgICAgICAgICByZXR1cm4gaSAtIG5lZWRsZWxlbiArIDE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gLTE7XG4gICAgfVxuXG4gICAgLy8g5rGCbmV4dOaVsOe7hFxuICAgIHZvaWQgZ2V0bmV4dChpbnQgKm5leHQsc3RyaW5nIG5lZWRsZSl7XG5cbiAgICAgICAgaW50IHAgPSAwOyAvLyDlrprkuYnliY3nvIDlpLTlkozorrDlvZXmnIDplb/nm7jnrYnliY3lkI7nvIDorrDlvZVcbiAgICAgICAgbmV4dFswXSA9IDA7XG5cbiAgICAgICAgLy8g5a6a5LmJ5ZCO57yA6KGo5bC+5ZKM5o6n5Yi25pW05L2T5qih5byP5LiyXG4gICAgICAgIGZvcihpbnQgcyA9IDE7cyA8IG5lZWRsZS5zaXplKCk7ICsrcyl7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIOS4jeWMuemFjeaXtu+8jOWbnumAgFxuICAgICAgICAgICAgd2hpbGUocCA+IDAgJiYgbmVlZGxlW3BdICE9IG5lZWRsZVtzXSl7XG4gICAgICAgICAgICAgICAgcCA9IG5leHRbcC0xXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8g5Yy56YWNXG4gICAgICAgICAgICBpZihuZWVkbGVbcF0gPT0gbmVlZGxlW3NdKXtcbiAgICAgICAgICAgICAgICArK3A7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIOabtOaWsFxuICAgICAgICAgICAgbmV4dFtzXSA9IHA7XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG5cbjFcbjJcbjNcbjRcbjVcbjZcbjdcbjhcbjlcbjEwXG4xMVxuMTJcbjEzXG4xNFxuMTVcbjE2XG4xN1xuMThcbjE5XG4yMFxuMjFcbjIyXG4yM1xuMjRcbjI1XG4yNlxuMjdcbjI4XG4yOVxuMzBcbjMxXG4zMlxuMzNcbjM0XG4zNVxuMzZcbjM3XG4zOFxuMzlcbjQwXG40MVxuNDJcbjQzXG40NFxuNDVcbjQ2XG40N1xuNDhcbjQ5XG41MFxuNTFcbjUyXG41M1xuNTRcbjU1XG41NlxuNTdcbjU4XG41OVxuNjBcbjYxXG42MlxuNjNcblxuXG5cbiMg5oC757uTXG5cbiAqIOWbnumAgOmDqOWIhuehruWunuWmguWNoeWTpeaJgOivtOS4gOW8gOWni+WGmeeahOaXtiBpZiDkuI3mmK8gd2hpbGXwn5iCXG5cblxuIyA0NTkuIOmHjeWkjeeahOWtkOWtl+espuS4slxuXG4gKiDpopjnm67vvJo0NTkuIOmHjeWkjeeahOWtkOWtl+espuS4slxuICog6K6y6Kej77ya5paH56ug6K6y6Kej44CB6KeG6aKR6K6y6KejXG4gKiDopoHmsYLvvJprbXAg566X5rOV55qE5bqU55SoXG5cblxuIyDlvZXliY3mg7Pms5VcblxuXG4jIOW9leWQjuaDs+azlVxuXG5cbiMg5oC757uTXG5cblxuIyDmgLvnu5NcblxuICog5pWw57uE5Yid5aeL5YyW55qE57uG6IqC77yaXG5cbmludCBhW25dPXswfTsgLy8g5rOo5oSPbuW/hemhu+S4umNvbnN057G75Z6L77yM5ZCm5YiZ6ZSZ6K+vXG5cblxuMVxuIiwKICAgICJjaGFyc2V0cyI6IHsKICAgICAgImNqayI6IHRydWUKICAgIH0KICB9LCB7CiAgICAidGl0bGUiOiAi5a2X56ym5LiyIiwKICAgICJmcm9udG1hdHRlciI6IHsKICAgICAgInRpdGxlIjogIuWtl+espuS4siIsCiAgICAgICJkYXRlIjogIjIwMjMtMDYtMDJUMTA6MTk6NTkuMDAwWiIsCiAgICAgICJwZXJtYWxpbmsiOiAiL3BhZ2VzL2QxZGM0YS8iLAogICAgICAiY2F0ZWdvcmllcyI6IFsi566X5rOVIiwgIue7j+WFuOeul+azlSJdLAogICAgICAidGFncyI6IFsi57uP5YW4566X5rOVIl0KICAgIH0sCiAgICAicmVndWxhclBhdGgiOiAiLzAyLiVFNyVBRSU5NyVFNiVCMyU5NS8wMi4lRTclQkIlOEYlRTUlODUlQjglRTclQUUlOTclRTYlQjMlOTUvMDEuJUU1JUFEJTk3JUU3JUFDJUE2JUU0JUI4JUIyLmh0bWwiLAogICAgInJlbGF0aXZlUGF0aCI6ICIwMi7nrpfms5UvMDIu57uP5YW4566X5rOVLzAxLuWtl+espuS4si5tZCIsCiAgICAia2V5IjogInYtNTZhODliODAiLAogICAgInBhdGgiOiAiL3BhZ2VzL2QxZGM0YS8iLAogICAgImhlYWRlcnMiOiBbewogICAgICAibGV2ZWwiOiAyLAogICAgICAidGl0bGUiOiAiS01QIiwKICAgICAgInNsdWciOiAia21wIiwKICAgICAgIm5vcm1hbGl6ZWRUaXRsZSI6ICJrbXAiLAogICAgICAiY2hhckluZGV4IjogNAogICAgfSwgewogICAgICAibGV2ZWwiOiAzLAogICAgICAidGl0bGUiOiAi5YmN572u55+l6K+GIiwKICAgICAgInNsdWciOiAi5YmN572u55+l6K+GIiwKICAgICAgIm5vcm1hbGl6ZWRUaXRsZSI6ICLliY3nva7nn6Xor4YiLAogICAgICAiY2hhckluZGV4IjogMjAKICAgIH0sIHsKICAgICAgImxldmVsIjogMywKICAgICAgInRpdGxlIjogIuiDveino+WGs+S7gOS5iOmXrumimO+8nyIsCiAgICAgICJzbHVnIjogIuiDveino+WGs+S7gOS5iOmXrumimCIsCiAgICAgICJub3JtYWxpemVkVGl0bGUiOiAi6IO96Kej5Yaz5LuA5LmI6Zeu6aKY77yfIiwKICAgICAgImNoYXJJbmRleCI6IDkzNwogICAgfSwgewogICAgICAibGV2ZWwiOiAzLAogICAgICAidGl0bGUiOiAibmV4dOaVsOe7hCIsCiAgICAgICJzbHVnIjogIm5leHTmlbDnu4QiLAogICAgICAibm9ybWFsaXplZFRpdGxlIjogIm5leHQg5pWw57uEIiwKICAgICAgImNoYXJJbmRleCI6IDEyMjYKICAgIH0sIHsKICAgICAgImxldmVsIjogMywKICAgICAgInRpdGxlIjogIuWujOaVtOeahEtNUOa1geeoiyIsCiAgICAgICJzbHVnIjogIuWujOaVtOeahGttcOa1geeoiyIsCiAgICAgICJub3JtYWxpemVkVGl0bGUiOiAi5a6M5pW055qEIGttcCDmtYHnqIsiLAogICAgICAiY2hhckluZGV4IjogMTkyOAogICAgfV0sCiAgICAiZXhjZXJwdCI6ICI8ZGl2IGNsYXNzPVwiY3VzdG9tLWJsb2NrIHRpcFwiPjxwIGNsYXNzPVwiY3VzdG9tLWJsb2NrLXRpdGxlXCI+5o+Q56S6PC9wPlxuPHA+S01QPC9wPlxuPC9kaXY+XG4iLAogICAgImxhc3RVcGRhdGVkIjogIjYvMi8yMDIzLCA2OjM0OjAwIFBNIiwKICAgICJsYXN0VXBkYXRlZFRpbWVzdGFtcCI6IDE2ODU3MDIwNDAwMDAsCiAgICAiaGVhZGVyc1N0ciI6ICJLTVAg5YmN572u55+l6K+GIOiDveino+WGs+S7gOS5iOmXrumimO+8nyBuZXh05pWw57uEIOWujOaVtOeahEtNUOa1geeoiyIsCiAgICAiY29udGVudCI6ICLmj5DnpLpcblxuS01QXG5cblxuIyBLTVBcblxuXG4jIOWJjee9ruefpeivhlxuXG4gKiDmlofmnKzkuLIg77yaXCJhYWJhYWJhYWZcIuOAkOaZrumAmuWtl+espuS4suOAkVxuXG4gKiDmqKHlvI/kuLIg77yaXCJhYWJhYWZcIuOAkOW+heWMuemFjeeahOWtl+espuS4suOAkVxuXG4gKiDliY3nvIDvvIhwcmVmaXjvvIkg77ya5paH5pys5Liy5Lit5YyF5ZCr6aaW5a2X56ym77yM5LiN5YyF5ZCr5bC+5a2X56ym55qE5a2X56ym5Liy44CQZXg6XCJhYWJhYWZcIuOAkVxuICAgXG4gICAqIGFcbiAgICogYWFcbiAgICogYWFiXG4gICAqIGFhYmFcbiAgICogYWFiYWFcbiAgICogYWFiYWFm77yI4p2M77yJXG5cbiAqIOWQjue8gO+8iHN1ZmZpeO+8iSDvvJrmlofmnKzkuLLkuK3kuI3ljIXlkKvpppblrZfnrKbvvIzljIXlkKvlsL7lrZfnrKbnmoTlrZfnrKbkuLLjgJBleDpcImFhYmFhZlwi44CRXG4gICBcbiAgICogZlxuICAgKiBhZlxuICAgKiBhYWZcbiAgICogYmFhYWZcbiAgICogYWJhYWZcbiAgICogYWFiYWFm77yI4p2M77yJXG5cbiAqIOacgOmVv+ebuOetieWJjeWQjue8gCDvvJrlsLHmmK/liY3nvIDnrYnkuo7lkI7nvIDjgJBleDpcImFhYmFhZlwi44CRXG4gICBcbiAgIOWtl+espuS4siAgICAgIOWJjee8gCAgICAgICAgICAgICAgICAgICDlkI7nvIAgICAgICAgICAgICAgICAgICAgIOacgOmVv+ebuOetieWJjeWQjue8gFxuICAgYSAgICAgICAg5pegICAgICAgICAgICAgICAgICAgICDml6AgICAgICAgICAgICAgICAgICAgICAwXG4gICBhYSAgICAgICBhICAgICAgICAgICAgICAgICAgICBhICAgICAgICAgICAgICAgICAgICAgMVxuICAgYWFiICAgICAgYSBhYSAgICAgICAgICAgICAgICAgYiBhYiAgICAgICAgICAgICAgICAgIDBcbiAgIGFhYmEgICAgIGEgYWEgYWFiICAgICAgICAgICAgIGEgYmEgYWJhICAgICAgICAgICAgICAxXG4gICBhYWJhYSAgICBhIGFhIGFhYiBhYWJhICAgICAgICBhIGFhIGJhYSBhYmFhICAgICAgICAgMlxuICAgYWFiYWFmICAgYWFhIGFhYiBhYWJhIGFhYmFhICAgZiBhZiBhYWYgYmFhZiBhYmFhZiAgIDBcblxuICog5YmN57yA6KGoIO+8muWtmOaUvuWtl+espuS4suS4reacgOmVv+ebuOetieWJjeWQjue8gOeahOaVsOe7hO+8jOeUqOS6juWMuemFjeWksei0peWQjui3s+i9rOWIsOeahOS9jee9ru+8iEtNUCDmoLjlv4PvvInigLzvuI9cbiAgIFxuICAg5YaF5a65ICAgQSAgIEEgICBCICAgQSAgIEEgICBGXG4gICDkuIvmoIcgICAwICAgMSAgIDAgICAxICAgMiAgIDBcblxuICog5YmN57yA5aS0IO+8muOAkGV4OlwiYWFiYWFmXCLjgJHkuK0gXCJhYWJhYWZcIlxuXG4gKiDlkI7nvIDlsL4g77ya44CQZXg6XCJhYWJhYWZcIuOAkeS4rSBcImFhYmFhZlwiXG5cblxuIyDog73op6PlhrPku4DkuYjpl67popjvvJ9cblxu5aSn5q615a2X56ym5Liy5Lit77yM5Yy56YWN5p+Q5LiA5bCP5q6155qE5a2X56ym5Liy77yM57G75Ly8IEN0cmwrRiDnmoTmkJzntKLlip/og71cblxu5pmu6YCa55qE5q+U6L6D77yM6ZyA6KaB5LiA5q615LiA5q6155qE5q+U6L6D5a6M5ZCO56e75Zyo5q+U6L6DLi4uXG5cbuaWh+acrOS4sjpcImFhYmFhYmFhZlwiXG5cbuaooeW8j+S4sjpcImFhYmFhZlwiXG5cbj4gYSBhIGIgYSBhIGIgYSBhIGYg55qE5Yy56YWN6L+H56iL5aaC5LiL77yaXG4+IFxuPiAgMS4gYSBhIGIgYSBhIGYo4p2MKe+8jOaVtOS9k+WQjuenu1xuPiAgMi4gYSBhIGIgYSBhIGYo4p2MKe+8jOaVtOS9k+WQjuenu1xuPiAgMy4gYSBhIGIgYSBhIGYo4p2MKe+8jOaVtOS9k+WQjuenu1xuPiAgNC4gYSBhIGIgYSBhIGYo4pyU77iPKe+8jOWujOaIkOWMuemFjVxuXG7ov5nmmL7nhLbmlYjnjofpnZ7luLjkvY7vvIxLTVAg566X5rOV5bCx5piv6Kej5Yaz5LqG6L+Z5Liq6Zeu6aKY77yM5qC45b+D5piv5LiN5YOP5pmu6YCa566X5rOV55qE5Y+q5ZCR5ZCO56e75LiA5L2N77yMS01QIOmAmui/hyBuZXh0IOaVsOe7hO+8jOWPr+S7peS4gOasoeenu+WkmuS9jeadpeaPkOS6pOaViOeOh1xuXG5cbiMgbmV4dCDmlbDnu4Rcblxu55uu55qEIO+8muaxguaooeW8j+S4sueahOWJjee8gOihqFxuXG7mraXpqqQg77yaXG5cbiAxLiDliJ3lp4vljJZcbiAyLiDlpITnkIbliY3nvIDkuI3nm7jlkIxcbiAzLiDlpITnkIbliY3nvIDnm7jlkIxcbiA0LiDmm7TmlrAgbmV4dCDmlbDnu4RcblxuLy8gbmV4dOS4um5leHTmlbDnu4Rcbi8vIHN0cuS4uuaooeW8j+S4slxudm9pZCBnZXROZXh0KGludCAqbmV4dCxzdHJpbmcgc3RyKXtcbiAgICAvLyAxLiDliJ3lp4vljJZcbiAgICBpbnQgcCA9IDA7ICAgLy8g5YmN57yA5aS0IOWSjCDmnIDplb/liY3lkI7nvIDnm7jlkIzlgLxcbiAgICBuZXh0WzBdID0gMDsgLy8g56ys5LiA5Liq5a2X56ym5rKh5pyJ5YmN57yA5ZKM5ZCO57yA77yM5pWF5Li6MFxuICAgIFxuICAgIC8vIOmBjeWOhuecn+S4quaooeW8j+S4sizku44x5byA5aeL5Zug5Li656ys5LiA5Liq5a2X56ym5pyA6ZW/5YmN5ZCO57yA55u45ZCM5YC85Li6MFxuICAgIGZvcihpbnQgcyA9IDE7cG9zIDwgc3RyLnNpemUoKTsrK3Bvcyl7IC8vIHPkuLrlkI7nvIDlsL5cbiAgICAgICAgXG4gICAgICAgIC8vIDIs5aSE55CG5YmN57yA5LiN55u45ZCMXG4gICAgICAgIHdoaWxlKHN0cltzXSAhPSBzdHJbcF0gJiYgcCA+IDApe1xuICAgICAgICAgICAgLy8g5Zue6YCAXG4gICAgICAgICAgICBwID0gbmV4dFtwIC0gMV3vvJtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gMy4g5aSE55CG5YmN57yA55u45ZCMXG4gICAgICAgIGlmKHN0cltzXSA9PSBzdHJbcF0pe1xuICAgICAgICAgICAgKytwO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyA0LiDmm7TmlrBuZXh05pWw57uEXG4gICAgICAgIG5leHRbc10gPSBwO1xuICAgIH1cbn1cblxuXG4xXG4yXG4zXG40XG41XG42XG43XG44XG45XG4xMFxuMTFcbjEyXG4xM1xuMTRcbjE1XG4xNlxuMTdcbjE4XG4xOVxuMjBcbjIxXG4yMlxuMjNcbjI0XG4yNVxuXG5cbuacgOe7iOW+l+WIsO+8mlxuXG5cblxuXG4jIOWujOaVtOeahCBLTVAg5rWB56iLXG5cblxuXG5jbGFzcyBTb2x1dGlvbiB7XG5wdWJsaWM6XG4gICAgaW50IHN0clN0cihzdHJpbmcgaGF5c3RhY2ssIHN0cmluZyBuZWVkbGUpIHtcblxuICAgICAgICBpbnQgbmVlZGxlTGVuID0gbmVlZGxlLnNpemUoKTtcbiAgICAgICAgaW50IGhheXN0YWNrTGVuID0gaGF5c3RhY2suc2l6ZSgpO1xuICAgICAgICBpbnQgbmV4dFtuZWVkbGVMZW5dO1xuXG4gICAgICAgIC8vIOaxguWHum5leHTmlbDnu4RcbiAgICAgICAgZ2V0TmV4dChuZXh0LG5lZWRsZSk7XG5cbiAgICAgICAgLy8g6YGN5Y6GXG4gICAgICAgIC8vIGkg5o6n5Yi25paH5pys5LiyXG4gICAgICAgIC8vIGog5o6n5Yi25qih5byP5LiyXG4gICAgICAgIGZvcihpbnQgaSA9IDAsaiA9IDA7IGkgPCBoYXlzdGFja0xlbjsgKytpKXtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8g5Yy56YWN5LiN55u4562JXG4gICAgICAgICAgICB3aGlsZShoYXlzdGFja1tpXSAhPSBuZWVkbGVbal0gJiYgaiA+IDApe1xuICAgICAgICAgICAgICAgIGogPSBuZXh0W2ogLSAxXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8g5Yy56YWNXG4gICAgICAgICAgICBpZihoYXlzdGFja1tpXSA9PSBuZWVkbGVbal0pe1xuICAgICAgICAgICAgICAgIGorKztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8g5Lul5ruh6Laz6L+U5ZueXG4gICAgICAgICAgICBpZihqID09IG5lZWRsZUxlbil7XG4gICAgICAgICAgICAgICAgLy8gaSA9IDhcbiAgICAgICAgICAgICAgICAvLyBuZWVkbGVMZW4gPSA2XG4gICAgICAgICAgICAgICAgLy8gYW5zID0gM1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGkgLSBuZWVkbGVMZW4gKyAxO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIC0xO1xuICAgIH1cblxuICAgIC8vIOaxgm5leHTmlbDnu4RcbiAgICB2b2lkIGdldE5leHQoaW50ICpuZXh0LHN0cmluZyBuZWVkbGUpe1xuXG4gICAgICAgIGludCBwID0gMDsgLy8g5a6a5LmJ5YmN57yA5aS05ZKM6K6w5b2V5pyA6ZW/55u4562J5YmN5ZCO57yA6K6w5b2VXG4gICAgICAgIG5leHRbMF0gPSAwO1xuXG4gICAgICAgIC8vIOWumuS5ieWQjue8gOihqOWwvuWSjOaOp+WItuaVtOS9k+aooeW8j+S4slxuICAgICAgICBmb3IoaW50IHMgPSAxO3MgPCBuZWVkbGUuc2l6ZSgpOyArK3Mpe1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyDkuI3ljLnphY3ml7bvvIzlm57pgIBcbiAgICAgICAgICAgIHdoaWxlKHAgPiAwICYmIG5lZWRsZVtwXSAhPSBuZWVkbGVbc10pe1xuICAgICAgICAgICAgICAgIHAgPSBuZXh0W3AtMV07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIOWMuemFjVxuICAgICAgICAgICAgaWYobmVlZGxlW3BdID09IG5lZWRsZVtzXSl7XG4gICAgICAgICAgICAgICAgKytwO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyDmm7TmlrBcbiAgICAgICAgICAgIG5leHRbc10gPSBwO1xuICAgICAgICB9XG4gICAgfVxufTtcblxuXG4xXG4yXG4zXG40XG41XG42XG43XG44XG45XG4xMFxuMTFcbjEyXG4xM1xuMTRcbjE1XG4xNlxuMTdcbjE4XG4xOVxuMjBcbjIxXG4yMlxuMjNcbjI0XG4yNVxuMjZcbjI3XG4yOFxuMjlcbjMwXG4zMVxuMzJcbjMzXG4zNFxuMzVcbjM2XG4zN1xuMzhcbjM5XG40MFxuNDFcbjQyXG40M1xuNDRcbjQ1XG40NlxuNDdcbjQ4XG40OVxuNTBcbjUxXG41MlxuNTNcbjU0XG41NVxuNTZcbjU3XG41OFxuNTlcbjYwXG42MVxuNjJcbjYzXG4iLAogICAgIm5vcm1hbGl6ZWRDb250ZW50IjogIuaPkOekulxuXG5rbXBcblxuXG4jIGttcFxuXG5cbiMg5YmN572u55+l6K+GXG5cbiAqIOaWh+acrOS4siDvvJpcImFhYmFhYmFhZlwi44CQ5pmu6YCa5a2X56ym5Liy44CRXG5cbiAqIOaooeW8j+S4siDvvJpcImFhYmFhZlwi44CQ5b6F5Yy56YWN55qE5a2X56ym5Liy44CRXG5cbiAqIOWJjee8gO+8iHByZWZpeO+8iSDvvJrmlofmnKzkuLLkuK3ljIXlkKvpppblrZfnrKbvvIzkuI3ljIXlkKvlsL7lrZfnrKbnmoTlrZfnrKbkuLLjgJBleDpcImFhYmFhZlwi44CRXG4gICBcbiAgICogYVxuICAgKiBhYVxuICAgKiBhYWJcbiAgICogYWFiYVxuICAgKiBhYWJhYVxuICAgKiBhYWJhYWbvvIjinYzvvIlcblxuICog5ZCO57yA77yIc3VmZml477yJIO+8muaWh+acrOS4suS4reS4jeWMheWQq+mmluWtl+espu+8jOWMheWQq+WwvuWtl+espueahOWtl+espuS4suOAkGV4OlwiYWFiYWFmXCLjgJFcbiAgIFxuICAgKiBmXG4gICAqIGFmXG4gICAqIGFhZlxuICAgKiBiYWFhZlxuICAgKiBhYmFhZlxuICAgKiBhYWJhYWbvvIjinYzvvIlcblxuICog5pyA6ZW/55u4562J5YmN5ZCO57yAIO+8muWwseaYr+WJjee8gOetieS6juWQjue8gOOAkGV4OlwiYWFiYWFmXCLjgJFcbiAgIFxuICAg5a2X56ym5LiyICAgICAg5YmN57yAICAgICAgICAgICAgICAgICAgIOWQjue8gCAgICAgICAgICAgICAgICAgICAg5pyA6ZW/55u4562J5YmN5ZCO57yAXG4gICBhICAgICAgICDml6AgICAgICAgICAgICAgICAgICAgIOaXoCAgICAgICAgICAgICAgICAgICAgIDBcbiAgIGFhICAgICAgIGEgICAgICAgICAgICAgICAgICAgIGEgICAgICAgICAgICAgICAgICAgICAxXG4gICBhYWIgICAgICBhIGFhICAgICAgICAgICAgICAgICBiIGFiICAgICAgICAgICAgICAgICAgMFxuICAgYWFiYSAgICAgYSBhYSBhYWIgICAgICAgICAgICAgYSBiYSBhYmEgICAgICAgICAgICAgIDFcbiAgIGFhYmFhICAgIGEgYWEgYWFiIGFhYmEgICAgICAgIGEgYWEgYmFhIGFiYWEgICAgICAgICAyXG4gICBhYWJhYWYgICBhYWEgYWFiIGFhYmEgYWFiYWEgICBmIGFmIGFhZiBiYWFmIGFiYWFmICAgMFxuXG4gKiDliY3nvIDooagg77ya5a2Y5pS+5a2X56ym5Liy5Lit5pyA6ZW/55u4562J5YmN5ZCO57yA55qE5pWw57uE77yM55So5LqO5Yy56YWN5aSx6LSl5ZCO6Lez6L2s5Yiw55qE5L2N572u77yIa21wIOaguOW/g++8ieKAvO+4j1xuICAgXG4gICDlhoXlrrkgICBhICAgYSAgIGIgICBhICAgYSAgIGZcbiAgIOS4i+aghyAgIDAgICAxICAgMCAgIDEgICAyICAgMFxuXG4gKiDliY3nvIDlpLQg77ya44CQZXg6XCJhYWJhYWZcIuOAkeS4rSBcImFhYmFhZlwiXG5cbiAqIOWQjue8gOWwviDvvJrjgJBleDpcImFhYmFhZlwi44CR5LitIFwiYWFiYWFmXCJcblxuXG4jIOiDveino+WGs+S7gOS5iOmXrumimO+8n1xuXG7lpKfmrrXlrZfnrKbkuLLkuK3vvIzljLnphY3mn5DkuIDlsI/mrrXnmoTlrZfnrKbkuLLvvIznsbvkvLwgY3RybCtmIOeahOaQnOe0ouWKn+iDvVxuXG7mma7pgJrnmoTmr5TovoPvvIzpnIDopoHkuIDmrrXkuIDmrrXnmoTmr5TovoPlrozlkI7np7vlnKjmr5TovoMuLi5cblxu5paH5pys5LiyOlwiYWFiYWFiYWFmXCJcblxu5qih5byP5LiyOlwiYWFiYWFmXCJcblxuPiBhIGEgYiBhIGEgYiBhIGEgZiDnmoTljLnphY3ov4fnqIvlpoLkuIvvvJpcbj4gXG4+ICAxLiBhIGEgYiBhIGEgZijinYwp77yM5pW05L2T5ZCO56e7XG4+ICAyLiBhIGEgYiBhIGEgZijinYwp77yM5pW05L2T5ZCO56e7XG4+ICAzLiBhIGEgYiBhIGEgZijinYwp77yM5pW05L2T5ZCO56e7XG4+ICA0LiBhIGEgYiBhIGEgZijinJTvuI8p77yM5a6M5oiQ5Yy56YWNXG5cbui/meaYvueEtuaViOeOh+mdnuW4uOS9ju+8jGttcCDnrpfms5XlsLHmmK/op6PlhrPkuobov5nkuKrpl67popjvvIzmoLjlv4PmmK/kuI3lg4/mma7pgJrnrpfms5XnmoTlj6rlkJHlkI7np7vkuIDkvY3vvIxrbXAg6YCa6L+HIG5leHQg5pWw57uE77yM5Y+v5Lul5LiA5qyh56e75aSa5L2N5p2l5o+Q5Lqk5pWI546HXG5cblxuIyBuZXh0IOaVsOe7hFxuXG7nm67nmoQg77ya5rGC5qih5byP5Liy55qE5YmN57yA6KGoXG5cbuatpemqpCDvvJpcblxuIDEuIOWIneWni+WMllxuIDIuIOWkhOeQhuWJjee8gOS4jeebuOWQjFxuIDMuIOWkhOeQhuWJjee8gOebuOWQjFxuIDQuIOabtOaWsCBuZXh0IOaVsOe7hFxuXG4vLyBuZXh05Li6bmV4dOaVsOe7hFxuLy8gc3Ry5Li65qih5byP5LiyXG52b2lkIGdldG5leHQoaW50ICpuZXh0LHN0cmluZyBzdHIpe1xuICAgIC8vIDEuIOWIneWni+WMllxuICAgIGludCBwID0gMDsgICAvLyDliY3nvIDlpLQg5ZKMIOacgOmVv+WJjeWQjue8gOebuOWQjOWAvFxuICAgIG5leHRbMF0gPSAwOyAvLyDnrKzkuIDkuKrlrZfnrKbmsqHmnInliY3nvIDlkozlkI7nvIDvvIzmlYXkuLowXG4gICAgXG4gICAgLy8g6YGN5Y6G55yf5Liq5qih5byP5LiyLOS7jjHlvIDlp4vlm6DkuLrnrKzkuIDkuKrlrZfnrKbmnIDplb/liY3lkI7nvIDnm7jlkIzlgLzkuLowXG4gICAgZm9yKGludCBzID0gMTtwb3MgPCBzdHIuc2l6ZSgpOysrcG9zKXsgLy8gc+S4uuWQjue8gOWwvlxuICAgICAgICBcbiAgICAgICAgLy8gMizlpITnkIbliY3nvIDkuI3nm7jlkIxcbiAgICAgICAgd2hpbGUoc3RyW3NdICE9IHN0cltwXSAmJiBwID4gMCl7XG4gICAgICAgICAgICAvLyDlm57pgIBcbiAgICAgICAgICAgIHAgPSBuZXh0W3AgLSAxXe+8m1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyAzLiDlpITnkIbliY3nvIDnm7jlkIxcbiAgICAgICAgaWYoc3RyW3NdID09IHN0cltwXSl7XG4gICAgICAgICAgICArK3A7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIDQuIOabtOaWsG5leHTmlbDnu4RcbiAgICAgICAgbmV4dFtzXSA9IHA7XG4gICAgfVxufVxuXG5cbjFcbjJcbjNcbjRcbjVcbjZcbjdcbjhcbjlcbjEwXG4xMVxuMTJcbjEzXG4xNFxuMTVcbjE2XG4xN1xuMThcbjE5XG4yMFxuMjFcbjIyXG4yM1xuMjRcbjI1XG5cblxu5pyA57uI5b6X5Yiw77yaXG5cblxuXG5cbiMg5a6M5pW055qEIGttcCDmtYHnqItcblxuXG5cbmNsYXNzIHNvbHV0aW9uIHtcbnB1YmxpYzpcbiAgICBpbnQgc3Ryc3RyKHN0cmluZyBoYXlzdGFjaywgc3RyaW5nIG5lZWRsZSkge1xuXG4gICAgICAgIGludCBuZWVkbGVsZW4gPSBuZWVkbGUuc2l6ZSgpO1xuICAgICAgICBpbnQgaGF5c3RhY2tsZW4gPSBoYXlzdGFjay5zaXplKCk7XG4gICAgICAgIGludCBuZXh0W25lZWRsZWxlbl07XG5cbiAgICAgICAgLy8g5rGC5Ye6bmV4dOaVsOe7hFxuICAgICAgICBnZXRuZXh0KG5leHQsbmVlZGxlKTtcblxuICAgICAgICAvLyDpgY3ljoZcbiAgICAgICAgLy8gaSDmjqfliLbmlofmnKzkuLJcbiAgICAgICAgLy8gaiDmjqfliLbmqKHlvI/kuLJcbiAgICAgICAgZm9yKGludCBpID0gMCxqID0gMDsgaSA8IGhheXN0YWNrbGVuOyArK2kpe1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyDljLnphY3kuI3nm7jnrYlcbiAgICAgICAgICAgIHdoaWxlKGhheXN0YWNrW2ldICE9IG5lZWRsZVtqXSAmJiBqID4gMCl7XG4gICAgICAgICAgICAgICAgaiA9IG5leHRbaiAtIDFdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyDljLnphY1cbiAgICAgICAgICAgIGlmKGhheXN0YWNrW2ldID09IG5lZWRsZVtqXSl7XG4gICAgICAgICAgICAgICAgaisrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyDku6Xmu6HotrPov5Tlm55cbiAgICAgICAgICAgIGlmKGogPT0gbmVlZGxlbGVuKXtcbiAgICAgICAgICAgICAgICAvLyBpID0gOFxuICAgICAgICAgICAgICAgIC8vIG5lZWRsZWxlbiA9IDZcbiAgICAgICAgICAgICAgICAvLyBhbnMgPSAzXG5cbiAgICAgICAgICAgICAgICByZXR1cm4gaSAtIG5lZWRsZWxlbiArIDE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gLTE7XG4gICAgfVxuXG4gICAgLy8g5rGCbmV4dOaVsOe7hFxuICAgIHZvaWQgZ2V0bmV4dChpbnQgKm5leHQsc3RyaW5nIG5lZWRsZSl7XG5cbiAgICAgICAgaW50IHAgPSAwOyAvLyDlrprkuYnliY3nvIDlpLTlkozorrDlvZXmnIDplb/nm7jnrYnliY3lkI7nvIDorrDlvZVcbiAgICAgICAgbmV4dFswXSA9IDA7XG5cbiAgICAgICAgLy8g5a6a5LmJ5ZCO57yA6KGo5bC+5ZKM5o6n5Yi25pW05L2T5qih5byP5LiyXG4gICAgICAgIGZvcihpbnQgcyA9IDE7cyA8IG5lZWRsZS5zaXplKCk7ICsrcyl7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIOS4jeWMuemFjeaXtu+8jOWbnumAgFxuICAgICAgICAgICAgd2hpbGUocCA+IDAgJiYgbmVlZGxlW3BdICE9IG5lZWRsZVtzXSl7XG4gICAgICAgICAgICAgICAgcCA9IG5leHRbcC0xXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8g5Yy56YWNXG4gICAgICAgICAgICBpZihuZWVkbGVbcF0gPT0gbmVlZGxlW3NdKXtcbiAgICAgICAgICAgICAgICArK3A7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIOabtOaWsFxuICAgICAgICAgICAgbmV4dFtzXSA9IHA7XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG5cbjFcbjJcbjNcbjRcbjVcbjZcbjdcbjhcbjlcbjEwXG4xMVxuMTJcbjEzXG4xNFxuMTVcbjE2XG4xN1xuMThcbjE5XG4yMFxuMjFcbjIyXG4yM1xuMjRcbjI1XG4yNlxuMjdcbjI4XG4yOVxuMzBcbjMxXG4zMlxuMzNcbjM0XG4zNVxuMzZcbjM3XG4zOFxuMzlcbjQwXG40MVxuNDJcbjQzXG40NFxuNDVcbjQ2XG40N1xuNDhcbjQ5XG41MFxuNTFcbjUyXG41M1xuNTRcbjU1XG41NlxuNTdcbjU4XG41OVxuNjBcbjYxXG42MlxuNjNcbiIsCiAgICAiY2hhcnNldHMiOiB7CiAgICAgICJjamsiOiB0cnVlCiAgICB9CiAgfSwgewogICAgInRpdGxlIjogIueul+azlSIsCiAgICAiZnJvbnRtYXR0ZXIiOiB7CiAgICAgICJwYWdlQ29tcG9uZW50IjogewogICAgICAgICJuYW1lIjogIkNhdGFsb2d1ZSIsCiAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAia2V5IjogIjAyLueul+azlSIsCiAgICAgICAgICAiaW1nVXJsIjogIi9hc3NldHMvaW1nL2FsZ29yaXRobS5qcGciLAogICAgICAgICAgImRlc2NyaXB0aW9uIjogIueLrOeri+WBmumimCAtPiDop4bpopHorrLop6MgLT4g5paH56ug6K6y6KejIC0+IOmHjeaWsOWBmumimCAtPiDmlbTnkIbljZrlrqIiCiAgICAgICAgfQogICAgICB9LAogICAgICAidGl0bGUiOiAi566X5rOVIiwKICAgICAgImRhdGUiOiAiMjAyMy0wNS0yNCAyMDoxNyIsCiAgICAgICJwZXJtYWxpbmsiOiAiL2FsZ29yaXRobS8iLAogICAgICAic2lkZWJhciI6IGZhbHNlLAogICAgICAiYXJ0aWNsZSI6IGZhbHNlLAogICAgICAiY29tbWVudCI6IGZhbHNlLAogICAgICAiY29tbWVudHMiOiBmYWxzZSwKICAgICAgImVkaXRMaW5rIjogZmFsc2UKICAgIH0sCiAgICAicmVndWxhclBhdGgiOiAiLzAyLiVFNyVBRSU5NyVFNiVCMyU5NS8iLAogICAgInJlbGF0aXZlUGF0aCI6ICIwMi7nrpfms5UvaW5kZXgubWQiLAogICAgImtleSI6ICJ2LTAxMmM2NDgzIiwKICAgICJwYXRoIjogIi9hbGdvcml0aG0vIiwKICAgICJsYXN0VXBkYXRlZCI6ICI1LzI1LzIwMjMsIDQ6NTE6MDkgUE0iLAogICAgImxhc3RVcGRhdGVkVGltZXN0YW1wIjogMTY4NTAwNDY2OTAwMCwKICAgICJoZWFkZXJzU3RyIjogbnVsbCwKICAgICJjb250ZW50IjogIiIsCiAgICAibm9ybWFsaXplZENvbnRlbnQiOiAiIiwKICAgICJjaGFyc2V0cyI6IHt9CiAgfSwgewogICAgInRpdGxlIjogIueul+azlSIsCiAgICAiZnJvbnRtYXR0ZXIiOiB7CiAgICAgICJwYWdlQ29tcG9uZW50IjogewogICAgICAgICJuYW1lIjogIkNhdGFsb2d1ZSIsCiAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAia2V5IjogIjAzLkNQUCIsCiAgICAgICAgICAiaW1nVXJsIjogIi9hc3NldHMvaW1nL2NwcC5wbmciLAogICAgICAgICAgImRlc2NyaXB0aW9uIjogIuivr+WMuuWSjOe7huiKgueahOiusOW9lSIKICAgICAgICB9CiAgICAgIH0sCiAgICAgICJ0aXRsZSI6ICLnrpfms5UiLAogICAgICAiZGF0ZSI6ICIyMDIzLTA2LTAxIDE3OjQ2IiwKICAgICAgInBlcm1hbGluayI6ICIvY3BwLyIsCiAgICAgICJzaWRlYmFyIjogZmFsc2UsCiAgICAgICJhcnRpY2xlIjogZmFsc2UsCiAgICAgICJjb21tZW50IjogZmFsc2UsCiAgICAgICJjb21tZW50cyI6IGZhbHNlLAogICAgICAiZWRpdExpbmsiOiBmYWxzZQogICAgfSwKICAgICJyZWd1bGFyUGF0aCI6ICIvMDMuQ1BQLyIsCiAgICAicmVsYXRpdmVQYXRoIjogIjAzLkNQUC9pbmRleC5tZCIsCiAgICAia2V5IjogInYtM2UxOGRjZTUiLAogICAgInBhdGgiOiAiL2NwcC8iLAogICAgImxhc3RVcGRhdGVkIjogIjYvMS8yMDIzLCA2OjAzOjQ4IFBNIiwKICAgICJsYXN0VXBkYXRlZFRpbWVzdGFtcCI6IDE2ODU2MTM4MjgwMDAsCiAgICAiaGVhZGVyc1N0ciI6IG51bGwsCiAgICAiY29udGVudCI6ICIiLAogICAgIm5vcm1hbGl6ZWRDb250ZW50IjogIiIsCiAgICAiY2hhcnNldHMiOiB7fQogIH0sIHsKICAgICJ0aXRsZSI6ICJEYXkxMS3moIjkuI7pmJ/liJciLAogICAgImZyb250bWF0dGVyIjogewogICAgICAidGl0bGUiOiAiRGF5MTEt5qCI5LiO6Zif5YiXIiwKICAgICAgImRhdGUiOiAiMjAyMy0wNi0wNVQxNjowMTowMy4wMDBaIiwKICAgICAgInBlcm1hbGluayI6ICIvcGFnZXMvOWYxZWQ3LyIsCiAgICAgICJjYXRlZ29yaWVzIjogWyLnrpfms5UiLCAi566X5rOV5omT5Y2hIl0sCiAgICAgICJ0YWdzIjogWyLmiZPljaEiXQogICAgfSwKICAgICJyZWd1bGFyUGF0aCI6ICIvMDIuJUU3JUFFJTk3JUU2JUIzJTk1LzAxLiVFNyVBRSU5NyVFNiVCMyU5NSVFNiU4OSU5MyVFNSU4RCVBMS8xMS5EYXkxMS0lRTYlQTAlODglRTQlQjglOEUlRTklOTglOUYlRTUlODglOTcuaHRtbCIsCiAgICAicmVsYXRpdmVQYXRoIjogIjAyLueul+azlS8wMS7nrpfms5XmiZPljaEvMTEuRGF5MTEt5qCI5LiO6Zif5YiXLm1kIiwKICAgICJrZXkiOiAidi1lYTc0MjcwNiIsCiAgICAicGF0aCI6ICIvcGFnZXMvOWYxZWQ3LyIsCiAgICAiZXhjZXJwdCI6ICI8YmxvY2txdW90ZT5cbjxwPjIzOS4g5ruR5Yqo56qX5Y+j5pyA5aSn5YC844CBIDM0Ny4g5YmNIEsg5Liq6auY6aKR5YWD57Sg44CB5oC757uTPC9wPlxuPC9ibG9ja3F1b3RlPlxuIiwKICAgICJoZWFkZXJzU3RyIjogbnVsbCwKICAgICJjb250ZW50IjogIj4gMjM5LiDmu5Hliqjnqpflj6PmnIDlpKflgLzjgIEgMzQ3LiDliY0gSyDkuKrpq5jpopHlhYPntKDjgIHmgLvnu5MiLAogICAgIm5vcm1hbGl6ZWRDb250ZW50IjogIj4gMjM5LiDmu5Hliqjnqpflj6PmnIDlpKflgLzjgIEgMzQ3LiDliY0gayDkuKrpq5jpopHlhYPntKDjgIHmgLvnu5MiLAogICAgImNoYXJzZXRzIjogewogICAgICAiY2prIjogdHJ1ZQogICAgfQogIH0sIHsKICAgICJ0aXRsZSI6ICLlrZfnrKbkuLLkuI7lrZfnrKbliJ3lp4vljJblj4rovazmjaIiLAogICAgImZyb250bWF0dGVyIjogewogICAgICAidGl0bGUiOiAi5a2X56ym5Liy5LiO5a2X56ym5Yid5aeL5YyW5Y+K6L2s5o2iIiwKICAgICAgImRhdGUiOiAiMjAyMy0wNi0wMVQxNzo0OTozNS4wMDBaIiwKICAgICAgInBlcm1hbGluayI6ICIvcGFnZXMvY2YwN2MzLyIsCiAgICAgICJjYXRlZ29yaWVzIjogWyJDUFAiLCAi6K+v5Yy65oC757uTIl0sCiAgICAgICJ0YWdzIjogWyJDUFAt6K+v5Yy6Il0KICAgIH0sCiAgICAicmVndWxhclBhdGgiOiAiLzAzLkNQUC8wMS4lRTglQUYlQUYlRTUlOEMlQkElRTYlODAlQkIlRTclQkIlOTMvMDEuJUU1JUFEJTk3JUU3JUFDJUE2JUU0JUI4JUIyJUU0JUI4JThFJUU1JUFEJTk3JUU3JUFDJUE2JUU1JTg4JTlEJUU1JUE3JThCJUU1JThDJTk2JUU1JThGJThBJUU4JUJEJUFDJUU2JThEJUEyLmh0bWwiLAogICAgInJlbGF0aXZlUGF0aCI6ICIwMy5DUFAvMDEu6K+v5Yy65oC757uTLzAxLuWtl+espuS4suS4juWtl+espuWIneWni+WMluWPiui9rOaNoi5tZCIsCiAgICAia2V5IjogInYtNjEyYWNhNzAiLAogICAgInBhdGgiOiAiL3BhZ2VzL2NmMDdjMy8iLAogICAgImhlYWRlcnMiOiBbewogICAgICAibGV2ZWwiOiAyLAogICAgICAidGl0bGUiOiAiY2hhciog5ZKMIGNoYXJbXSDnmoTliJ3lp4vljJbvvJoiLAogICAgICAic2x1ZyI6ICJjaGFyLeWSjC1jaGFyLeeahOWIneWni+WMliIsCiAgICAgICJub3JtYWxpemVkVGl0bGUiOiAiY2hhciog5ZKMIGNoYXIgW10g55qE5Yid5aeL5YyW77yaIiwKICAgICAgImNoYXJJbmRleCI6IDQ3CiAgICB9XSwKICAgICJleGNlcnB0IjogIjxkaXYgY2xhc3M9XCJjdXN0b20tYmxvY2sgdGlwXCI+PHAgY2xhc3M9XCJjdXN0b20tYmxvY2stdGl0bGVcIj7mj5DnpLo8L3A+XG48cD7lhbPkuo4gY2hhcirjgIFjaGFyIFtdIOS4jiBzdHJpbmcg55qE5Yid5aeL5YyW5Y+K6L2s5o2iPGJyPlxuPGEgaHJlZj1cImh0dHBzOi8vemh1YW5sYW4uemhpaHUuY29tL3AvMTEwMzc0MTgyXCIgdGFyZ2V0PVwiX2JsYW5rXCIgcmVsPVwibm9vcGVuZXIgbm9yZWZlcnJlclwiPuWPguiAg+aWh+eroDxPdXRib3VuZExpbmsvPjwvYT48L3A+XG48L2Rpdj5cbiIsCiAgICAibGFzdFVwZGF0ZWQiOiAiNi8xLzIwMjMsIDg6MzA6MTYgUE0iLAogICAgImxhc3RVcGRhdGVkVGltZXN0YW1wIjogMTY4NTYyMjYxNjAwMCwKICAgICJoZWFkZXJzU3RyIjogImNoYXIqIOWSjCBjaGFyW10g55qE5Yid5aeL5YyW77yaIiwKICAgICJjb250ZW50IjogIuaPkOekulxuXG7lhbPkuo4gY2hhcirjgIFjaGFyIFtdIOS4jiBzdHJpbmcg55qE5Yid5aeL5YyW5Y+K6L2s5o2iXG7lj4LogIPmlofnq6BcblxuXG4jIGNoYXIqIOWSjCBjaGFyIFtdIOeahOWIneWni+WMlu+8mlxuXG5jaGFyKiDmmK/mjIflkJHlrZfnrKbnmoTmjIfpkojvvIzlj6/ku6XpgJrov4fmjIfpkojotYvlgLzmiJbkvb/nlKjlrZfnrKbkuLLlrZfpnaLlgLzmnaXliJ3lp4vljJbjgIJcbmNoYXIgW10g5piv5a2X56ym5pWw57uE77yM5Y+v5Lul6YCa6L+H5a2X56ym5Liy5a2X6Z2i5YC85oiW6YCQ5Liq5a2X56ym6LWL5YC85p2l5Yid5aeL5YyW44CCXG7npLrkvovvvJpcblxuY3BwXG5Db3B5IGNvZGVcbmNoYXIqIHB0ciA9IFwiSGVsbG9cIjsgLy8g5L2/55So5a2X56ym5Liy5a2X6Z2i5YC85Yid5aeL5YyWIGNoYXIqXG5jaGFyIGFyciBbXSA9IFwiV29ybGRcIjsgLy8g5L2/55So5a2X56ym5Liy5a2X6Z2i5YC85Yid5aeL5YyWIGNoYXIgW11cbnN0cmluZyDlkowgY2hhciog5oiWIGNoYXIgW10g55qE6L2s5o2i77yaXG5cbnN0cmluZyDlj6/ku6XpgJrov4fmnoTpgKDlh73mlbDmiJbotYvlgLzov5DnrpfnrKblsIYgY2hhciog5oiWIGNoYXIgW10g6L2s5o2i5Li6IHN0cmluZ+OAglxuY2hhciog5oiWIGNoYXIgW10g5Y+v5Lul5L2/55SoIGNfc3RyICgpIOaWueazleWwhuWFtui9rOaNouS4uiBjb25zdCBjaGFyKu+8jOS7peS+v+S4juaOpeWPlyBDIOmjjuagvOWtl+espuS4sueahOWHveaVsOWFvOWuueOAglxu56S65L6L77yaXG5cbmNwcFxuQ29weSBjb2RlXG5zdHJpbmcgc3RyID0gXCJIZWxsb1wiOyAvLyDkvb/nlKjlrZfnrKbkuLLlrZfpnaLlgLzliJ3lp4vljJYgc3RyaW5nXG5jb25zdCBjaGFyKiBjc3RyID0gc3RyLmNfc3RyICgpOyAvLyDovazmjaLkuLogY29uc3QgY2hhcipcblxuc3RyaW5nIG5ld1N0ciA9IFwiV29ybGRcIjtcbmNvbnN0IGNoYXIqIG5ld0NzdHIgPSBuZXdTdHIuY19zdHIgKCk7IC8vIOi9rOaNouS4uiBjb25zdCBjaGFyKlxuXG5jaGFyIGFycltdID0gXCJIZWxsb1wiO1xuc3RyaW5nIGFyclN0ciAoYXJyKTsgLy8g5bCG5a2X56ym5pWw57uE6L2s5o2i5Li6IHN0cmluZ1xuXG5jaGFyKiBwdHIgPSBuZXcgY2hhclsxMF07XG5zdHJjcHkocHRyLCBcIldvcmxkXCIpO1xuc3RyaW5nIHB0clN0ciAocHRyKTsgLy8g5bCG5a2X56ym5oyH6ZKI6L2s5o2i5Li6IHN0cmluZ1xuXG5kZWxldGUgW10gcHRyOyAvLyDph4rmlL7lhoXlrZhcbuazqOaEj+Wtl+espuS4sueahOe7k+adn+espu+8mlxuXG5jaGFyIFtdIOW/hemhu+WMheWQq+Wtl+espuS4sue7k+adn+espiAnXFwwJ++8jOWQpuWImeS8muWvvOiHtOWtl+espuS4suaTjeS9nOWHveaVsOaXoOazleato+W4uOW3peS9nOOAglxuc3RyaW5nIOexu+Wei+S8muiHquWKqOWkhOeQhuWtl+espuS4sue7k+adn+espu+8jOS4jemcgOimgeaJi+WKqOa3u+WKoOOAglxu56S65L6L77yaXG5cbmNwcFxuQ29weSBjb2RlXG5jaGFyIGFyciBbXSA9IFwiSGVsbG9cIjsgLy8g5YyF5ZCrICdcXDAnXG5jaGFyIGFycjIgW10gPSB7J0gnLCAnZScsICdsJywgJ2wnLCAnbyd9OyAvLyDkuI3ljIXlkKsgJ1xcMCdcblxuc3RyaW5nIHN0ciA9IFwiV29ybGRcIjsgLy8g6Ieq5Yqo5re75YqgICdcXDAnXG7pnIDopoHms6jmhI/nmoTmmK/vvIzlnKjkvb/nlKggY2hhciog5ZKMIGNoYXIgW10g5pe277yM6KaB56Gu5L+d5q2j56Gu5aSE55CG5YaF5a2Y5YiG6YWN5ZKM6YeK5pS+77yM5Lul6YG/5YWN5Ye6546w5YaF5a2Y5rOE5ryP5oiW6K6/6Zeu6Z2e5rOV5YaF5a2Y55qE6Zeu6aKY44CC5Y+m5aSW77yM5b2T6L2s5o2i5Li6IHN0cmluZyDml7bvvIzopoHnoa7kv53ljp/lp4vlrZfnrKbmlbDnu4TmiJbmjIfpkojmiYDmjIflkJHnmoTlhoXlrrnmmK/mnInmlYjnmoTvvIzlkKbliJnlj6/og73lr7zoh7TmnKrlrprkuYnooYzkuLrjgIIiLAogICAgIm5vcm1hbGl6ZWRDb250ZW50IjogIuaPkOekulxuXG7lhbPkuo4gY2hhcirjgIFjaGFyIFtdIOS4jiBzdHJpbmcg55qE5Yid5aeL5YyW5Y+K6L2s5o2iXG7lj4LogIPmlofnq6BcblxuXG4jIGNoYXIqIOWSjCBjaGFyIFtdIOeahOWIneWni+WMlu+8mlxuXG5jaGFyKiDmmK/mjIflkJHlrZfnrKbnmoTmjIfpkojvvIzlj6/ku6XpgJrov4fmjIfpkojotYvlgLzmiJbkvb/nlKjlrZfnrKbkuLLlrZfpnaLlgLzmnaXliJ3lp4vljJbjgIJcbmNoYXIgW10g5piv5a2X56ym5pWw57uE77yM5Y+v5Lul6YCa6L+H5a2X56ym5Liy5a2X6Z2i5YC85oiW6YCQ5Liq5a2X56ym6LWL5YC85p2l5Yid5aeL5YyW44CCXG7npLrkvovvvJpcblxuY3BwXG5jb3B5IGNvZGVcbmNoYXIqIHB0ciA9IFwiaGVsbG9cIjsgLy8g5L2/55So5a2X56ym5Liy5a2X6Z2i5YC85Yid5aeL5YyWIGNoYXIqXG5jaGFyIGFyciBbXSA9IFwid29ybGRcIjsgLy8g5L2/55So5a2X56ym5Liy5a2X6Z2i5YC85Yid5aeL5YyWIGNoYXIgW11cbnN0cmluZyDlkowgY2hhciog5oiWIGNoYXIgW10g55qE6L2s5o2i77yaXG5cbnN0cmluZyDlj6/ku6XpgJrov4fmnoTpgKDlh73mlbDmiJbotYvlgLzov5DnrpfnrKblsIYgY2hhciog5oiWIGNoYXIgW10g6L2s5o2i5Li6IHN0cmluZ+OAglxuY2hhciog5oiWIGNoYXIgW10g5Y+v5Lul5L2/55SoIGNfc3RyICgpIOaWueazleWwhuWFtui9rOaNouS4uiBjb25zdCBjaGFyKu+8jOS7peS+v+S4juaOpeWPlyBjIOmjjuagvOWtl+espuS4sueahOWHveaVsOWFvOWuueOAglxu56S65L6L77yaXG5cbmNwcFxuY29weSBjb2RlXG5zdHJpbmcgc3RyID0gXCJoZWxsb1wiOyAvLyDkvb/nlKjlrZfnrKbkuLLlrZfpnaLlgLzliJ3lp4vljJYgc3RyaW5nXG5jb25zdCBjaGFyKiBjc3RyID0gc3RyLmNfc3RyICgpOyAvLyDovazmjaLkuLogY29uc3QgY2hhcipcblxuc3RyaW5nIG5ld3N0ciA9IFwid29ybGRcIjtcbmNvbnN0IGNoYXIqIG5ld2NzdHIgPSBuZXdzdHIuY19zdHIgKCk7IC8vIOi9rOaNouS4uiBjb25zdCBjaGFyKlxuXG5jaGFyIGFycltdID0gXCJoZWxsb1wiO1xuc3RyaW5nIGFycnN0ciAoYXJyKTsgLy8g5bCG5a2X56ym5pWw57uE6L2s5o2i5Li6IHN0cmluZ1xuXG5jaGFyKiBwdHIgPSBuZXcgY2hhclsxMF07XG5zdHJjcHkocHRyLCBcIndvcmxkXCIpO1xuc3RyaW5nIHB0cnN0ciAocHRyKTsgLy8g5bCG5a2X56ym5oyH6ZKI6L2s5o2i5Li6IHN0cmluZ1xuXG5kZWxldGUgW10gcHRyOyAvLyDph4rmlL7lhoXlrZhcbuazqOaEj+Wtl+espuS4sueahOe7k+adn+espu+8mlxuXG5jaGFyIFtdIOW/hemhu+WMheWQq+Wtl+espuS4sue7k+adn+espiAnXFwwJ++8jOWQpuWImeS8muWvvOiHtOWtl+espuS4suaTjeS9nOWHveaVsOaXoOazleato+W4uOW3peS9nOOAglxuc3RyaW5nIOexu+Wei+S8muiHquWKqOWkhOeQhuWtl+espuS4sue7k+adn+espu+8jOS4jemcgOimgeaJi+WKqOa3u+WKoOOAglxu56S65L6L77yaXG5cbmNwcFxuY29weSBjb2RlXG5jaGFyIGFyciBbXSA9IFwiaGVsbG9cIjsgLy8g5YyF5ZCrICdcXDAnXG5jaGFyIGFycjIgW10gPSB7J2gnLCAnZScsICdsJywgJ2wnLCAnbyd9OyAvLyDkuI3ljIXlkKsgJ1xcMCdcblxuc3RyaW5nIHN0ciA9IFwid29ybGRcIjsgLy8g6Ieq5Yqo5re75YqgICdcXDAnXG7pnIDopoHms6jmhI/nmoTmmK/vvIzlnKjkvb/nlKggY2hhciog5ZKMIGNoYXIgW10g5pe277yM6KaB56Gu5L+d5q2j56Gu5aSE55CG5YaF5a2Y5YiG6YWN5ZKM6YeK5pS+77yM5Lul6YG/5YWN5Ye6546w5YaF5a2Y5rOE5ryP5oiW6K6/6Zeu6Z2e5rOV5YaF5a2Y55qE6Zeu6aKY44CC5Y+m5aSW77yM5b2T6L2s5o2i5Li6IHN0cmluZyDml7bvvIzopoHnoa7kv53ljp/lp4vlrZfnrKbmlbDnu4TmiJbmjIfpkojmiYDmjIflkJHnmoTlhoXlrrnmmK/mnInmlYjnmoTvvIzlkKbliJnlj6/og73lr7zoh7TmnKrlrprkuYnooYzkuLrjgIIiLAogICAgImNoYXJzZXRzIjogewogICAgICAiY2prIjogdHJ1ZQogICAgfQogIH0sIHsKICAgICJ0aXRsZSI6ICLlvZLmoaMiLAogICAgImZyb250bWF0dGVyIjogewogICAgICAiYXJjaGl2ZXNQYWdlIjogdHJ1ZSwKICAgICAgInRpdGxlIjogIuW9kuahoyIsCiAgICAgICJwZXJtYWxpbmsiOiAiL2FyY2hpdmVzLyIsCiAgICAgICJhcnRpY2xlIjogZmFsc2UKICAgIH0sCiAgICAicmVndWxhclBhdGgiOiAiL0BwYWdlcy9hcmNoaXZlc1BhZ2UuaHRtbCIsCiAgICAicmVsYXRpdmVQYXRoIjogIkBwYWdlcy9hcmNoaXZlc1BhZ2UubWQiLAogICAgImtleSI6ICJ2LTdjYmI3OTU2IiwKICAgICJwYXRoIjogIi9hcmNoaXZlcy8iLAogICAgImxhc3RVcGRhdGVkIjogIjEvMTIvMjAyMywgMTI6MTA6MjYgUE0iLAogICAgImxhc3RVcGRhdGVkVGltZXN0YW1wIjogMTY3MzQ5NjYyNjAwMCwKICAgICJoZWFkZXJzU3RyIjogbnVsbCwKICAgICJjb250ZW50IjogIiIsCiAgICAibm9ybWFsaXplZENvbnRlbnQiOiAiIiwKICAgICJjaGFyc2V0cyI6IHt9CiAgfSwgewogICAgInRpdGxlIjogIuWIhuexuyIsCiAgICAiZnJvbnRtYXR0ZXIiOiB7CiAgICAgICJjYXRlZ29yaWVzUGFnZSI6IHRydWUsCiAgICAgICJ0aXRsZSI6ICLliIbnsbsiLAogICAgICAicGVybWFsaW5rIjogIi9jYXRlZ29yaWVzLyIsCiAgICAgICJhcnRpY2xlIjogZmFsc2UKICAgIH0sCiAgICAicmVndWxhclBhdGgiOiAiL0BwYWdlcy9jYXRlZ29yaWVzUGFnZS5odG1sIiwKICAgICJyZWxhdGl2ZVBhdGgiOiAiQHBhZ2VzL2NhdGVnb3JpZXNQYWdlLm1kIiwKICAgICJrZXkiOiAidi03Y2RiYjc5NCIsCiAgICAicGF0aCI6ICIvY2F0ZWdvcmllcy8iLAogICAgImxhc3RVcGRhdGVkIjogIjEvMTIvMjAyMywgMTI6MTA6MjYgUE0iLAogICAgImxhc3RVcGRhdGVkVGltZXN0YW1wIjogMTY3MzQ5NjYyNjAwMCwKICAgICJoZWFkZXJzU3RyIjogbnVsbCwKICAgICJjb250ZW50IjogIiIsCiAgICAibm9ybWFsaXplZENvbnRlbnQiOiAiIiwKICAgICJjaGFyc2V0cyI6IHt9CiAgfSwgewogICAgInRpdGxlIjogIkhvbWUiLAogICAgImZyb250bWF0dGVyIjogewogICAgICAiaG9tZSI6IHRydWUsCiAgICAgICJoZXJvVGV4dCI6ICJMaWRvJ3MgQmxvZyIsCiAgICAgICJ0YWdsaW5lIjogIuiusOW9leOAgeWIhuS6qyIsCiAgICAgICJiYW5uZXJCZyI6ICJub25lIiwKICAgICAgInBvc3RMaXN0IjogImRldGFpbGVkIgogICAgfSwKICAgICJyZWd1bGFyUGF0aCI6ICIvIiwKICAgICJyZWxhdGl2ZVBhdGgiOiAiaW5kZXgubWQiLAogICAgImtleSI6ICJ2LWVkNTY4OTdjIiwKICAgICJwYXRoIjogIi8iLAogICAgImxhc3RVcGRhdGVkIjogIjIvMi8yMDIzLCAxMTo0MTozNiBQTSIsCiAgICAibGFzdFVwZGF0ZWRUaW1lc3RhbXAiOiAxNjc1MzUyNDk2MDAwLAogICAgImhlYWRlcnNTdHIiOiBudWxsLAogICAgImNvbnRlbnQiOiAiIiwKICAgICJub3JtYWxpemVkQ29udGVudCI6ICIiLAogICAgImNoYXJzZXRzIjoge30KICB9LCB7CiAgICAidGl0bGUiOiAi5qCH562+IiwKICAgICJmcm9udG1hdHRlciI6IHsKICAgICAgInRhZ3NQYWdlIjogdHJ1ZSwKICAgICAgInRpdGxlIjogIuagh+etviIsCiAgICAgICJwZXJtYWxpbmsiOiAiL3RhZ3MvIiwKICAgICAgImFydGljbGUiOiBmYWxzZQogICAgfSwKICAgICJyZWd1bGFyUGF0aCI6ICIvQHBhZ2VzL3RhZ3NQYWdlLmh0bWwiLAogICAgInJlbGF0aXZlUGF0aCI6ICJAcGFnZXMvdGFnc1BhZ2UubWQiLAogICAgImtleSI6ICJ2LWJkMWY4MDU0IiwKICAgICJwYXRoIjogIi90YWdzLyIsCiAgICAibGFzdFVwZGF0ZWQiOiAiMS8xMi8yMDIzLCAxMjoxMDoyNiBQTSIsCiAgICAibGFzdFVwZGF0ZWRUaW1lc3RhbXAiOiAxNjczNDk2NjI2MDAwLAogICAgImhlYWRlcnNTdHIiOiBudWxsLAogICAgImNvbnRlbnQiOiAiIiwKICAgICJub3JtYWxpemVkQ29udGVudCI6ICIiLAogICAgImNoYXJzZXRzIjoge30KICB9XSwKICAidGhlbWVDb25maWciOiB7CiAgICAibmF2IjogW3sKICAgICAgInRleHQiOiAiSG9tZSIsCiAgICAgICJsaW5rIjogIi8iCiAgICB9LCB7CiAgICAgICJ0ZXh0IjogIkdvbGFuZyIsCiAgICAgICJsaW5rIjogIi9nby8iLAogICAgICAiaXRlbXMiOiBbewogICAgICAgICJ0ZXh0IjogIuahhuaetiIsCiAgICAgICAgIml0ZW1zIjogW3sKICAgICAgICAgICJ0ZXh0IjogIkdpbiIsCiAgICAgICAgICAibGluayI6ICIvcGFnZXMvM2UxNGNhLyIKICAgICAgICB9XQogICAgICB9LCB7CiAgICAgICAgInRleHQiOiAi5bCP5bel5YW3IiwKICAgICAgICAiaXRlbXMiOiBbewogICAgICAgICAgInRleHQiOiAi5paH5Lu25Lyg6L6T77yI5bGA5Z+f572R77yJIiwKICAgICAgICAgICJsaW5rIjogIi9wYWdlcy8yNzM1MWYvIgogICAgICAgIH0sIHsKICAgICAgICAgICJ0ZXh0IjogIuiHquWKqOaPkOS6pEdpdGh1YiIsCiAgICAgICAgICAibGluayI6ICIvcGFnZXMvMjczNTJmLyIKICAgICAgICB9XQogICAgICB9LCB7CiAgICAgICAgInRleHQiOiAi5rex5YWlR28iLAogICAgICAgICJpdGVtcyI6IFt7CiAgICAgICAgICAidGV4dCI6ICIwMS5zdHJpbmfnsbvlnosiLAogICAgICAgICAgImxpbmsiOiAiL3BhZ2VzL2I2YmE2Ny8iCiAgICAgICAgfSwgewogICAgICAgICAgInRleHQiOiAiMDIuc2xpY2XnsbvlnosiLAogICAgICAgICAgImxpbmsiOiAiL3BhZ2VzLzViNDJmNy8iCiAgICAgICAgfSwgewogICAgICAgICAgInRleHQiOiAiMDMu57uT5p6E5L2T5ZKM5YaF5a2Y5a+56b2QIiwKICAgICAgICAgICJsaW5rIjogIi9wYWdlcy8yMGQyMzQvIgogICAgICAgIH1dCiAgICAgIH1dCiAgICB9LCB7CiAgICAgICJ0ZXh0IjogIkNQUCIsCiAgICAgICJsaW5rIjogIi9jcHAvIiwKICAgICAgIml0ZW1zIjogW3sKICAgICAgICAidGV4dCI6ICLor6/ljLrmgLvnu5MiLAogICAgICAgICJpdGVtcyI6IFt7CiAgICAgICAgICAidGV4dCI6ICLlrZfnrKbkuLLkuI7lrZfnrKbliJ3lp4vljJblj4rovazmjaIiLAogICAgICAgICAgImxpbmsiOiAiL3BhZ2VzL2NmMDdjMy8iCiAgICAgICAgfV0KICAgICAgfV0KICAgIH0sIHsKICAgICAgInRleHQiOiAi566X5rOVIiwKICAgICAgImxpbmsiOiAiL2FsZ29yaXRobS8iLAogICAgICAiaXRlbXMiOiBbewogICAgICAgICJ0ZXh0IjogIueul+azleaJk+WNoSIsCiAgICAgICAgIml0ZW1zIjogW3sKICAgICAgICAgICJ0ZXh0IjogIkRheTA5LeagiOS4jumYn+WIlyIsCiAgICAgICAgICAibGluayI6ICIvcGFnZXMvNWI5MWZhLyIKICAgICAgICB9LCB7CiAgICAgICAgICAidGV4dCI6ICJEYXkxMC3moIjkuI7pmJ/liJciLAogICAgICAgICAgImxpbmsiOiAiL3BhZ2VzLzUxZTAzNi8iCiAgICAgICAgfSwgewogICAgICAgICAgInRleHQiOiAiRGF5MTEt5qCI5LiO6Zif5YiXIiwKICAgICAgICAgICJsaW5rIjogIi9wYWdlcy85ZjFlZDcvIgogICAgICAgIH1dCiAgICAgIH0sIHsKICAgICAgICAidGV4dCI6ICLnu4/lhbjnrpfms5UiLAogICAgICAgICJpdGVtcyI6IFt7CiAgICAgICAgICAidGV4dCI6ICLlrZfnrKYiLAogICAgICAgICAgImxpbmsiOiAiL3BhZ2VzL2QxZGM0YS8iCiAgICAgICAgfV0KICAgICAgfV0KICAgIH0sIHsKICAgICAgInRleHQiOiAi5b2S5qGjIiwKICAgICAgImxpbmsiOiAiL2FyY2hpdmVzLyIKICAgIH1dLAogICAgInNpZGViYXJEZXB0aCI6IDIsCiAgICAibG9nbyI6ICIvYXNzZXRzL2ltZy9sb2dvLnBuZyIsCiAgICAicmVwbyI6ICJaaHVIUi01NyIsCiAgICAic2VhcmNoTWF4U3VnZ2VzdGlvbnMiOiA3LAogICAgImxhc3RVcGRhdGVkIjogIuS4iuasoeabtOaWsCIsCiAgICAiZG9jc0RpciI6ICJkb2NzIiwKICAgICJlZGl0TGlua3MiOiBmYWxzZSwKICAgICJlZGl0TGlua1RleHQiOiAi57yW6L6RIiwKICAgICJjYXRlZ29yeSI6IHRydWUsCiAgICAidGFnIjogdHJ1ZSwKICAgICJhcmNoaXZlIjogdHJ1ZSwKICAgICJzaWRlYmFyT3BlbiI6IHRydWUsCiAgICAic2lkZWJhciI6IHsKICAgICAgIi8wMS5Hby8iOiBbewogICAgICAgICJ0aXRsZSI6ICLmoYbmnrYiLAogICAgICAgICJjb2xsYXBzYWJsZSI6IHRydWUsCiAgICAgICAgImNoaWxkcmVuIjogW3sKICAgICAgICAgICJ0aXRsZSI6ICJHaW4iLAogICAgICAgICAgImNvbGxhcHNhYmxlIjogdHJ1ZSwKICAgICAgICAgICJjaGlsZHJlbiI6IFtbIjAxLuahhuaeti8wMS5HaW4vMDEu6ISa5omL5p62Lm1kIiwgIuiEmuaJi+aetiIsICIvcGFnZXMvM2UxNGNhLyJdXQogICAgICAgIH1dCiAgICAgIH0sIHsKICAgICAgICAidGl0bGUiOiAidG9vbHMiLAogICAgICAgICJjb2xsYXBzYWJsZSI6IHRydWUsCiAgICAgICAgImNoaWxkcmVuIjogW1siMDIudG9vbHMvMDEu5paH5Lu25Lyg6L6T77yI5bGA5Z+f572R77yJLm1kIiwgIuaWh+S7tuS8oOi+k++8iOWxgOWfn+e9ke+8iSIsICIvcGFnZXMvMjczNTFmLyJdLCBbIjAyLnRvb2xzLzAyLuiHquWKqOaPkOS6pEdpdGh1Yi5tZCIsICLoh6rliqjmj5DkuqRHaXRodWIiLCAiL3BhZ2VzLzI3MzUyZi8iXV0KICAgICAgfSwgewogICAgICAgICJ0aXRsZSI6ICLmt7HlhaVHbyIsCiAgICAgICAgImNvbGxhcHNhYmxlIjogdHJ1ZSwKICAgICAgICAiY2hpbGRyZW4iOiBbWyIwMy7mt7HlhaVHby8wMS5zdHJpbmfnsbvlnosubWQiLCAic3RyaW5n57G75Z6LIiwgIi9wYWdlcy9iNmJhNjcvIl0sIFsiMDMu5rex5YWlR28vMDIuc2xpY2XnsbvlnosubWQiLCAic2xpY2XnsbvlnosiLCAiL3BhZ2VzLzViNDJmNy8iXSwgWyIwMy7mt7HlhaVHby8wMy7nu5PmnoTkvZPlkozlhoXlrZjlr7npvZAubWQiLCAi57uT5p6E5L2T5ZKM5YaF5a2Y5a+56b2QIiwgIi9wYWdlcy8yMGQyMzQvIl1dCiAgICAgIH1dLAogICAgICAiY2F0YWxvZ3VlIjoge30sCiAgICAgICIvMDIu566X5rOVLyI6IFt7CiAgICAgICAgInRpdGxlIjogIueul+azleaJk+WNoSIsCiAgICAgICAgImNvbGxhcHNhYmxlIjogdHJ1ZSwKICAgICAgICAiY2hpbGRyZW4iOiBbWyIwMS7nrpfms5XmiZPljaEvMDAuRGF5MDAt5YeG5aSHLm1kIiwgIkRheTAwLeWHhuWkhyIsICIvcGFnZXMvZmM4MGRkLyJdLCBbIjAxLueul+azleaJk+WNoS8wMS5EYXkwMS3mlbDnu4QubWQiLCAiRGF5MDEt5pWw57uEIiwgIi9wYWdlcy84YWFiN2IvIl0sIFsiMDEu566X5rOV5omT5Y2hLzAyLkRheTAyLeaVsOe7hC5tZCIsICJEYXkwMi3mlbDnu4QiLCAiL3BhZ2VzL2YyZDNhYS8iXSwgWyIwMS7nrpfms5XmiZPljaEvMDMuRGF5MDMt6ZO+6KGoLm1kIiwgIkRheTAzLemTvuihqCIsICIvcGFnZXMvMmM1MDA5LyJdLCBbIjAxLueul+azleaJk+WNoS8wNC5EYXkwNC3pk77ooagubWQiLCAiRGF5MDQt6ZO+6KGoIiwgIi9wYWdlcy8xMTVhZjcvIl0sIFsiMDEu566X5rOV5omT5Y2hLzA1LkRheTA1LeWTiOW4jC5tZCIsICJEYXkwNS3lk4jluIwiLCAiL3BhZ2VzLzMxMWI2Yi8iXSwgWyIwMS7nrpfms5XmiZPljaEvMDYuRGF5MDYt5ZOI5biMLm1kIiwgIkRheTA2LeWTiOW4jCIsICIvcGFnZXMvNWQ0YTJmLyJdLCBbIjAxLueul+azleaJk+WNoS8wNy5EYXkwNy3lrZfnrKbkuLIubWQiLCAiRGF5MDct5a2X56ym5LiyIiwgIi9wYWdlcy8yNmVhZjAvIl0sIFsiMDEu566X5rOV5omT5Y2hLzA4LkRheTA4LeWtl+espuS4si5tZCIsICJEYXkwOC3lrZfnrKbkuLIiLCAiL3BhZ2VzLzhlZjE3Yy8iXSwgWyIwMS7nrpfms5XmiZPljaEvMDkuRGF5MDkt5qCI5LiO6Zif5YiXLm1kIiwgIkRheTA5LeagiOS4jumYn+WIlyIsICIvcGFnZXMvNWI5MWZhLyJdLCBbIjAxLueul+azleaJk+WNoS8xMC5EYXkxMC3moIjkuI7pmJ/liJcubWQiLCAiRGF5MTAt5qCI5LiO6Zif5YiXIiwgIi9wYWdlcy81MWUwMzYvIl0sIFsiMDEu566X5rOV5omT5Y2hLzExLkRheTExLeagiOS4jumYn+WIly5tZCIsICJEYXkxMS3moIjkuI7pmJ/liJciLCAiL3BhZ2VzLzlmMWVkNy8iXV0KICAgICAgfSwgewogICAgICAgICJ0aXRsZSI6ICLnu4/lhbjnrpfms5UiLAogICAgICAgICJjb2xsYXBzYWJsZSI6IHRydWUsCiAgICAgICAgImNoaWxkcmVuIjogW1siMDIu57uP5YW4566X5rOVLzAxLuWtl+espuS4si5tZCIsICLlrZfnrKbkuLIiLCAiL3BhZ2VzL2QxZGM0YS8iXV0KICAgICAgfV0sCiAgICAgICIvMDMuQ1BQLyI6IFt7CiAgICAgICAgInRpdGxlIjogIuivr+WMuuaAu+e7kyIsCiAgICAgICAgImNvbGxhcHNhYmxlIjogdHJ1ZSwKICAgICAgICAiY2hpbGRyZW4iOiBbWyIwMS7or6/ljLrmgLvnu5MvMDEu5a2X56ym5Liy5LiO5a2X56ym5Yid5aeL5YyW5Y+K6L2s5o2iLm1kIiwgIuWtl+espuS4suS4juWtl+espuWIneWni+WMluWPiui9rOaNoiIsICIvcGFnZXMvY2YwN2MzLyJdXQogICAgICB9XQogICAgfSwKICAgICJ1cGRhdGVCYXIiOiB7CiAgICAgICJzaG93VG9BcnRpY2xlIjogZmFsc2UsCiAgICAgICJtb3JlQXJ0aWNsZSI6ICIvYXJjaGl2ZXMiCiAgICB9LAogICAgImF1dGhvciI6IHsKICAgICAgIm5hbWUiOiAiTGlkbyIsCiAgICAgICJsaW5rIjogImh0dHBzOi8vemh1aHItNTcuZ2l0aHViLmlvL2Jsb2cvIgogICAgfSwKICAgICJibG9nZ2VyIjogewogICAgICAiYXZhdGFyIjogImh0dHBzOi8vczMuYm1wLm92aC9pbWdzLzIwMjMvMDIvMDQvZmNlODFlNzMwMzg3MzhmMC5qcGciLAogICAgICAibmFtZSI6ICJMaWRvIiwKICAgICAgInNsb2dhbiI6ICLmhaLmhaLkuIDngrnkuIDngrnlgZrnmoTmm7Tlpb0iCiAgICB9LAogICAgInNvY2lhbCI6IHsKICAgICAgImljb25zIjogW3sKICAgICAgICAiaWNvbkNsYXNzIjogImljb24tZ2l0aHViIiwKICAgICAgICAidGl0bGUiOiAiR2l0SHViIiwKICAgICAgICAibGluayI6ICJodHRwczovL2dpdGh1Yi5jb20vWmh1SFItNTciCiAgICAgIH1dCiAgICB9LAogICAgImZvb3RlciI6IHsKICAgICAgImNyZWF0ZVllYXIiOiAyMDIyLAogICAgICAiY29weXJpZ2h0SW5mbyI6ICJcbiAgICAgIDxhIGhyZWY9J2h0dHBzOi8vZ2l0aHViLmNvbS9aaHVIUi01NycgdGFyZ2V0PSdfYmxhbmsnPkxpZG88L2E+XG4gICAgIgogICAgfQogIH0KfTs="},{"version":3,"sources":["F:/Blog/Blog_Home_New/node_modules/@vuepress/core/.temp/internal/siteData.js"],"names":["siteData"],"mappings":"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","sourcesContent":["/**\n * Generated by \"@vuepress/internal-site-data\"\n */\nexport const siteData = {\n  \"title\": \"Blog\",\n  \"description\": \"Hello Bugs!\",\n  \"base\": \"/blog/\",\n  \"headTags\": [\n    [\n      \"link\",\n      {\n        \"rel\": \"icon\",\n        \"href\": \"/blog/favicon.ico\"\n      }\n    ],\n    [\n      \"meta\",\n      {\n        \"name\": \"viewport\",\n        \"content\": \"width=device-width,initial-scale=1,user-scalable=no\"\n      }\n    ]\n  ],\n  \"pages\": [\n    {\n      \"title\": \"脚手架\",\n      \"frontmatter\": {\n        \"title\": \"脚手架\",\n        \"date\": \"2023-02-03T20:38:02.000Z\",\n        \"permalink\": \"/pages/3e14ca/\",\n        \"categories\": [\n          \"Go\",\n          \"框架\",\n          \"Gin\"\n        ],\n        \"tags\": [\n          \"go\"\n        ]\n      },\n      \"regularPath\": \"/01.Go/01.%E6%A1%86%E6%9E%B6/01.Gin/01.%E8%84%9A%E6%89%8B%E6%9E%B6.html\",\n      \"relativePath\": \"01.Go/01.框架/01.Gin/01.脚手架.md\",\n      \"key\": \"v-7be915d8\",\n      \"path\": \"/pages/3e14ca/\",\n      \"headers\": [\n        {\n          \"level\": 2,\n          \"title\": \"2\",\n          \"slug\": \"_2\",\n          \"normalizedTitle\": \"2\",\n          \"charIndex\": 58\n        }\n      ],\n      \"excerpt\": \"<div class=\\\"custom-block tip\\\"><p class=\\\"custom-block-title\\\">提示</p>\\n<p>Gin+Mysql+Redis+Viper+Zap+sals</p>\\n</div>\\n<p>Gin 项目的脚手架</p>\\n\",\n      \"lastUpdated\": \"2/4/2023, 9:33:04 AM\",\n      \"lastUpdatedTimestamp\": 1675474384000,\n      \"headersStr\": \"2\",\n      \"content\": \"提示\\n\\nGin+Mysql+Redis+Viper+Zap+sals\\n\\nGin 项目的脚手架\\n\\n\\n\\n# 1\\n\\n\\n# 2\",\n      \"normalizedContent\": \"提示\\n\\ngin+mysql+redis+viper+zap+sals\\n\\ngin 项目的脚手架\\n\\n\\n\\n# 1\\n\\n\\n# 2\",\n      \"charsets\": {\n        \"cjk\": true\n      }\n    },\n    {\n      \"title\": \"自动提交Github\",\n      \"frontmatter\": {\n        \"title\": \"自动提交Github\",\n        \"date\": \"2023-05-22T20:41:38.000Z\",\n        \"permalink\": \"/pages/27352f/\",\n        \"categories\": [\n          \"Go\",\n          \"tools\"\n        ],\n        \"tags\": [\n          \"go-tools\"\n        ]\n      },\n      \"regularPath\": \"/01.Go/02.tools/02.%E8%87%AA%E5%8A%A8%E6%8F%90%E4%BA%A4Github.html\",\n      \"relativePath\": \"01.Go/02.tools/02.自动提交Github.md\",\n      \"key\": \"v-0a0e56be\",\n      \"path\": \"/pages/27352f/\",\n      \"headers\": [\n        {\n          \"level\": 2,\n          \"title\": \"完整代码如下\",\n          \"slug\": \"完整代码如下\",\n          \"normalizedTitle\": \"完整代码如下\",\n          \"charIndex\": 30\n        },\n        {\n          \"level\": 3,\n          \"title\": \"文件\",\n          \"slug\": \"文件\",\n          \"normalizedTitle\": \"文件\",\n          \"charIndex\": 41\n        },\n        {\n          \"level\": 3,\n          \"title\": \"代码\",\n          \"slug\": \"代码\",\n          \"normalizedTitle\": \"代码\",\n          \"charIndex\": 32\n        },\n        {\n          \"level\": 2,\n          \"title\": \"编译（Windos）\",\n          \"slug\": \"编译-windos\",\n          \"normalizedTitle\": \"编译（windos）\",\n          \"charIndex\": 1160\n        },\n        {\n          \"level\": 2,\n          \"title\": \"任务计划\",\n          \"slug\": \"任务计划\",\n          \"normalizedTitle\": \"任务计划\",\n          \"charIndex\": 19\n        }\n      ],\n      \"excerpt\": \"<blockquote>\\n<p>Go build + Git + 任务计划程序</p>\\n</blockquote>\\n\",\n      \"lastUpdated\": \"5/22/2023, 8:42:57 PM\",\n      \"lastUpdatedTimestamp\": 1684759377000,\n      \"headersStr\": \"完整代码如下 文件 代码 编译（Windos） 任务计划\",\n      \"content\": \"> Go build + Git + 任务计划程序\\n\\n\\n# 完整代码如下\\n\\n\\n# 文件\\n\\n * main.go\\n\\n\\n# 代码\\n\\n/**\\n  @Go version: 1.17.6\\n  @project: Hello\\n  @ide: GoLand\\n  @file: main.go\\n  @author: Lido\\n  @time: 2023-05-22 20:08\\n  @description: 提交Github\\n*/\\npackage main\\n\\nimport (\\n\\t\\\"log\\\"\\n\\t\\\"os\\\"\\n\\t\\\"os/exec\\\"\\n)\\n\\n// 执行自动提交代码和推送到远程仓库\\nfunc commitAndPush() error {\\n\\t// 切换到项目目录\\n\\tprojectPath := \\\"F:/Blog/Blog_Home_New/\\\"\\n\\tif err := os.Chdir(projectPath); err != nil {\\n\\t\\treturn err\\n\\t}\\n\\n\\t// 创建 git add 命令\\n\\taddCmd := exec.Command(\\\"git\\\", \\\"add\\\", \\\".\\\")\\n\\n\\t// 执行 git add 命令\\n\\tif err := addCmd.Run(); err != nil {\\n\\t\\treturn err\\n\\t}\\n\\n\\t// 创建 git commit 命令\\n\\tcommitCmd := exec.Command(\\\"git\\\", \\\"commit\\\", \\\"-m\\\", \\\"Auto commit\\\")\\n\\n\\t// 执行 git commit 命令\\n\\tif err := commitCmd.Run(); err != nil {\\n\\t\\treturn err\\n\\t}\\n\\n\\t// 创建 git push 命令\\n\\tpushCmd := exec.Command(\\\"git\\\", \\\"push\\\",\\\"-u\\\",\\\"origin\\\",\\\"master\\\")\\n\\n\\t// 执行 git push 命令\\n\\tif err := pushCmd.Run(); err != nil {\\n\\t\\treturn err\\n\\t}\\n\\n\\treturn nil\\n}\\n\\nfunc main() {\\n\\tcommitAndPush()\\n\\n\\tlog.Println(\\\"Code committed and pushed to GitHub.\\\")\\n}\\n\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n\\n\\n\\n# 编译（Windos）\\n\\n提示\\n\\n其他系统编译在上一篇文中有提\\n\\ngo build filename.go \\n\\n\\n1\\n\\n\\n\\n# 任务计划\\n\\n 1. 打开任务计划程序。可以在开始菜单中搜索 \\\"任务计划程序\\\" 来找到它。\\n 2. 在任务计划程序中，点击 \\\"创建基本任务\\\"。\\n 3. 输入任务的名称和描述，然后点击 \\\"下一步\\\"。\\n 4. 选择触发器类型为 \\\"每周\\\"，并选择每周的周一。\\n 5. 选择操作类型为 \\\"启动程序\\\"。\\n 6. 在程序 / 脚本字段中，输入 Go 程序的可执行文件路径。\\n 7. 点击 \\\"完成\\\" 来创建计划任务。\",\n      \"normalizedContent\": \"> go build + git + 任务计划程序\\n\\n\\n# 完整代码如下\\n\\n\\n# 文件\\n\\n * main.go\\n\\n\\n# 代码\\n\\n/**\\n  @go version: 1.17.6\\n  @project: hello\\n  @ide: goland\\n  @file: main.go\\n  @author: lido\\n  @time: 2023-05-22 20:08\\n  @description: 提交github\\n*/\\npackage main\\n\\nimport (\\n\\t\\\"log\\\"\\n\\t\\\"os\\\"\\n\\t\\\"os/exec\\\"\\n)\\n\\n// 执行自动提交代码和推送到远程仓库\\nfunc commitandpush() error {\\n\\t// 切换到项目目录\\n\\tprojectpath := \\\"f:/blog/blog_home_new/\\\"\\n\\tif err := os.chdir(projectpath); err != nil {\\n\\t\\treturn err\\n\\t}\\n\\n\\t// 创建 git add 命令\\n\\taddcmd := exec.command(\\\"git\\\", \\\"add\\\", \\\".\\\")\\n\\n\\t// 执行 git add 命令\\n\\tif err := addcmd.run(); err != nil {\\n\\t\\treturn err\\n\\t}\\n\\n\\t// 创建 git commit 命令\\n\\tcommitcmd := exec.command(\\\"git\\\", \\\"commit\\\", \\\"-m\\\", \\\"auto commit\\\")\\n\\n\\t// 执行 git commit 命令\\n\\tif err := commitcmd.run(); err != nil {\\n\\t\\treturn err\\n\\t}\\n\\n\\t// 创建 git push 命令\\n\\tpushcmd := exec.command(\\\"git\\\", \\\"push\\\",\\\"-u\\\",\\\"origin\\\",\\\"master\\\")\\n\\n\\t// 执行 git push 命令\\n\\tif err := pushcmd.run(); err != nil {\\n\\t\\treturn err\\n\\t}\\n\\n\\treturn nil\\n}\\n\\nfunc main() {\\n\\tcommitandpush()\\n\\n\\tlog.println(\\\"code committed and pushed to github.\\\")\\n}\\n\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n\\n\\n\\n# 编译（windos）\\n\\n提示\\n\\n其他系统编译在上一篇文中有提\\n\\ngo build filename.go \\n\\n\\n1\\n\\n\\n\\n# 任务计划\\n\\n 1. 打开任务计划程序。可以在开始菜单中搜索 \\\"任务计划程序\\\" 来找到它。\\n 2. 在任务计划程序中，点击 \\\"创建基本任务\\\"。\\n 3. 输入任务的名称和描述，然后点击 \\\"下一步\\\"。\\n 4. 选择触发器类型为 \\\"每周\\\"，并选择每周的周一。\\n 5. 选择操作类型为 \\\"启动程序\\\"。\\n 6. 在程序 / 脚本字段中，输入 go 程序的可执行文件路径。\\n 7. 点击 \\\"完成\\\" 来创建计划任务。\",\n      \"charsets\": {\n        \"cjk\": true\n      }\n    },\n    {\n      \"title\": \"文件传输（局域网）\",\n      \"frontmatter\": {\n        \"title\": \"文件传输（局域网）\",\n        \"date\": \"2023-03-01T20:46:35.000Z\",\n        \"permalink\": \"/pages/27351f/\",\n        \"categories\": [\n          \"Go\",\n          \"tools\"\n        ],\n        \"tags\": [\n          \"go-tools\"\n        ]\n      },\n      \"regularPath\": \"/01.Go/02.tools/01.%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93%EF%BC%88%E5%B1%80%E5%9F%9F%E7%BD%91%EF%BC%89.html\",\n      \"relativePath\": \"01.Go/02.tools/01.文件传输（局域网）.md\",\n      \"key\": \"v-8af7b2a4\",\n      \"path\": \"/pages/27351f/\",\n      \"headers\": [\n        {\n          \"level\": 2,\n          \"title\": \"完整代码如下\",\n          \"slug\": \"完整代码如下\",\n          \"normalizedTitle\": \"完整代码如下\",\n          \"charIndex\": 30\n        },\n        {\n          \"level\": 3,\n          \"title\": \"文件\",\n          \"slug\": \"文件\",\n          \"normalizedTitle\": \"文件\",\n          \"charIndex\": 13\n        },\n        {\n          \"level\": 3,\n          \"title\": \"代码\",\n          \"slug\": \"代码\",\n          \"normalizedTitle\": \"代码\",\n          \"charIndex\": 32\n        },\n        {\n          \"level\": 2,\n          \"title\": \"打包\",\n          \"slug\": \"打包\",\n          \"normalizedTitle\": \"打包\",\n          \"charIndex\": 2426\n        },\n        {\n          \"level\": 2,\n          \"title\": \"编译(windows)\",\n          \"slug\": \"编译-windows\",\n          \"normalizedTitle\": \"编译 (windows)\",\n          \"charIndex\": 2533\n        },\n        {\n          \"level\": 3,\n          \"title\": \"运行测试\",\n          \"slug\": \"运行测试\",\n          \"normalizedTitle\": \"运行测试\",\n          \"charIndex\": 2649\n        },\n        {\n          \"level\": 2,\n          \"title\": \"交叉编译\",\n          \"slug\": \"交叉编译\",\n          \"normalizedTitle\": \"交叉编译\",\n          \"charIndex\": 3040\n        },\n        {\n          \"level\": 3,\n          \"title\": \"Mac下编译Linux, Windows\",\n          \"slug\": \"mac下编译linux-windows\",\n          \"normalizedTitle\": \"mac 下编译 linux, windows\",\n          \"charIndex\": 3049\n        },\n        {\n          \"level\": 3,\n          \"title\": \"Linux下编译Mac, Windows\",\n          \"slug\": \"linux下编译mac-windows\",\n          \"normalizedTitle\": \"linux 下编译 mac, windows\",\n          \"charIndex\": 3320\n        },\n        {\n          \"level\": 3,\n          \"title\": \"Windows下编译Mac, Linux\",\n          \"slug\": \"windows下编译mac-linux\",\n          \"normalizedTitle\": \"windows 下编译 mac, linux\",\n          \"charIndex\": 3500\n        },\n        {\n          \"level\": 2,\n          \"title\": \"说明\",\n          \"slug\": \"说明\",\n          \"normalizedTitle\": \"说明\",\n          \"charIndex\": 1036\n        }\n      ],\n      \"excerpt\": \"<blockquote>\\n<p>Go build + 文件传输 + 命令行参数</p>\\n</blockquote>\\n\",\n      \"lastUpdated\": \"5/22/2023, 8:42:57 PM\",\n      \"lastUpdatedTimestamp\": 1684759377000,\n      \"headersStr\": \"完整代码如下 文件 代码 打包 编译(windows) 运行测试 交叉编译 Mac下编译Linux, Windows Linux下编译Mac, Windows Windows下编译Mac, Linux 说明\",\n      \"content\": \"> Go build + 文件传输 + 命令行参数\\n\\n\\n# 完整代码如下\\n\\n\\n# 文件\\n\\n * main.go\\n * main.rc\\n * mian.ico\\n * mian.syso\\n\\n\\n# 代码\\n\\n/**\\n* @program: Hello\\n* @filename: main.go\\n* @author: Lido\\n* @create: 2022-02-03 11:30\\n* @description: 文件传输（局域网）\\n**/\\n\\npackage main\\n\\nimport (\\n\\t\\\"errors\\\"\\n\\t\\\"flag\\\"\\n\\t\\\"log\\\"\\n\\t\\\"net\\\"\\n\\t\\\"net/http\\\"\\n)\\n\\nvar isUsefunc bool = false\\n\\nfunc logRequest(handler http.Handler) http.Handler {\\n\\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\\n\\t\\tlog.Printf(\\\"%s %s %s\\\\n\\\", r.RemoteAddr, r.Method, r.URL)\\n\\t\\thandler.ServeHTTP(w, r)\\n\\t})\\n}\\n\\nfunc main() {\\n\\t//当前文件夹\\n\\tfs := http.FileServer(http.Dir(\\\"\\\"))\\n\\t/**\\n\\t解析命令行参数\\n\\t*/\\n\\t//默认值设置\\n\\tflag.Func(\\\"gip\\\", \\\"-gip ip/mac/im\\\", getIpAndMacAddress)\\n\\tip := flag.String(\\\"ip\\\", \\\"127.0.0.1\\\", \\\"ip\\\")\\n\\tport := flag.String(\\\"port\\\", \\\"8089\\\", \\\"port\\\")\\n\\t//解析\\n\\tflag.Parse()\\n\\n\\tif isUsefunc {\\n\\t\\treturn\\n\\t}\\n\\n\\t//字符串拼接\\n\\turl := *ip+\\\":\\\"+*port\\n\\turl_full := \\\"http://\\\"+url\\n\\n\\tlog.Println(\\\"running server at \\\"+url_full)\\n\\t//监听\\n\\tlog.Fatal(http.ListenAndServe(url, logRequest(fs)))\\n}\\n\\nfunc getIpAndMacAddress(str string) error{\\n\\tlog.Println(\\\"说明：\\\")\\n\\tlog.Println(\\\"一般最后一个是本机的WIFI的本地IP\\\\n\\\")\\n\\n\\tlog.Println(\\\"案例：\\\")\\n\\tlog.Println(\\\"file-web.exe -ip 192.168.xxx.xxx -port xxxx\\\\n\\\")\\n\\n\\tifaces, err := net.Interfaces()\\n\\tif err != nil {\\n\\t\\tlog.Println(err)\\n\\t}\\n\\n\\tfor _, iface := range ifaces {\\n\\t\\tif iface.Flags&net.FlagUp == 0 {\\n\\t\\t\\tcontinue // interface down\\n\\t\\t}\\n\\t\\tif iface.Flags&net.FlagLoopback != 0 {\\n\\t\\t\\tcontinue // loopback interface\\n\\t\\t}\\n\\t\\taddrs, err := iface.Addrs()\\n\\t\\tif err != nil {\\n\\t\\t\\tlog.Println(err)\\n\\t\\t}\\n\\n\\t\\tfor _, addr := range addrs {\\n\\t\\t\\tvar ip net.IP\\n\\t\\t\\tswitch v := addr.(type) {\\n\\t\\t\\tcase *net.IPNet:\\n\\t\\t\\t\\tip = v.IP\\n\\t\\t\\tcase *net.IPAddr:\\n\\t\\t\\t\\tip = v.IP\\n\\t\\t\\t}\\n\\t\\t\\tif ip == nil || ip.IsLoopback() {\\n\\t\\t\\t\\tcontinue\\n\\t\\t\\t}\\n\\t\\t\\tip = ip.To4()\\n\\t\\t\\tif ip == nil {\\n\\t\\t\\t\\tcontinue // not an ipv4 address\\n\\t\\t\\t}\\n\\n\\t\\t\\tif str == \\\"ip\\\" {\\n\\t\\t\\t\\tlog.Println(\\\"ip: \\\", ip.String())\\n\\t\\t\\t}else if str == \\\"mac\\\"{\\n\\t\\t\\t\\tlog.Println(\\\"mac: \\\", iface.HardwareAddr.String())\\n\\t\\t\\t}else if str  == \\\"im\\\"{\\n\\t\\t\\t\\tlog.Println(\\\"ip: \\\", ip.String(), \\\"mac: \\\", iface.HardwareAddr.String())\\n\\t\\t\\t}else {\\n\\t\\t\\t\\treturn errors.New(\\\"-1\\\")\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tisUsefunc = true\\n\\treturn nil\\n}\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n80\\n81\\n82\\n83\\n84\\n85\\n86\\n87\\n88\\n89\\n90\\n91\\n92\\n93\\n94\\n95\\n96\\n97\\n98\\n99\\n100\\n101\\n102\\n103\\n104\\n105\\n106\\n107\\n108\\n\\n\\n\\n# 打包\\n\\n提示\\n\\n 1. 创建 main.rc 文件\\n\\nIDI_ICON1 ICON \\\"main.ico\\\"\\n\\n\\n1\\n\\n\\n提示\\n\\n 2. 找好 ioc 图标（128*128），将图形名称改为 main.ico\\n\\n\\n# 编译 (windows)\\n\\n提示\\n\\n将上面两个文件和 go 源文件放在一起\\n\\n打开终端\\n\\nwindres -o main.syso main.rc\\n\\n\\n1\\n\\n\\ngo build  -ldflags \\\"-w -s\\\"\\n\\n\\n1\\n\\n\\n\\n# 运行测试\\n\\nF:\\\\GOCODE\\\\Hello\\\\file-web>file-web.exe -gip ip\\n2022/02/03 14:22:14 说明：\\n2022/02/03 14:22:14 一般最后一个是本机的WIFI的本地IP\\n\\n2022/02/03 14:22:14 案例：\\n2022/02/03 14:22:14 file-web.exe -ip 192.168.xxx.xxx -port xxxx\\n\\n2022/02/03 14:22:14 ip:  192.168.137.1\\n2022/02/03 14:22:14 ip:  192.168.195.1\\n2022/02/03 14:22:14 ip:  192.168.134.1\\n2022/02/03 14:22:14 ip:  192.168.3.9\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n\\n\\n\\n# 交叉编译\\n\\n\\n# Mac 下编译 Linux, Windows\\n\\n# Linux\\nCGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build filename.go\\n \\n# Windows\\nCGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build filename.go\\n如: CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build -o helloworld-windows helloworld.go\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n\\n\\n\\n# Linux 下编译 Mac, Windows\\n\\n# Mac\\nCGO_ENABLED=0 GOOS=darwin GOARCH=amd64 go build filename.go\\n \\n# Windows\\nCGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build filename.go\\n\\n\\n1\\n2\\n3\\n4\\n5\\n\\n\\n\\n# Windows 下编译 Mac, Linux\\n\\n# Mac\\nSET CGO_ENABLED=0\\nSET GOOS=darwin\\nSET GOARCH=amd64\\ngo build filename.go\\n \\n# Linux\\nSET CGO_ENABLED=0\\nSET GOOS=linux\\nSET GOARCH=amd64\\ngo build filename.go -ldflags \\\"-w -s\\\"\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n\\n\\nchomd 777 xxx\\n\\n\\n1\\n\\n\\n\\n# 说明\\n\\n 1. 以上两种解决方法只能临时修改 go 的环境变量，重启 Goland 或者重启 cmd 终端后失效。\\n\\n 2. 执行 go env -w GOOS=linux 可以修改 go 的环境变量 GOOS，且当重启 Goland 后或者打开其他项目后都有效。但是在 Git Bash 下执行 chmod 777 xx 赋予文件 xx 可执行权限失败。\\n\\n 3. 如果按上述方式永久修改了 GOOS，使用 Goland 的 run 命令直接运行程序会失败，即使临时设置 export GOOS=windows 也不起作用，只能通过 go env -w GOOS=windows 修改 GOOS 后才能在 Goland 中直接运行程序。\\n\\n终上所述，在 windows 系统的 Goland 中编译 Linux 的可执行程序时，建议临时修改 export GOOS=linux，而不是使用 go env -w GOOS=linux 永久修改。\",\n      \"normalizedContent\": \"> go build + 文件传输 + 命令行参数\\n\\n\\n# 完整代码如下\\n\\n\\n# 文件\\n\\n * main.go\\n * main.rc\\n * mian.ico\\n * mian.syso\\n\\n\\n# 代码\\n\\n/**\\n* @program: hello\\n* @filename: main.go\\n* @author: lido\\n* @create: 2022-02-03 11:30\\n* @description: 文件传输（局域网）\\n**/\\n\\npackage main\\n\\nimport (\\n\\t\\\"errors\\\"\\n\\t\\\"flag\\\"\\n\\t\\\"log\\\"\\n\\t\\\"net\\\"\\n\\t\\\"net/http\\\"\\n)\\n\\nvar isusefunc bool = false\\n\\nfunc logrequest(handler http.handler) http.handler {\\n\\treturn http.handlerfunc(func(w http.responsewriter, r *http.request) {\\n\\t\\tlog.printf(\\\"%s %s %s\\\\n\\\", r.remoteaddr, r.method, r.url)\\n\\t\\thandler.servehttp(w, r)\\n\\t})\\n}\\n\\nfunc main() {\\n\\t//当前文件夹\\n\\tfs := http.fileserver(http.dir(\\\"\\\"))\\n\\t/**\\n\\t解析命令行参数\\n\\t*/\\n\\t//默认值设置\\n\\tflag.func(\\\"gip\\\", \\\"-gip ip/mac/im\\\", getipandmacaddress)\\n\\tip := flag.string(\\\"ip\\\", \\\"127.0.0.1\\\", \\\"ip\\\")\\n\\tport := flag.string(\\\"port\\\", \\\"8089\\\", \\\"port\\\")\\n\\t//解析\\n\\tflag.parse()\\n\\n\\tif isusefunc {\\n\\t\\treturn\\n\\t}\\n\\n\\t//字符串拼接\\n\\turl := *ip+\\\":\\\"+*port\\n\\turl_full := \\\"http://\\\"+url\\n\\n\\tlog.println(\\\"running server at \\\"+url_full)\\n\\t//监听\\n\\tlog.fatal(http.listenandserve(url, logrequest(fs)))\\n}\\n\\nfunc getipandmacaddress(str string) error{\\n\\tlog.println(\\\"说明：\\\")\\n\\tlog.println(\\\"一般最后一个是本机的wifi的本地ip\\\\n\\\")\\n\\n\\tlog.println(\\\"案例：\\\")\\n\\tlog.println(\\\"file-web.exe -ip 192.168.xxx.xxx -port xxxx\\\\n\\\")\\n\\n\\tifaces, err := net.interfaces()\\n\\tif err != nil {\\n\\t\\tlog.println(err)\\n\\t}\\n\\n\\tfor _, iface := range ifaces {\\n\\t\\tif iface.flags&net.flagup == 0 {\\n\\t\\t\\tcontinue // interface down\\n\\t\\t}\\n\\t\\tif iface.flags&net.flagloopback != 0 {\\n\\t\\t\\tcontinue // loopback interface\\n\\t\\t}\\n\\t\\taddrs, err := iface.addrs()\\n\\t\\tif err != nil {\\n\\t\\t\\tlog.println(err)\\n\\t\\t}\\n\\n\\t\\tfor _, addr := range addrs {\\n\\t\\t\\tvar ip net.ip\\n\\t\\t\\tswitch v := addr.(type) {\\n\\t\\t\\tcase *net.ipnet:\\n\\t\\t\\t\\tip = v.ip\\n\\t\\t\\tcase *net.ipaddr:\\n\\t\\t\\t\\tip = v.ip\\n\\t\\t\\t}\\n\\t\\t\\tif ip == nil || ip.isloopback() {\\n\\t\\t\\t\\tcontinue\\n\\t\\t\\t}\\n\\t\\t\\tip = ip.to4()\\n\\t\\t\\tif ip == nil {\\n\\t\\t\\t\\tcontinue // not an ipv4 address\\n\\t\\t\\t}\\n\\n\\t\\t\\tif str == \\\"ip\\\" {\\n\\t\\t\\t\\tlog.println(\\\"ip: \\\", ip.string())\\n\\t\\t\\t}else if str == \\\"mac\\\"{\\n\\t\\t\\t\\tlog.println(\\\"mac: \\\", iface.hardwareaddr.string())\\n\\t\\t\\t}else if str  == \\\"im\\\"{\\n\\t\\t\\t\\tlog.println(\\\"ip: \\\", ip.string(), \\\"mac: \\\", iface.hardwareaddr.string())\\n\\t\\t\\t}else {\\n\\t\\t\\t\\treturn errors.new(\\\"-1\\\")\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tisusefunc = true\\n\\treturn nil\\n}\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n80\\n81\\n82\\n83\\n84\\n85\\n86\\n87\\n88\\n89\\n90\\n91\\n92\\n93\\n94\\n95\\n96\\n97\\n98\\n99\\n100\\n101\\n102\\n103\\n104\\n105\\n106\\n107\\n108\\n\\n\\n\\n# 打包\\n\\n提示\\n\\n 1. 创建 main.rc 文件\\n\\nidi_icon1 icon \\\"main.ico\\\"\\n\\n\\n1\\n\\n\\n提示\\n\\n 2. 找好 ioc 图标（128*128），将图形名称改为 main.ico\\n\\n\\n# 编译 (windows)\\n\\n提示\\n\\n将上面两个文件和 go 源文件放在一起\\n\\n打开终端\\n\\nwindres -o main.syso main.rc\\n\\n\\n1\\n\\n\\ngo build  -ldflags \\\"-w -s\\\"\\n\\n\\n1\\n\\n\\n\\n# 运行测试\\n\\nf:\\\\gocode\\\\hello\\\\file-web>file-web.exe -gip ip\\n2022/02/03 14:22:14 说明：\\n2022/02/03 14:22:14 一般最后一个是本机的wifi的本地ip\\n\\n2022/02/03 14:22:14 案例：\\n2022/02/03 14:22:14 file-web.exe -ip 192.168.xxx.xxx -port xxxx\\n\\n2022/02/03 14:22:14 ip:  192.168.137.1\\n2022/02/03 14:22:14 ip:  192.168.195.1\\n2022/02/03 14:22:14 ip:  192.168.134.1\\n2022/02/03 14:22:14 ip:  192.168.3.9\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n\\n\\n\\n# 交叉编译\\n\\n\\n# mac 下编译 linux, windows\\n\\n# linux\\ncgo_enabled=0 goos=linux goarch=amd64 go build filename.go\\n \\n# windows\\ncgo_enabled=0 goos=windows goarch=amd64 go build filename.go\\n如: cgo_enabled=0 goos=windows goarch=amd64 go build -o helloworld-windows helloworld.go\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n\\n\\n\\n# linux 下编译 mac, windows\\n\\n# mac\\ncgo_enabled=0 goos=darwin goarch=amd64 go build filename.go\\n \\n# windows\\ncgo_enabled=0 goos=windows goarch=amd64 go build filename.go\\n\\n\\n1\\n2\\n3\\n4\\n5\\n\\n\\n\\n# windows 下编译 mac, linux\\n\\n# mac\\nset cgo_enabled=0\\nset goos=darwin\\nset goarch=amd64\\ngo build filename.go\\n \\n# linux\\nset cgo_enabled=0\\nset goos=linux\\nset goarch=amd64\\ngo build filename.go -ldflags \\\"-w -s\\\"\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n\\n\\nchomd 777 xxx\\n\\n\\n1\\n\\n\\n\\n# 说明\\n\\n 1. 以上两种解决方法只能临时修改 go 的环境变量，重启 goland 或者重启 cmd 终端后失效。\\n\\n 2. 执行 go env -w goos=linux 可以修改 go 的环境变量 goos，且当重启 goland 后或者打开其他项目后都有效。但是在 git bash 下执行 chmod 777 xx 赋予文件 xx 可执行权限失败。\\n\\n 3. 如果按上述方式永久修改了 goos，使用 goland 的 run 命令直接运行程序会失败，即使临时设置 export goos=windows 也不起作用，只能通过 go env -w goos=windows 修改 goos 后才能在 goland 中直接运行程序。\\n\\n终上所述，在 windows 系统的 goland 中编译 linux 的可执行程序时，建议临时修改 export goos=linux，而不是使用 go env -w goos=linux 永久修改。\",\n      \"charsets\": {\n        \"cjk\": true\n      }\n    },\n    {\n      \"title\": \"结构体和内存对齐\",\n      \"frontmatter\": {\n        \"title\": \"结构体和内存对齐\",\n        \"date\": \"2023-06-02T18:31:22.000Z\",\n        \"permalink\": \"/pages/20d234/\",\n        \"categories\": [\n          \"Go\",\n          \"深入Go\"\n        ],\n        \"tags\": [\n          \"探索-GO\"\n        ]\n      },\n      \"regularPath\": \"/01.Go/03.%E6%B7%B1%E5%85%A5Go/03.%E7%BB%93%E6%9E%84%E4%BD%93%E5%92%8C%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90.html\",\n      \"relativePath\": \"01.Go/03.深入Go/03.结构体和内存对齐.md\",\n      \"key\": \"v-2bf5c5b2\",\n      \"path\": \"/pages/20d234/\",\n      \"lastUpdated\": \"6/2/2023, 6:34:00 PM\",\n      \"lastUpdatedTimestamp\": 1685702040000,\n      \"headersStr\": null,\n      \"content\": \"\",\n      \"normalizedContent\": \"\",\n      \"charsets\": {}\n    },\n    {\n      \"title\": \"G0\",\n      \"frontmatter\": {\n        \"pageComponent\": {\n          \"name\": \"Catalogue\",\n          \"data\": {\n            \"key\": \"01.Go\",\n            \"imgUrl\": \"/assets/img/go.png\",\n            \"description\": \"Go Go Go\"\n          }\n        },\n        \"title\": \"G0\",\n        \"date\": \"2023-02-03 20:17\",\n        \"permalink\": \"/go/\",\n        \"sidebar\": false,\n        \"article\": false,\n        \"comment\": false,\n        \"comments\": false,\n        \"editLink\": false\n      },\n      \"regularPath\": \"/01.Go/\",\n      \"relativePath\": \"01.Go/index.md\",\n      \"key\": \"v-274e5b96\",\n      \"path\": \"/go/\",\n      \"lastUpdated\": \"2/4/2023, 9:33:04 AM\",\n      \"lastUpdatedTimestamp\": 1675474384000,\n      \"headersStr\": null,\n      \"content\": \"\",\n      \"normalizedContent\": \"\",\n      \"charsets\": {}\n    },\n    {\n      \"title\": \"slice类型\",\n      \"frontmatter\": {\n        \"title\": \"slice类型\",\n        \"date\": \"2023-06-02T16:46:03.000Z\",\n        \"permalink\": \"/pages/5b42f7/\",\n        \"categories\": [\n          \"Go\",\n          \"深入Go\"\n        ],\n        \"tags\": [\n          \"探索-GO\"\n        ]\n      },\n      \"regularPath\": \"/01.Go/03.%E6%B7%B1%E5%85%A5Go/02.slice%E7%B1%BB%E5%9E%8B.html\",\n      \"relativePath\": \"01.Go/03.深入Go/02.slice类型.md\",\n      \"key\": \"v-d54e0650\",\n      \"path\": \"/pages/5b42f7/\",\n      \"headers\": [\n        {\n          \"level\": 2,\n          \"title\": \"slice类型存什么❓\",\n          \"slug\": \"slice类型存什么\",\n          \"normalizedTitle\": \"slice 类型存什么❓\",\n          \"charIndex\": 63\n        },\n        {\n          \"level\": 2,\n          \"title\": \"make和new❓\",\n          \"slug\": \"make和new\",\n          \"normalizedTitle\": \"make 和 new❓\",\n          \"charIndex\": 238\n        },\n        {\n          \"level\": 2,\n          \"title\": \"slice和数组❓\",\n          \"slug\": \"slice和数组\",\n          \"normalizedTitle\": \"slice 和数组❓\",\n          \"charIndex\": 854\n        },\n        {\n          \"level\": 2,\n          \"title\": \"扩容规则❓\",\n          \"slug\": \"扩容规则\",\n          \"normalizedTitle\": \"扩容规则❓\",\n          \"charIndex\": 1169\n        },\n        {\n          \"level\": 3,\n          \"title\": \"1. 预估拓容后容量（元素个数）\",\n          \"slug\": \"_1-预估拓容后容量-元素个数\",\n          \"normalizedTitle\": \"1. 预估拓容后容量（元素个数）\",\n          \"charIndex\": 1179\n        },\n        {\n          \"level\": 3,\n          \"title\": \"2. 判断内存大小\",\n          \"slug\": \"_2-判断内存大小\",\n          \"normalizedTitle\": \"2. 判断内存大小\",\n          \"charIndex\": 2281\n        },\n        {\n          \"level\": 3,\n          \"title\": \"3. 匹配到合适的内存规格\",\n          \"slug\": \"_3-匹配到合适的内存规格\",\n          \"normalizedTitle\": \"3. 匹配到合适的内存规格\",\n          \"charIndex\": 2343\n        },\n        {\n          \"level\": 3,\n          \"title\": \"小练习\",\n          \"slug\": \"小练习\",\n          \"normalizedTitle\": \"小练习\",\n          \"charIndex\": 2557\n        }\n      ],\n      \"excerpt\": \"<blockquote>\\n<p>slice 类型存什么？ make 和 new？ slice 和数组？扩容规则？</p>\\n<p>form：<a href=\\\"https://www.bilibili.com/video/BV1CV411d7W8\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">幼麟实验室<OutboundLink/></a></p>\\n</blockquote>\\n\",\n      \"lastUpdated\": \"6/2/2023, 6:34:00 PM\",\n      \"lastUpdatedTimestamp\": 1685702040000,\n      \"headersStr\": \"slice类型存什么❓ make和new❓ slice和数组❓ 扩容规则❓ 1. 预估拓容后容量（元素个数） 2. 判断内存大小 3. 匹配到合适的内存规格 小练习\",\n      \"content\": \"> slice 类型存什么？ make 和 new？ slice 和数组？扩容规则？\\n> \\n> form：幼麟实验室\\n\\n\\n# slice 类型存什么❓\\n\\n 1. 切片是什么结构？\\n    \\n    slice 由三部分组成，分别是 data、len、cap\\n\\n * data：元素存哪里\\n * len： 已存元素\\n * cap： 可存元素\\n\\n// 申明切片\\nvar ints []int // 此时变量ints中 [data=nil | 0 | 0 ]\\n\\n\\n1\\n2\\n\\n\\n\\n# make 和 new❓\\n\\n> make\\n\\n 1. 分配 cap 大小的底层数组空间\\n 2. 全部初始化为 0\\n\\n// make初始化\\nvar ints []int= make([]int,2,5); // 变量ints中 [data=(指针)[0,0,0,0,0] | 2 | 5 ]\\n\\n\\n1\\n2\\n\\n\\n添加一个元素，由于已经使用了两个元素，所以从第三个元素开始添加\\n\\nints = append(ints,1)\\t\\t\\t // 变量ints中 [data=(指针)[0,0,1,0,0] | 3 | 5 ]\\n\\n\\n1\\n\\n\\n在 len 范围内的元素可以安全读写，超出范围则会 panic\\n\\nints[0] = 1; // right\\nints[3] = 1; // panic\\n\\n\\n1\\n2\\n\\n\\n\\n\\n----------------------------------------\\n\\n> new\\n\\n 1. 不会分配底层数组的地址空间\\n 2. 返回值为 slice 的起始指针\\n\\n// new初始化\\nps := new([]string) // [data = nil | 0 | 0 ]\\n\\n\\n1\\n2\\n\\n\\n由于没有底层数组，直接操作 ps 会 panic\\n\\n(*ps)[0] = \\\"eggo\\\" // panic\\n\\n\\n1\\n\\n\\n通过 append () 函数来分配底层数组\\n\\n*ps = append(*ps,\\\"eggo\\\")\\n\\n\\n1\\n\\n\\n\\n\\n\\n# slice 和数组❓\\n\\n * slice 操作共同的底层数组\\n\\narr := [10]int{0,1,2,3,4,5,6,7,8,9}\\n// 左闭右开\\nvar s1 []int = arr[1:4] // [1 2 3] len = 3 cap = 9(直接到头)\\nvar s2 []int = arr[7:]  // [7 8 9] len = 3 cap = 3\\n\\n\\n1\\n2\\n3\\n4\\n\\n\\n\\n\\n * 再给 s2 添加元素\\n   * 开辟新的底层数组\\n   * 拷贝原来的底层数组（s2 所使用的部分）\\n   * 再添加新的元素\\n   * 修改 len 和 cap\\n\\ns2 = append(s2,10) \\n\\n\\n1\\n\\n\\n\\n\\n\\n# 扩容规则❓\\n\\n\\n# 1. 预估拓容后容量（元素个数）\\n\\n// go 1.9.5 src/runtime/slice.go:82\\nfunc growslice(et *_type, old slice, cap int) slice {\\n    // ……\\n    newcap := old.cap\\n    doublecap := newcap + newcap\\n    if cap > doublecap {\\n        newcap = cap\\n    } else {\\n        if old.len < 1024 {\\n            newcap = doublecap\\n        } else {\\n            for newcap < cap {\\n                newcap += newcap / 4\\n            }\\n        }\\n    }\\n    // ……\\n\\n    capmem = roundupsize(uintptr(newcap) * ptrSize)\\n    newcap = int(capmem / ptrSize)\\n}\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n\\n\\n如果只看前半部分，现在网上各种文章里说的 newcap 的规律是对的。现实是，后半部分还对 newcap 作了一个 内存对齐 ，这个和内存分配策略相关。进行内存对齐之后，新 slice 的容量是要 大于等于 老 slice 容量的 2倍 或者 1.25倍 。\\n\\n之后，向 Go 内存管理器申请内存，将老 slice 中的数据复制过去，并且将 append 的元素添加到新的底层数组中。\\n\\n最后，向 growslice 函数调用者返回一个新的 slice，这个 slice 的长度并没有变化，而容量却增大了。\\n\\n 1. 如果期望容量大于当前容量的两倍就会使用期望容量；\\n 2. 如果当前切片的长度小于 1024 就会将容量翻倍；\\n 3. 如果当前切片的长度大于 1024 ，由于有内存对齐，每次会大于原定的 1.25 一点；\\n\\n// 如果期望容量大于当前容量的两倍就会使用期望容量；\\nints := []int{1,2}\\nints = appned(ints[],3,4,5)\\n// 此时ints len = 2，翻倍后 = 4，而期望容量是 2 + 3 = 5\\n// 也就是望容量大于当前容量的两倍\\n// 此时容量 = 期望容量 = 5\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n\\n\\n\\n# 2. 判断内存大小\\n\\n第一步的预估容量仅是个数，实际的元素还要考虑大小，也就是容量 = 元素个数 * 元素类型大小\\n\\n\\n# 3. 匹配到合适的内存规格\\n\\n * 流程：容量 <---> Go 语言内存管理模块 <---> 操作系统\\n\\n当然并不是直接分配计算出的容量就 ok 了，在多数编程语言中，申请分配内存并不是直接与操作系统交涉，而是与语言自身实现的内存管理模块，内存管理模块会提前向操作系统申请一块内存，一般是 2 的整数倍（8、16、32、64、80、96、112...）然后分成常用的规格管理起来，申请内存时会匹配到足够大且接近的内存\\n\\n\\n# 小练习\\n\\n\",\n      \"normalizedContent\": \"> slice 类型存什么？ make 和 new？ slice 和数组？扩容规则？\\n> \\n> form：幼麟实验室\\n\\n\\n# slice 类型存什么❓\\n\\n 1. 切片是什么结构？\\n    \\n    slice 由三部分组成，分别是 data、len、cap\\n\\n * data：元素存哪里\\n * len： 已存元素\\n * cap： 可存元素\\n\\n// 申明切片\\nvar ints []int // 此时变量ints中 [data=nil | 0 | 0 ]\\n\\n\\n1\\n2\\n\\n\\n\\n# make 和 new❓\\n\\n> make\\n\\n 1. 分配 cap 大小的底层数组空间\\n 2. 全部初始化为 0\\n\\n// make初始化\\nvar ints []int= make([]int,2,5); // 变量ints中 [data=(指针)[0,0,0,0,0] | 2 | 5 ]\\n\\n\\n1\\n2\\n\\n\\n添加一个元素，由于已经使用了两个元素，所以从第三个元素开始添加\\n\\nints = append(ints,1)\\t\\t\\t // 变量ints中 [data=(指针)[0,0,1,0,0] | 3 | 5 ]\\n\\n\\n1\\n\\n\\n在 len 范围内的元素可以安全读写，超出范围则会 panic\\n\\nints[0] = 1; // right\\nints[3] = 1; // panic\\n\\n\\n1\\n2\\n\\n\\n\\n\\n----------------------------------------\\n\\n> new\\n\\n 1. 不会分配底层数组的地址空间\\n 2. 返回值为 slice 的起始指针\\n\\n// new初始化\\nps := new([]string) // [data = nil | 0 | 0 ]\\n\\n\\n1\\n2\\n\\n\\n由于没有底层数组，直接操作 ps 会 panic\\n\\n(*ps)[0] = \\\"eggo\\\" // panic\\n\\n\\n1\\n\\n\\n通过 append () 函数来分配底层数组\\n\\n*ps = append(*ps,\\\"eggo\\\")\\n\\n\\n1\\n\\n\\n\\n\\n\\n# slice 和数组❓\\n\\n * slice 操作共同的底层数组\\n\\narr := [10]int{0,1,2,3,4,5,6,7,8,9}\\n// 左闭右开\\nvar s1 []int = arr[1:4] // [1 2 3] len = 3 cap = 9(直接到头)\\nvar s2 []int = arr[7:]  // [7 8 9] len = 3 cap = 3\\n\\n\\n1\\n2\\n3\\n4\\n\\n\\n\\n\\n * 再给 s2 添加元素\\n   * 开辟新的底层数组\\n   * 拷贝原来的底层数组（s2 所使用的部分）\\n   * 再添加新的元素\\n   * 修改 len 和 cap\\n\\ns2 = append(s2,10) \\n\\n\\n1\\n\\n\\n\\n\\n\\n# 扩容规则❓\\n\\n\\n# 1. 预估拓容后容量（元素个数）\\n\\n// go 1.9.5 src/runtime/slice.go:82\\nfunc growslice(et *_type, old slice, cap int) slice {\\n    // ……\\n    newcap := old.cap\\n    doublecap := newcap + newcap\\n    if cap > doublecap {\\n        newcap = cap\\n    } else {\\n        if old.len < 1024 {\\n            newcap = doublecap\\n        } else {\\n            for newcap < cap {\\n                newcap += newcap / 4\\n            }\\n        }\\n    }\\n    // ……\\n\\n    capmem = roundupsize(uintptr(newcap) * ptrsize)\\n    newcap = int(capmem / ptrsize)\\n}\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n\\n\\n如果只看前半部分，现在网上各种文章里说的 newcap 的规律是对的。现实是，后半部分还对 newcap 作了一个 内存对齐 ，这个和内存分配策略相关。进行内存对齐之后，新 slice 的容量是要 大于等于 老 slice 容量的 2倍 或者 1.25倍 。\\n\\n之后，向 go 内存管理器申请内存，将老 slice 中的数据复制过去，并且将 append 的元素添加到新的底层数组中。\\n\\n最后，向 growslice 函数调用者返回一个新的 slice，这个 slice 的长度并没有变化，而容量却增大了。\\n\\n 1. 如果期望容量大于当前容量的两倍就会使用期望容量；\\n 2. 如果当前切片的长度小于 1024 就会将容量翻倍；\\n 3. 如果当前切片的长度大于 1024 ，由于有内存对齐，每次会大于原定的 1.25 一点；\\n\\n// 如果期望容量大于当前容量的两倍就会使用期望容量；\\nints := []int{1,2}\\nints = appned(ints[],3,4,5)\\n// 此时ints len = 2，翻倍后 = 4，而期望容量是 2 + 3 = 5\\n// 也就是望容量大于当前容量的两倍\\n// 此时容量 = 期望容量 = 5\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n\\n\\n\\n# 2. 判断内存大小\\n\\n第一步的预估容量仅是个数，实际的元素还要考虑大小，也就是容量 = 元素个数 * 元素类型大小\\n\\n\\n# 3. 匹配到合适的内存规格\\n\\n * 流程：容量 <---> go 语言内存管理模块 <---> 操作系统\\n\\n当然并不是直接分配计算出的容量就 ok 了，在多数编程语言中，申请分配内存并不是直接与操作系统交涉，而是与语言自身实现的内存管理模块，内存管理模块会提前向操作系统申请一块内存，一般是 2 的整数倍（8、16、32、64、80、96、112...）然后分成常用的规格管理起来，申请内存时会匹配到足够大且接近的内存\\n\\n\\n# 小练习\\n\\n\",\n      \"charsets\": {\n        \"cjk\": true\n      }\n    },\n    {\n      \"title\": \"Day03-链表\",\n      \"frontmatter\": {\n        \"title\": \"Day03-链表\",\n        \"date\": \"2023-05-26T00:55:34.000Z\",\n        \"permalink\": \"/pages/2c5009/\",\n        \"categories\": [\n          \"算法\",\n          \"算法打卡\"\n        ],\n        \"tags\": [\n          \"打卡\"\n        ]\n      },\n      \"regularPath\": \"/02.%E7%AE%97%E6%B3%95/01.%E7%AE%97%E6%B3%95%E6%89%93%E5%8D%A1/03.Day03-%E9%93%BE%E8%A1%A8.html\",\n      \"relativePath\": \"02.算法/01.算法打卡/03.Day03-链表.md\",\n      \"key\": \"v-c042b388\",\n      \"path\": \"/pages/2c5009/\",\n      \"headers\": [\n        {\n          \"level\": 2,\n          \"title\": \"链表理论基础\",\n          \"slug\": \"链表理论基础\",\n          \"normalizedTitle\": \"链表理论基础\",\n          \"charIndex\": 51\n        },\n        {\n          \"level\": 2,\n          \"title\": \"203.移除链表元素\",\n          \"slug\": \"_203-移除链表元素\",\n          \"normalizedTitle\": \"203. 移除链表元素\",\n          \"charIndex\": 98\n        },\n        {\n          \"level\": 3,\n          \"title\": \"录前想法\",\n          \"slug\": \"录前想法\",\n          \"normalizedTitle\": \"录前想法\",\n          \"charIndex\": 166\n        },\n        {\n          \"level\": 3,\n          \"title\": \"录后想法\",\n          \"slug\": \"录后想法\",\n          \"normalizedTitle\": \"录后想法\",\n          \"charIndex\": 852\n        },\n        {\n          \"level\": 3,\n          \"title\": \"总结\",\n          \"slug\": \"总结\",\n          \"normalizedTitle\": \"总结\",\n          \"charIndex\": 44\n        },\n        {\n          \"level\": 2,\n          \"title\": \"707.设计链表\",\n          \"slug\": \"_707-设计链表\",\n          \"normalizedTitle\": \"707. 设计链表\",\n          \"charIndex\": 1609\n        },\n        {\n          \"level\": 3,\n          \"title\": \"录前想法\",\n          \"slug\": \"录前想法-2\",\n          \"normalizedTitle\": \"录前想法\",\n          \"charIndex\": 166\n        },\n        {\n          \"level\": 3,\n          \"title\": \"录后想法\",\n          \"slug\": \"录后想法-2\",\n          \"normalizedTitle\": \"录后想法\",\n          \"charIndex\": 852\n        },\n        {\n          \"level\": 3,\n          \"title\": \"总结\",\n          \"slug\": \"总结-2\",\n          \"normalizedTitle\": \"总结\",\n          \"charIndex\": 44\n        },\n        {\n          \"level\": 2,\n          \"title\": \"206.反转链表\",\n          \"slug\": \"_206-反转链表\",\n          \"normalizedTitle\": \"206. 反转链表\",\n          \"charIndex\": 6752\n        },\n        {\n          \"level\": 3,\n          \"title\": \"录前想法\",\n          \"slug\": \"录前想法-3\",\n          \"normalizedTitle\": \"录前想法\",\n          \"charIndex\": 166\n        },\n        {\n          \"level\": 3,\n          \"title\": \"录后想法\",\n          \"slug\": \"录后想法-3\",\n          \"normalizedTitle\": \"录后想法\",\n          \"charIndex\": 852\n        },\n        {\n          \"level\": 3,\n          \"title\": \"总结\",\n          \"slug\": \"总结-3\",\n          \"normalizedTitle\": \"总结\",\n          \"charIndex\": 44\n        },\n        {\n          \"level\": 2,\n          \"title\": \"总结\",\n          \"slug\": \"总结-4\",\n          \"normalizedTitle\": \"总结\",\n          \"charIndex\": 44\n        }\n      ],\n      \"excerpt\": \"<blockquote>\\n<p>977. 有序数组的平方 、209. 长度最小的子数组 、59. 螺旋矩阵 II 、总结</p>\\n</blockquote>\\n\",\n      \"lastUpdated\": \"6/2/2023, 6:34:00 PM\",\n      \"lastUpdatedTimestamp\": 1685702040000,\n      \"headersStr\": \"链表理论基础 203.移除链表元素 录前想法 录后想法 总结 707.设计链表 录前想法 录后想法 总结 206.反转链表 录前想法 录后想法 总结 总结\",\n      \"content\": \"> 977. 有序数组的平方 、209. 长度最小的子数组 、59. 螺旋矩阵 II 、总结\\n\\n\\n# 链表理论基础\\n\\n * 讲解：文章讲解\\n * 要求：了解链接基础，以及链表和数组的区别\\n\\n\\n# 203. 移除链表元素\\n\\n * 题目：203. 移除链表元素\\n * 讲解：文章讲解、视频讲解\\n * 要求：虚拟头结点的使用技巧\\n\\n\\n# 录前想法\\n\\n我想的是判断空，通过虚拟头节点比对下一个节点来删除元素（未通过❌）\\n\\nclass Solution {\\npublic:\\n    ListNode* removeElements(ListNode* head, int val) {\\n\\n        // 判断空\\n        if (head == NULL){\\n            return head;\\n        }\\n\\n        // 虚拟头节点\\n        ListNode* newHead = new ListNode(0);\\n        newHead->next = head;\\n        // 操作指针\\n        ListNode* cur = newHead;\\n\\n        while(cur->next != NULL){\\n            if(cur->next->val == val){\\n                cur->next = cur->next->next;\\n            }\\n            cur = cur->next;\\n        } \\n\\n        return newHead->next;\\n    }\\n};\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n\\n\\n错在空指针，\\n\\n在删除节点后，如果下一个节点也需要被删除，那么当前指针 cur 应该保持不变，以便检查下一个节点\\n\\n\\n# 录后想法\\n\\n看过卡哥思路后发现\\n\\n 1. 做了删除节点判断\\n 2. 内存管理（销毁删除节点内存）\\n\\nclass Solution {\\npublic:\\n    ListNode* removeElements(ListNode* head, int val) {\\n\\n        // 判断空\\n        if (head == NULL){\\n            return head;\\n        }\\n\\n        // 虚拟头节点\\n        ListNode* newHead = new ListNode(0);\\n        newHead->next = head;\\n        // 操作指针\\n        ListNode* cur = newHead;\\n\\n        while(cur->next != NULL){\\n            if(cur->next->val == val){\\n                ListNode* tmp = cur->next;\\n                cur->next = cur->next->next;\\n                delete tmp; // 销毁内存\\n            }else{\\n                cur = cur->next;\\n            }  \\n        } \\n\\n        return newHead->next;\\n    }\\n};\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n\\n\\n\\n# 总结\\n\\n\\n# 707. 设计链表\\n\\n * 题目：707. 设计链表\\n * 讲解：文章讲解、视频讲解\\n * 要求：掌握链表综合操作\\n\\n\\n# 录前想法\\n\\n坎坎坷坷的，没有写出来，不知道从何下手\\n\\n看了一眼卡哥的代码，发现要自己定义结构体，自己写构造函数😓\\n\\n下面是第一次提交的错误代码（❌）\\n\\nclass MyLinkedList {\\npublic:\\n    // 定义链表节点结构体\\n    struct LinkedNode {\\n        int val;\\n        LinkedNode* next;\\n        LinkedNode(int val):val(val), next(nullptr){}\\n    };\\n\\n    MyLinkedList() {\\n        head = new LinkedNode(0);\\n        size = 0;\\n    }\\n\\n    int get(int index) {\\n        // index表示下标从0开始\\n        if(index > size - 1 || index < 0){\\n            return -1;\\n        }\\n\\n        LinkedNode* cur = head->next;\\n        while(index--){\\n            cur = cur->next;\\n        }\\n        return cur->val;\\n    }\\n    \\n    void addAtHead(int val) {\\n        LinkedNode* node = new LinkedNode(val);\\n        node->next = head->next;\\n        head->next = node;\\n        ++size;\\n    }\\n    \\n    void addAtTail(int val) {\\n        LinkedNode* node = new LinkedNode(val);\\n        LinkedNode* cur = head->next;\\n        while(cur->next){\\n            cur = cur->next;\\n        }\\n        cur->next = node;\\n        ++size;\\n    }\\n    \\n    void addAtIndex(int index, int val) {\\n        // index表示下标从0开始\\n        if(index > size){\\n            return;\\n        }\\n        if(index < 0){\\n            addAtHead(val);\\n            return;\\n        }\\n\\n        LinkedNode* cur = head;\\n        while(index--){\\n            cur = cur->next;\\n        }\\n\\n        // 1->2\\n        LinkedNode* node = new LinkedNode(val);\\n        // 2->3\\n        node->next = cur->next;\\n        // 1->2->3\\n        cur->next = node;\\n        size++;\\n    }\\n    \\n    void deleteAtIndex(int index) {\\n        // index表示下标从0开始\\n        if(index >= size - 1 || index < 0){return;}\\n\\n        // 获取待删除元素的前一个元素\\n        LinkedNode* cur = head;\\n        while(index--){\\n            cur = cur->next;\\n        }\\n\\n        LinkedNode* tmp = cur->next;\\n        cur->next = cur->next->next;\\n        delete tmp;\\n        tmp = nullptr;\\n\\n        size--;\\n    }\\nprivate:\\n    int size;\\n    LinkedNode* head;\\n};\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n80\\n81\\n82\\n83\\n84\\n85\\n86\\n87\\n88\\n89\\n\\n\\n经过调试喝排查，发现\\n\\nint get(int index) {\\n    // index表示下标从0开始\\n    if(index > (size - 1) || index < 0){ // 应该要加上括号！！！\\n        return -1;\\n    }\\n\\n    ...\\n}\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n\\n\\nvoid deleteAtIndex(int index) {\\n    // index表示下标从0开始\\n    if(index >= (size - 1) || index < 0){return;} // 应该要加上括号！！！\\n\\n    ...\\n}\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n\\n\\n\\n# 录后想法\\n\\n一些内存管理还不熟，比如删除元素时 tmp 的处理，只单纯的 delete，没有置为空。\\n\\n    // 删除第index个节点，如果index 大于等于链表的长度，直接return，注意index是从0开始的\\n    void deleteAtIndex(int index) {\\n        ...\\n        delete tmp;\\n        //delete命令指示释放了tmp指针原本所指的那部分内存，\\n        //被delete后的指针tmp的值（地址）并非就是NULL，而是随机值。也就是被delete后，\\n        //如果不再加上一句tmp=nullptr,tmp会成为乱指的野指针\\n        //如果之后的程序不小心使用了tmp，会指向难以预想的内存空间\\n        tmp=nullptr;\\n        _size--;\\n    }\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n\\n\\n以下是后面结合卡哥讲解后的代码（✅）\\n\\nclass MyLinkedList {\\npublic:\\n    // 定义链表节点结构体\\n    struct LinkedNode {\\n        int val;\\n        LinkedNode* next;\\n        LinkedNode(int val):val(val), next(nullptr){}\\n    };\\n\\n    MyLinkedList() {\\n        head = new LinkedNode(0);\\n        size = 0;\\n    }\\n\\n    int get(int index) {\\n        // index表示下标从0开始\\n        if(index > (size - 1) || index < 0){\\n            return -1;\\n        }\\n\\n        LinkedNode* cur = head->next;\\n        while(index--){\\n            cur = cur->next;\\n        }\\n        return cur->val;\\n    }\\n    \\n    void addAtHead(int val) {\\n        LinkedNode* node = new LinkedNode(val);\\n        node->next = head->next;\\n        head->next = node;\\n        ++size;\\n    }\\n    \\n    void addAtTail(int val) {\\n        LinkedNode* node = new LinkedNode(val);\\n        LinkedNode* cur = head;\\n        while(cur->next){\\n            cur = cur->next;\\n        }\\n        cur->next = node;\\n        ++size;\\n    }\\n    \\n    void addAtIndex(int index, int val) {\\n        // index表示下标从0开始\\n        if(index > size){\\n            return;\\n        }\\n        if(index < 0){\\n            index = 0;\\n        }\\n\\n        LinkedNode* cur = head;\\n        while(index--){\\n            cur = cur->next;\\n        }\\n\\n        // 1->2\\n        LinkedNode* node = new LinkedNode(val);\\n        // 2->3\\n        node->next = cur->next;\\n        // 1->2->3\\n        cur->next = node;\\n        size++;\\n    }\\n    \\n    void deleteAtIndex(int index) {\\n        // index表示下标从0开始\\n        if(index > (size - 1) || index < 0){return;}\\n\\n        // 获取待删除元素的前一个元素\\n        LinkedNode* cur = head;\\n        while(index--){\\n            cur = cur->next;\\n        }\\n\\n        LinkedNode* tmp = cur->next;\\n        cur->next = cur->next->next;\\n        delete tmp;\\n        tmp = nullptr;\\n\\n        size--;\\n    }\\nprivate:\\n    int size;\\n    LinkedNode* head;\\n};\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n80\\n81\\n82\\n83\\n84\\n85\\n86\\n87\\n88\\n\\n\\n\\n# 总结\\n\\n 1. 判断元素越界时，若要做运算要加上括号\\n 2. 虚拟头节点很方便\\n    1. 可以找到元素的前一个节点，方便删除和插入\\n    2. 可以直接到指定元素结点\\n\\n\\n# 206. 反转链表\\n\\n * 题目：206. 反转链表\\n\\n * 讲解：文章讲解、视频讲解\\n\\n * 要求：双指针应用\\n\\n\\n# 录前想法\\n\\n双指针反转，全部后指前，下面代码（❌）\\n\\nclass Solution {\\npublic:\\n    ListNode* reverseList(ListNode* head) {\\n\\n        // 虚拟头节点\\n        ListNode* newHead = new ListNode(0);\\n        newHead->next = head;\\n\\n        ListNode* pre = newHead;\\n        ListNode* cur = newHead->next;\\n        while(cur && cur->next){\\n            ListNode* tmp = cur->next;\\n            cur->next = pre;\\n            pre = cur;\\n            cur = tmp; \\n        }\\n\\n        return newHead->next;\\n    }\\n};\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n\\n\\n经过调试检查后发现以下几点错误：\\n\\n 1. 虚拟头节点多余\\n 2. pre 初始值不正确\\n 3. 返回值错误\\n\\n\\n# 录后想法\\n\\n>  1. 双指针\\n\\n看过卡哥的讲解后，优化了上面的代码（✅）\\n\\nclass Solution {\\npublic:\\n    ListNode* reverseList(ListNode* head) {\\n\\n        ListNode* pre = NULL;\\n        ListNode* cur = head;\\n        ListNode* tmp;\\n\\n        while(cur){\\n            tmp = cur->next;\\n            cur->next = pre;\\n            pre = cur;\\n            cur = tmp; \\n        }\\n\\n        return pre;\\n    }\\n};\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n\\n * 时间复杂度：O（n）\\n * 空间复杂度：O（1）\\n\\n>  2. 递归\\n\\n核心思路没变，利用递归巧妙的对应了双指针 while 循环。\\n\\nclass Solution {\\npublic:\\n    ListNode* reverse(ListNode* pre,ListNode* cur) {\\n\\n        // 对应双指针的return pre;\\n        if(cur == NULL){return pre;}\\n        \\n        ListNode* tmp = cur->next;\\n        cur->next = pre;\\n        \\n        // 巧妙的对应\\n        // pre = cur;\\n        // cur = tmp;\\n        return reverse(cur,tmp);\\n\\n    }\\n\\n    ListNode* reverseList(ListNode* head) {\\n\\n        return reverse(NULL,head);\\n    }\\n};\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n\\n * 时间复杂度: O (n)\\n * 空间复杂度: O (n)\\n\\n\\n# 总结\\n\\n * 反转：后 -> 前\\n\\n\\n# 总结\\n\\n这次写的时间比较久，在中间设计链表部分卡的时间长，看似链表的那些基础操作容易，自己上手写大大小小的错误就出来了。\\n\\n容易错的点：\\n\\n 1. 忘记删除完元素要 delete，且置为空\\n 2. 是否需要虚拟头节点？\",\n      \"normalizedContent\": \"> 977. 有序数组的平方 、209. 长度最小的子数组 、59. 螺旋矩阵 ii 、总结\\n\\n\\n# 链表理论基础\\n\\n * 讲解：文章讲解\\n * 要求：了解链接基础，以及链表和数组的区别\\n\\n\\n# 203. 移除链表元素\\n\\n * 题目：203. 移除链表元素\\n * 讲解：文章讲解、视频讲解\\n * 要求：虚拟头结点的使用技巧\\n\\n\\n# 录前想法\\n\\n我想的是判断空，通过虚拟头节点比对下一个节点来删除元素（未通过❌）\\n\\nclass solution {\\npublic:\\n    listnode* removeelements(listnode* head, int val) {\\n\\n        // 判断空\\n        if (head == null){\\n            return head;\\n        }\\n\\n        // 虚拟头节点\\n        listnode* newhead = new listnode(0);\\n        newhead->next = head;\\n        // 操作指针\\n        listnode* cur = newhead;\\n\\n        while(cur->next != null){\\n            if(cur->next->val == val){\\n                cur->next = cur->next->next;\\n            }\\n            cur = cur->next;\\n        } \\n\\n        return newhead->next;\\n    }\\n};\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n\\n\\n错在空指针，\\n\\n在删除节点后，如果下一个节点也需要被删除，那么当前指针 cur 应该保持不变，以便检查下一个节点\\n\\n\\n# 录后想法\\n\\n看过卡哥思路后发现\\n\\n 1. 做了删除节点判断\\n 2. 内存管理（销毁删除节点内存）\\n\\nclass solution {\\npublic:\\n    listnode* removeelements(listnode* head, int val) {\\n\\n        // 判断空\\n        if (head == null){\\n            return head;\\n        }\\n\\n        // 虚拟头节点\\n        listnode* newhead = new listnode(0);\\n        newhead->next = head;\\n        // 操作指针\\n        listnode* cur = newhead;\\n\\n        while(cur->next != null){\\n            if(cur->next->val == val){\\n                listnode* tmp = cur->next;\\n                cur->next = cur->next->next;\\n                delete tmp; // 销毁内存\\n            }else{\\n                cur = cur->next;\\n            }  \\n        } \\n\\n        return newhead->next;\\n    }\\n};\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n\\n\\n\\n# 总结\\n\\n\\n# 707. 设计链表\\n\\n * 题目：707. 设计链表\\n * 讲解：文章讲解、视频讲解\\n * 要求：掌握链表综合操作\\n\\n\\n# 录前想法\\n\\n坎坎坷坷的，没有写出来，不知道从何下手\\n\\n看了一眼卡哥的代码，发现要自己定义结构体，自己写构造函数😓\\n\\n下面是第一次提交的错误代码（❌）\\n\\nclass mylinkedlist {\\npublic:\\n    // 定义链表节点结构体\\n    struct linkednode {\\n        int val;\\n        linkednode* next;\\n        linkednode(int val):val(val), next(nullptr){}\\n    };\\n\\n    mylinkedlist() {\\n        head = new linkednode(0);\\n        size = 0;\\n    }\\n\\n    int get(int index) {\\n        // index表示下标从0开始\\n        if(index > size - 1 || index < 0){\\n            return -1;\\n        }\\n\\n        linkednode* cur = head->next;\\n        while(index--){\\n            cur = cur->next;\\n        }\\n        return cur->val;\\n    }\\n    \\n    void addathead(int val) {\\n        linkednode* node = new linkednode(val);\\n        node->next = head->next;\\n        head->next = node;\\n        ++size;\\n    }\\n    \\n    void addattail(int val) {\\n        linkednode* node = new linkednode(val);\\n        linkednode* cur = head->next;\\n        while(cur->next){\\n            cur = cur->next;\\n        }\\n        cur->next = node;\\n        ++size;\\n    }\\n    \\n    void addatindex(int index, int val) {\\n        // index表示下标从0开始\\n        if(index > size){\\n            return;\\n        }\\n        if(index < 0){\\n            addathead(val);\\n            return;\\n        }\\n\\n        linkednode* cur = head;\\n        while(index--){\\n            cur = cur->next;\\n        }\\n\\n        // 1->2\\n        linkednode* node = new linkednode(val);\\n        // 2->3\\n        node->next = cur->next;\\n        // 1->2->3\\n        cur->next = node;\\n        size++;\\n    }\\n    \\n    void deleteatindex(int index) {\\n        // index表示下标从0开始\\n        if(index >= size - 1 || index < 0){return;}\\n\\n        // 获取待删除元素的前一个元素\\n        linkednode* cur = head;\\n        while(index--){\\n            cur = cur->next;\\n        }\\n\\n        linkednode* tmp = cur->next;\\n        cur->next = cur->next->next;\\n        delete tmp;\\n        tmp = nullptr;\\n\\n        size--;\\n    }\\nprivate:\\n    int size;\\n    linkednode* head;\\n};\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n80\\n81\\n82\\n83\\n84\\n85\\n86\\n87\\n88\\n89\\n\\n\\n经过调试喝排查，发现\\n\\nint get(int index) {\\n    // index表示下标从0开始\\n    if(index > (size - 1) || index < 0){ // 应该要加上括号！！！\\n        return -1;\\n    }\\n\\n    ...\\n}\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n\\n\\nvoid deleteatindex(int index) {\\n    // index表示下标从0开始\\n    if(index >= (size - 1) || index < 0){return;} // 应该要加上括号！！！\\n\\n    ...\\n}\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n\\n\\n\\n# 录后想法\\n\\n一些内存管理还不熟，比如删除元素时 tmp 的处理，只单纯的 delete，没有置为空。\\n\\n    // 删除第index个节点，如果index 大于等于链表的长度，直接return，注意index是从0开始的\\n    void deleteatindex(int index) {\\n        ...\\n        delete tmp;\\n        //delete命令指示释放了tmp指针原本所指的那部分内存，\\n        //被delete后的指针tmp的值（地址）并非就是null，而是随机值。也就是被delete后，\\n        //如果不再加上一句tmp=nullptr,tmp会成为乱指的野指针\\n        //如果之后的程序不小心使用了tmp，会指向难以预想的内存空间\\n        tmp=nullptr;\\n        _size--;\\n    }\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n\\n\\n以下是后面结合卡哥讲解后的代码（✅）\\n\\nclass mylinkedlist {\\npublic:\\n    // 定义链表节点结构体\\n    struct linkednode {\\n        int val;\\n        linkednode* next;\\n        linkednode(int val):val(val), next(nullptr){}\\n    };\\n\\n    mylinkedlist() {\\n        head = new linkednode(0);\\n        size = 0;\\n    }\\n\\n    int get(int index) {\\n        // index表示下标从0开始\\n        if(index > (size - 1) || index < 0){\\n            return -1;\\n        }\\n\\n        linkednode* cur = head->next;\\n        while(index--){\\n            cur = cur->next;\\n        }\\n        return cur->val;\\n    }\\n    \\n    void addathead(int val) {\\n        linkednode* node = new linkednode(val);\\n        node->next = head->next;\\n        head->next = node;\\n        ++size;\\n    }\\n    \\n    void addattail(int val) {\\n        linkednode* node = new linkednode(val);\\n        linkednode* cur = head;\\n        while(cur->next){\\n            cur = cur->next;\\n        }\\n        cur->next = node;\\n        ++size;\\n    }\\n    \\n    void addatindex(int index, int val) {\\n        // index表示下标从0开始\\n        if(index > size){\\n            return;\\n        }\\n        if(index < 0){\\n            index = 0;\\n        }\\n\\n        linkednode* cur = head;\\n        while(index--){\\n            cur = cur->next;\\n        }\\n\\n        // 1->2\\n        linkednode* node = new linkednode(val);\\n        // 2->3\\n        node->next = cur->next;\\n        // 1->2->3\\n        cur->next = node;\\n        size++;\\n    }\\n    \\n    void deleteatindex(int index) {\\n        // index表示下标从0开始\\n        if(index > (size - 1) || index < 0){return;}\\n\\n        // 获取待删除元素的前一个元素\\n        linkednode* cur = head;\\n        while(index--){\\n            cur = cur->next;\\n        }\\n\\n        linkednode* tmp = cur->next;\\n        cur->next = cur->next->next;\\n        delete tmp;\\n        tmp = nullptr;\\n\\n        size--;\\n    }\\nprivate:\\n    int size;\\n    linkednode* head;\\n};\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n80\\n81\\n82\\n83\\n84\\n85\\n86\\n87\\n88\\n\\n\\n\\n# 总结\\n\\n 1. 判断元素越界时，若要做运算要加上括号\\n 2. 虚拟头节点很方便\\n    1. 可以找到元素的前一个节点，方便删除和插入\\n    2. 可以直接到指定元素结点\\n\\n\\n# 206. 反转链表\\n\\n * 题目：206. 反转链表\\n\\n * 讲解：文章讲解、视频讲解\\n\\n * 要求：双指针应用\\n\\n\\n# 录前想法\\n\\n双指针反转，全部后指前，下面代码（❌）\\n\\nclass solution {\\npublic:\\n    listnode* reverselist(listnode* head) {\\n\\n        // 虚拟头节点\\n        listnode* newhead = new listnode(0);\\n        newhead->next = head;\\n\\n        listnode* pre = newhead;\\n        listnode* cur = newhead->next;\\n        while(cur && cur->next){\\n            listnode* tmp = cur->next;\\n            cur->next = pre;\\n            pre = cur;\\n            cur = tmp; \\n        }\\n\\n        return newhead->next;\\n    }\\n};\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n\\n\\n经过调试检查后发现以下几点错误：\\n\\n 1. 虚拟头节点多余\\n 2. pre 初始值不正确\\n 3. 返回值错误\\n\\n\\n# 录后想法\\n\\n>  1. 双指针\\n\\n看过卡哥的讲解后，优化了上面的代码（✅）\\n\\nclass solution {\\npublic:\\n    listnode* reverselist(listnode* head) {\\n\\n        listnode* pre = null;\\n        listnode* cur = head;\\n        listnode* tmp;\\n\\n        while(cur){\\n            tmp = cur->next;\\n            cur->next = pre;\\n            pre = cur;\\n            cur = tmp; \\n        }\\n\\n        return pre;\\n    }\\n};\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n\\n * 时间复杂度：o（n）\\n * 空间复杂度：o（1）\\n\\n>  2. 递归\\n\\n核心思路没变，利用递归巧妙的对应了双指针 while 循环。\\n\\nclass solution {\\npublic:\\n    listnode* reverse(listnode* pre,listnode* cur) {\\n\\n        // 对应双指针的return pre;\\n        if(cur == null){return pre;}\\n        \\n        listnode* tmp = cur->next;\\n        cur->next = pre;\\n        \\n        // 巧妙的对应\\n        // pre = cur;\\n        // cur = tmp;\\n        return reverse(cur,tmp);\\n\\n    }\\n\\n    listnode* reverselist(listnode* head) {\\n\\n        return reverse(null,head);\\n    }\\n};\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n\\n * 时间复杂度: o (n)\\n * 空间复杂度: o (n)\\n\\n\\n# 总结\\n\\n * 反转：后 -> 前\\n\\n\\n# 总结\\n\\n这次写的时间比较久，在中间设计链表部分卡的时间长，看似链表的那些基础操作容易，自己上手写大大小小的错误就出来了。\\n\\n容易错的点：\\n\\n 1. 忘记删除完元素要 delete，且置为空\\n 2. 是否需要虚拟头节点？\",\n      \"charsets\": {\n        \"cjk\": true\n      }\n    },\n    {\n      \"title\": \"Day00-准备\",\n      \"frontmatter\": {\n        \"title\": \"Day00-准备\",\n        \"date\": \"2023-05-26T23:35:49.000Z\",\n        \"permalink\": \"/pages/fc80dd/\",\n        \"categories\": [\n          \"算法\",\n          \"算法打卡\"\n        ],\n        \"tags\": [\n          null\n        ]\n      },\n      \"regularPath\": \"/02.%E7%AE%97%E6%B3%95/01.%E7%AE%97%E6%B3%95%E6%89%93%E5%8D%A1/00.Day00-%E5%87%86%E5%A4%87.html\",\n      \"relativePath\": \"02.算法/01.算法打卡/00.Day00-准备.md\",\n      \"key\": \"v-2ee9027a\",\n      \"path\": \"/pages/fc80dd/\",\n      \"headers\": [\n        {\n          \"level\": 2,\n          \"title\": \"格式\",\n          \"slug\": \"格式\",\n          \"normalizedTitle\": \"格式\",\n          \"charIndex\": 11\n        },\n        {\n          \"level\": 3,\n          \"title\": \"录前想法\",\n          \"slug\": \"录前想法\",\n          \"normalizedTitle\": \"录前想法\",\n          \"charIndex\": 60\n        },\n        {\n          \"level\": 3,\n          \"title\": \"录后想法\",\n          \"slug\": \"录后想法\",\n          \"normalizedTitle\": \"录后想法\",\n          \"charIndex\": 69\n        },\n        {\n          \"level\": 3,\n          \"title\": \"总结\",\n          \"slug\": \"总结\",\n          \"normalizedTitle\": \"总结\",\n          \"charIndex\": 78\n        },\n        {\n          \"level\": 2,\n          \"title\": \"常用表情\",\n          \"slug\": \"常用表情\",\n          \"normalizedTitle\": \"常用表情\",\n          \"charIndex\": 85\n        }\n      ],\n      \"excerpt\": \"<blockquote>\\n<p>前置准备</p>\\n</blockquote>\\n\",\n      \"lastUpdated\": \"6/2/2023, 6:34:00 PM\",\n      \"lastUpdatedTimestamp\": 1685702040000,\n      \"headersStr\": \"格式 录前想法 录后想法 总结 常用表情\",\n      \"content\": \"> 前置准备\\n\\n\\n# 格式\\n\\n * 题目：704. 二分查找\\n\\n * 讲解：文章讲解、视频讲解\\n\\n * 要求：\\n\\n\\n# 录前想法\\n\\n\\n# 录后想法\\n\\n\\n# 总结\\n\\n\\n# 常用表情\\n\\n❌\\n\\n✔️\\n\\n😂\\n\\n😰\\n\\n😓\\n\\n✌️\\n\\n❗️\\n\\n‼️\",\n      \"normalizedContent\": \"> 前置准备\\n\\n\\n# 格式\\n\\n * 题目：704. 二分查找\\n\\n * 讲解：文章讲解、视频讲解\\n\\n * 要求：\\n\\n\\n# 录前想法\\n\\n\\n# 录后想法\\n\\n\\n# 总结\\n\\n\\n# 常用表情\\n\\n❌\\n\\n✔️\\n\\n😂\\n\\n😰\\n\\n😓\\n\\n✌️\\n\\n❗️\\n\\n‼️\",\n      \"charsets\": {\n        \"cjk\": true\n      }\n    },\n    {\n      \"title\": \"string类型\",\n      \"frontmatter\": {\n        \"title\": \"string类型\",\n        \"date\": \"2023-05-31T14:28:36.000Z\",\n        \"permalink\": \"/pages/b6ba67/\",\n        \"categories\": [\n          \"Go\",\n          \"深入Go\"\n        ],\n        \"tags\": [\n          \"探索-GO\"\n        ]\n      },\n      \"regularPath\": \"/01.Go/03.%E6%B7%B1%E5%85%A5Go/01.string%E7%B1%BB%E5%9E%8B.html\",\n      \"relativePath\": \"01.Go/03.深入Go/01.string类型.md\",\n      \"key\": \"v-2658628c\",\n      \"path\": \"/pages/b6ba67/\",\n      \"headers\": [\n        {\n          \"level\": 2,\n          \"title\": \"字符咋存❓\",\n          \"slug\": \"字符咋存\",\n          \"normalizedTitle\": \"字符咋存❓\",\n          \"charIndex\": 48\n        },\n        {\n          \"level\": 2,\n          \"title\": \"utf8咋编码❓\",\n          \"slug\": \"utf8咋编码\",\n          \"normalizedTitle\": \"utf8 咋编码❓\",\n          \"charIndex\": 112\n        },\n        {\n          \"level\": 3,\n          \"title\": \"定长编码\",\n          \"slug\": \"定长编码\",\n          \"normalizedTitle\": \"定长编码\",\n          \"charIndex\": 174\n        },\n        {\n          \"level\": 3,\n          \"title\": \"变成编码\",\n          \"slug\": \"变成编码\",\n          \"normalizedTitle\": \"变成编码\",\n          \"charIndex\": 185\n        },\n        {\n          \"level\": 3,\n          \"title\": \"总结\",\n          \"slug\": \"总结\",\n          \"normalizedTitle\": \"总结\",\n          \"charIndex\": 407\n        },\n        {\n          \"level\": 2,\n          \"title\": \"string啥结构❓\",\n          \"slug\": \"string啥结构\",\n          \"normalizedTitle\": \"string 啥结构❓\",\n          \"charIndex\": 473\n        },\n        {\n          \"level\": 3,\n          \"title\": \"长度和占用空间\",\n          \"slug\": \"长度和占用空间\",\n          \"normalizedTitle\": \"长度和占用空间\",\n          \"charIndex\": 960\n        }\n      ],\n      \"excerpt\": \"<blockquote>\\n<p>字符咋存？utf8 咋编码？string 啥结构？</p>\\n<p>form：<a href=\\\"https://space.bilibili.com/567195437\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">幼麟实验室<OutboundLink/></a></p>\\n</blockquote>\\n\",\n      \"lastUpdated\": \"6/2/2023, 6:34:00 PM\",\n      \"lastUpdatedTimestamp\": 1685702040000,\n      \"headersStr\": \"字符咋存❓ utf8咋编码❓ 定长编码 变成编码 总结 string啥结构❓ 长度和占用空间\",\n      \"content\": \"> 字符咋存？utf8 咋编码？string 啥结构？\\n> \\n> form：幼麟实验室\\n\\n\\n# 字符咋存❓\\n\\n同样是二进制存储，通过编码（指定特定 01 排列顺序为某一字符）如常见的 ASCII、GBK、UTF-8\\n\\n\\n# utf8 咋编码❓\\n\\n由上面的的问题我们知道了，存储字符本质就是保存编码\\n\\n> 常见的两种保存编码的方式\\n> \\n>  1. 定长编码\\n>  2. 变成编码\\n\\n\\n# 定长编码\\n\\n不管长短都都按最长的编码，可以看出非常的浪费内存，如下图\\n\\n\\n\\n\\n# 变成编码\\n\\n根据特定的前缀编号来存储，如下图\\n\\n\\n\\n小练习\\n\\n字符   十进制     二进制                最终存储\\ne    101     1100101            01100101\\n世    19990   0100111000010110   11100100 10111000 10010110\\n\\n\\n# 总结\\n\\n * 在 Go 语言中默认采用的就是 UTF-8 的编解码方式。\\n\\n * 字符集 + 编码方式 => 正确存储字符\\n\\n\\n# string 啥结构❓\\n\\n核心问题就是：“如何判断字符结束”？\\n\\n * C 语言是有 '\\\\0' 的特定标识符\\n\\n * Go 语言中采用的是：data + len （16 字节）\\n   \\n   type StringHeader struct {\\n       Data uintptr\\n       Len  int\\n   }\\n   \\n   \\n   1\\n   2\\n   3\\n   4\\n   \\n\\n注意\\n\\n 1. 在 Go 语言中，编译器会将字符串内容放入只读内存段，所以不允许修改\\n\\n 2. 字符串变量可以共用底层字符串内容\\n\\n\\n\\n 3. 非要修改\\n    \\n    1. 可以重新赋值\\n    \\n    s1 = \\\"hello\\\"\\n    \\n    \\n    1\\n    \\n    2. 强制类型转换为 slice，原理是重新分配内存并拷贝原来字符串内容\\n    \\n    bs := ([]byte)(s1)\\n    bs[2] = 'o'\\n    fmt.Printf(\\\"%c\\\\n\\\",bs[2])\\n    \\n    \\n    1\\n    2\\n    3\\n    \\n\\n\\n# 长度和占用空间\\n\\n在 Go 语言中，一个 UTF-8 编码的字符可能由 1 到 4 个字节组成，因此字符串的长度和占用的内存空间并不一定相同。\",\n      \"normalizedContent\": \"> 字符咋存？utf8 咋编码？string 啥结构？\\n> \\n> form：幼麟实验室\\n\\n\\n# 字符咋存❓\\n\\n同样是二进制存储，通过编码（指定特定 01 排列顺序为某一字符）如常见的 ascii、gbk、utf-8\\n\\n\\n# utf8 咋编码❓\\n\\n由上面的的问题我们知道了，存储字符本质就是保存编码\\n\\n> 常见的两种保存编码的方式\\n> \\n>  1. 定长编码\\n>  2. 变成编码\\n\\n\\n# 定长编码\\n\\n不管长短都都按最长的编码，可以看出非常的浪费内存，如下图\\n\\n\\n\\n\\n# 变成编码\\n\\n根据特定的前缀编号来存储，如下图\\n\\n\\n\\n小练习\\n\\n字符   十进制     二进制                最终存储\\ne    101     1100101            01100101\\n世    19990   0100111000010110   11100100 10111000 10010110\\n\\n\\n# 总结\\n\\n * 在 go 语言中默认采用的就是 utf-8 的编解码方式。\\n\\n * 字符集 + 编码方式 => 正确存储字符\\n\\n\\n# string 啥结构❓\\n\\n核心问题就是：“如何判断字符结束”？\\n\\n * c 语言是有 '\\\\0' 的特定标识符\\n\\n * go 语言中采用的是：data + len （16 字节）\\n   \\n   type stringheader struct {\\n       data uintptr\\n       len  int\\n   }\\n   \\n   \\n   1\\n   2\\n   3\\n   4\\n   \\n\\n注意\\n\\n 1. 在 go 语言中，编译器会将字符串内容放入只读内存段，所以不允许修改\\n\\n 2. 字符串变量可以共用底层字符串内容\\n\\n\\n\\n 3. 非要修改\\n    \\n    1. 可以重新赋值\\n    \\n    s1 = \\\"hello\\\"\\n    \\n    \\n    1\\n    \\n    2. 强制类型转换为 slice，原理是重新分配内存并拷贝原来字符串内容\\n    \\n    bs := ([]byte)(s1)\\n    bs[2] = 'o'\\n    fmt.printf(\\\"%c\\\\n\\\",bs[2])\\n    \\n    \\n    1\\n    2\\n    3\\n    \\n\\n\\n# 长度和占用空间\\n\\n在 go 语言中，一个 utf-8 编码的字符可能由 1 到 4 个字节组成，因此字符串的长度和占用的内存空间并不一定相同。\",\n      \"charsets\": {\n        \"cjk\": true\n      }\n    },\n    {\n      \"title\": \"Day01-数组\",\n      \"frontmatter\": {\n        \"title\": \"Day01-数组\",\n        \"date\": \"2023-05-24T16:20:33.000Z\",\n        \"permalink\": \"/pages/8aab7b/\",\n        \"categories\": [\n          \"算法\",\n          \"算法打卡\"\n        ],\n        \"tags\": [\n          \"打卡\"\n        ]\n      },\n      \"regularPath\": \"/02.%E7%AE%97%E6%B3%95/01.%E7%AE%97%E6%B3%95%E6%89%93%E5%8D%A1/01.Day01-%E6%95%B0%E7%BB%84.html\",\n      \"relativePath\": \"02.算法/01.算法打卡/01.Day01-数组.md\",\n      \"key\": \"v-6f10ee50\",\n      \"path\": \"/pages/8aab7b/\",\n      \"headers\": [\n        {\n          \"level\": 2,\n          \"title\": \"704.二分查找\",\n          \"slug\": \"_704-二分查找\",\n          \"normalizedTitle\": \"704. 二分查找\",\n          \"charIndex\": 2\n        },\n        {\n          \"level\": 3,\n          \"title\": \"录前想法\",\n          \"slug\": \"录前想法\",\n          \"normalizedTitle\": \"录前想法\",\n          \"charIndex\": 92\n        },\n        {\n          \"level\": 3,\n          \"title\": \"录后想法\",\n          \"slug\": \"录后想法\",\n          \"normalizedTitle\": \"录后想法\",\n          \"charIndex\": 1265\n        },\n        {\n          \"level\": 3,\n          \"title\": \"困难点\",\n          \"slug\": \"困难点\",\n          \"normalizedTitle\": \"困难点\",\n          \"charIndex\": 1428\n        },\n        {\n          \"level\": 2,\n          \"title\": \"27. 移除元素\",\n          \"slug\": \"_27-移除元素\",\n          \"normalizedTitle\": \"27. 移除元素\",\n          \"charIndex\": 12\n        },\n        {\n          \"level\": 3,\n          \"title\": \"录前想法\",\n          \"slug\": \"录前想法-2\",\n          \"normalizedTitle\": \"录前想法\",\n          \"charIndex\": 92\n        },\n        {\n          \"level\": 3,\n          \"title\": \"录后想法\",\n          \"slug\": \"录后想法-2\",\n          \"normalizedTitle\": \"录后想法\",\n          \"charIndex\": 1265\n        },\n        {\n          \"level\": 3,\n          \"title\": \"困难点\",\n          \"slug\": \"困难点-2\",\n          \"normalizedTitle\": \"困难点\",\n          \"charIndex\": 1428\n        },\n        {\n          \"level\": 2,\n          \"title\": \"拓展\",\n          \"slug\": \"拓展\",\n          \"normalizedTitle\": \"拓展\",\n          \"charIndex\": 4067\n        },\n        {\n          \"level\": 3,\n          \"title\": \"35.搜索插入位置\",\n          \"slug\": \"_35-搜索插入位置\",\n          \"normalizedTitle\": \"35. 搜索插入位置\",\n          \"charIndex\": 4074\n        },\n        {\n          \"level\": 3,\n          \"title\": \"34. 在排序数组中查找元素的第一个和最后一个位置\",\n          \"slug\": \"_34-在排序数组中查找元素的第一个和最后一个位置\",\n          \"normalizedTitle\": \"34. 在排序数组中查找元素的第一个和最后一个位置\",\n          \"charIndex\": 4089\n        },\n        {\n          \"level\": 2,\n          \"title\": \"总结\",\n          \"slug\": \"总结\",\n          \"normalizedTitle\": \"总结\",\n          \"charIndex\": 4119\n        }\n      ],\n      \"excerpt\": \"<blockquote>\\n<p>704. 二分查找、27. 移除元素</p>\\n</blockquote>\\n\",\n      \"lastUpdated\": \"5/25/2023, 1:19:01 AM\",\n      \"lastUpdatedTimestamp\": 1684948741000,\n      \"headersStr\": \"704.二分查找 录前想法 录后想法 困难点 27. 移除元素 录前想法 录后想法 困难点 拓展 35.搜索插入位置 34. 在排序数组中查找元素的第一个和最后一个位置 总结\",\n      \"content\": \"> 704. 二分查找、27. 移除元素\\n\\n\\n# 704. 二分查找\\n\\n * 题目：704. 二分查找\\n\\n * 讲解：文章讲解、视频讲解\\n\\n * 要求：熟悉左闭右开，左闭右闭\\n\\n\\n# 录前想法\\n\\n * 首先二分查找的前置条件是已排序。\\n\\n * 其次为什么会有左闭右开与左开右闭的区分，我认为是奇数个数除 2 后偏左与偏右的问题\\n\\n * 😢不明白为什么 mid = l + (r - l) >> 1 会超时？\\n   \\n   * 因为少了括号【 ((r - l) >> 1) 】\\n\\n> 左闭右开\\n\\nclass Solution {\\npublic:\\n    int search(vector<int>& nums, int target) {\\n        int l = 0,r = nums.size(),mid = 0;\\n\\n        while( l < r){\\n            mid = l + (r - l) / 2;\\n            //mid = l + ((r - l) >> 1);\\n            if (nums[mid] > target){\\n                r = mid;\\n            }else if(nums[mid] < target){\\n                l = mid + 1;\\n            }else{\\n                return mid;\\n            }\\n        }\\n        return -1;\\n    }\\n};\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n\\n\\n> 左闭右闭\\n\\nclass Solution {\\npublic:\\n    int search(vector<int>& nums, int target) {\\n        int l = 0,r = nums.size()-1,mid = 0;\\n\\n        while( l <= r ){\\n            mid = l + (r - l) / 2;\\n            //mid = l + ((r - l) >> 1);\\n            if (nums[mid] > target){\\n                r = mid - 1;\\n            }else if(nums[mid] < target){\\n                l = mid + 1;\\n            }else{\\n                return mid;\\n            }\\n        }\\n        return -1;\\n    }\\n};\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n\\n\\n\\n# 录后想法\\n\\n 1. 对右开和右闭理解的更深刻了，我是这么理解的\\n    \\n    1. 右闭说明取得到 right, 如果 mid 取不到，则 right = mid - 1\\n    2. 右开说明取不到 right, 如果 mid 取不到，则 right = mid\\n\\n 2. 时间复杂度，写完一个算法要表明复杂度\\n\\n\\n# 困难点\\n\\n> 为什么 mid = l + (r - l) >> 1 会超时，而 mid = l + (r - l) / 2 不会？\\n\\n因为，mid = l + (r - l) >> 1 需要加上括号： mid = l + ((r - l) >> 1)\\n\\n\\n# 27. 移除元素\\n\\n * 题目：27. 移除元素\\n\\n * 讲解：文章讲解、视频讲解\\n\\n * 要求：先暴力后双指针\\n\\n\\n# 录前想法\\n\\n暴力解法，移动元素，问题卡在出现重复元素时，一直会留着一个元素，以下是我的代码（错误代码❌）\\n\\nclass Solution {\\npublic:\\n    int removeElement(vector<int>& nums, int val) {\\n        int size = nums.size();\\n\\n        for (int i = 0;i < size;++i){\\n            if (nums[i] == val){\\n                for (int j = i;j < size - 1;++j){\\n                    nums[j] = nums[j+1];\\n                }\\n                --size;\\n            }\\n        }\\n        return size;\\n    }\\n};\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n\\n\\n\\n# 录后想法\\n\\n 1. 暴力解法\\n\\n看过讲解后发先是让 i 直接前进了，没有考虑到覆盖上来的元素可能是待删除的值，(正确代码✅)\\n\\nclass Solution {\\npublic:\\n    int removeElement(vector<int>& nums, int val) {\\n        int size = nums.size();\\n\\n        for (int i = 0;i < size;++i){\\n            if (nums[i] == val){\\n                for (int j = i;j < size - 1;++j){\\n                    nums[j] = nums[j+1];\\n                }\\n                --size;\\n                --i;\\n            }\\n        }\\n\\n        return size;\\n    }\\n};\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n\\n * 时间复杂度：O (n^2)\\n * 空间复杂度：O (1)\\n\\n 2. 双指针\\n\\n双指针法（快慢指针法）： 通过一个快指针和慢指针在一个 for 循环下完成两个 for 循环的工作。\\n\\n定义快慢指针\\n\\n * 快指针：用于更新\\n * 慢指针：被更新\\n\\nclass Solution {\\npublic:\\n    int removeElement(vector<int>& nums, int val) {\\n        int size = nums.size();\\n        int slow = 0;\\n\\n        for (int fast = 0; fast < size; ++fast){\\n            // 这个 != 可以写的这么简洁！\\n            if (nums[fast] != val){\\n               nums[slow++] = nums[fast];\\n            }\\n        }\\n\\n        return slow;\\n    }\\n};\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n\\n * 时间复杂度：O (n)\\n * 空间复杂度：O (1)\\n\\n 3. 相向双指针方法\\n\\n基于元素顺序可以改变的题目描述改变了元素相对位置，确保了移动最少元素。\\n\\n操作如下：\\n\\n * 找左边等于 val 的元素\\n * 找右边不等于 val 的元素\\n * 将右边不等于 val 的元素覆盖左边等于 val 的元素\\n\\nclass Solution {\\npublic:\\n    int removeElement(vector<int>& nums, int val) {\\n        int size = nums.size();\\n        int right = size - 1,left = 0;\\n\\n        while(left <= right){\\n            // 找左边等于val的元素\\n            while(left <= right && nums[left] != val){ \\n                ++left; \\n            }\\n            // 找右边不等于val的元素\\n            while(left <= right && nums[right] == val){\\n                --right;\\n            }\\n            // 将右边不等于val的元素覆盖左边等于val的元素\\n            if(left <= right){\\n                nums[left++] = nums[right--];\\n            }\\n       }\\n\\n       return left; // nums[left++],刚好指向了下一个元素，下标 = 元素个数\\n        \\t\\t\\t// right指向上一个元素，需要+1\\n    }\\n};\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n\\n\\n\\n# 困难点\\n\\n 1. 暴力移动元素时考虑不完善，没有考虑到挨着的重复元素，直接 ++i 跳过了。\\n 2. 双指针中！= 写法很简洁，没有想到\\n\\n\\n# 拓展\\n\\n\\n# 35. 搜索插入位置\\n\\n\\n# 34. 在排序数组中查找元素的第一个和最后一个位置\\n\\n\\n# 总结\\n\\n 1. 数组的元素是不能删的，只能覆盖。\\n 2. 细节考虑不周。\",\n      \"normalizedContent\": \"> 704. 二分查找、27. 移除元素\\n\\n\\n# 704. 二分查找\\n\\n * 题目：704. 二分查找\\n\\n * 讲解：文章讲解、视频讲解\\n\\n * 要求：熟悉左闭右开，左闭右闭\\n\\n\\n# 录前想法\\n\\n * 首先二分查找的前置条件是已排序。\\n\\n * 其次为什么会有左闭右开与左开右闭的区分，我认为是奇数个数除 2 后偏左与偏右的问题\\n\\n * 😢不明白为什么 mid = l + (r - l) >> 1 会超时？\\n   \\n   * 因为少了括号【 ((r - l) >> 1) 】\\n\\n> 左闭右开\\n\\nclass solution {\\npublic:\\n    int search(vector<int>& nums, int target) {\\n        int l = 0,r = nums.size(),mid = 0;\\n\\n        while( l < r){\\n            mid = l + (r - l) / 2;\\n            //mid = l + ((r - l) >> 1);\\n            if (nums[mid] > target){\\n                r = mid;\\n            }else if(nums[mid] < target){\\n                l = mid + 1;\\n            }else{\\n                return mid;\\n            }\\n        }\\n        return -1;\\n    }\\n};\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n\\n\\n> 左闭右闭\\n\\nclass solution {\\npublic:\\n    int search(vector<int>& nums, int target) {\\n        int l = 0,r = nums.size()-1,mid = 0;\\n\\n        while( l <= r ){\\n            mid = l + (r - l) / 2;\\n            //mid = l + ((r - l) >> 1);\\n            if (nums[mid] > target){\\n                r = mid - 1;\\n            }else if(nums[mid] < target){\\n                l = mid + 1;\\n            }else{\\n                return mid;\\n            }\\n        }\\n        return -1;\\n    }\\n};\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n\\n\\n\\n# 录后想法\\n\\n 1. 对右开和右闭理解的更深刻了，我是这么理解的\\n    \\n    1. 右闭说明取得到 right, 如果 mid 取不到，则 right = mid - 1\\n    2. 右开说明取不到 right, 如果 mid 取不到，则 right = mid\\n\\n 2. 时间复杂度，写完一个算法要表明复杂度\\n\\n\\n# 困难点\\n\\n> 为什么 mid = l + (r - l) >> 1 会超时，而 mid = l + (r - l) / 2 不会？\\n\\n因为，mid = l + (r - l) >> 1 需要加上括号： mid = l + ((r - l) >> 1)\\n\\n\\n# 27. 移除元素\\n\\n * 题目：27. 移除元素\\n\\n * 讲解：文章讲解、视频讲解\\n\\n * 要求：先暴力后双指针\\n\\n\\n# 录前想法\\n\\n暴力解法，移动元素，问题卡在出现重复元素时，一直会留着一个元素，以下是我的代码（错误代码❌）\\n\\nclass solution {\\npublic:\\n    int removeelement(vector<int>& nums, int val) {\\n        int size = nums.size();\\n\\n        for (int i = 0;i < size;++i){\\n            if (nums[i] == val){\\n                for (int j = i;j < size - 1;++j){\\n                    nums[j] = nums[j+1];\\n                }\\n                --size;\\n            }\\n        }\\n        return size;\\n    }\\n};\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n\\n\\n\\n# 录后想法\\n\\n 1. 暴力解法\\n\\n看过讲解后发先是让 i 直接前进了，没有考虑到覆盖上来的元素可能是待删除的值，(正确代码✅)\\n\\nclass solution {\\npublic:\\n    int removeelement(vector<int>& nums, int val) {\\n        int size = nums.size();\\n\\n        for (int i = 0;i < size;++i){\\n            if (nums[i] == val){\\n                for (int j = i;j < size - 1;++j){\\n                    nums[j] = nums[j+1];\\n                }\\n                --size;\\n                --i;\\n            }\\n        }\\n\\n        return size;\\n    }\\n};\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n\\n * 时间复杂度：o (n^2)\\n * 空间复杂度：o (1)\\n\\n 2. 双指针\\n\\n双指针法（快慢指针法）： 通过一个快指针和慢指针在一个 for 循环下完成两个 for 循环的工作。\\n\\n定义快慢指针\\n\\n * 快指针：用于更新\\n * 慢指针：被更新\\n\\nclass solution {\\npublic:\\n    int removeelement(vector<int>& nums, int val) {\\n        int size = nums.size();\\n        int slow = 0;\\n\\n        for (int fast = 0; fast < size; ++fast){\\n            // 这个 != 可以写的这么简洁！\\n            if (nums[fast] != val){\\n               nums[slow++] = nums[fast];\\n            }\\n        }\\n\\n        return slow;\\n    }\\n};\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n\\n * 时间复杂度：o (n)\\n * 空间复杂度：o (1)\\n\\n 3. 相向双指针方法\\n\\n基于元素顺序可以改变的题目描述改变了元素相对位置，确保了移动最少元素。\\n\\n操作如下：\\n\\n * 找左边等于 val 的元素\\n * 找右边不等于 val 的元素\\n * 将右边不等于 val 的元素覆盖左边等于 val 的元素\\n\\nclass solution {\\npublic:\\n    int removeelement(vector<int>& nums, int val) {\\n        int size = nums.size();\\n        int right = size - 1,left = 0;\\n\\n        while(left <= right){\\n            // 找左边等于val的元素\\n            while(left <= right && nums[left] != val){ \\n                ++left; \\n            }\\n            // 找右边不等于val的元素\\n            while(left <= right && nums[right] == val){\\n                --right;\\n            }\\n            // 将右边不等于val的元素覆盖左边等于val的元素\\n            if(left <= right){\\n                nums[left++] = nums[right--];\\n            }\\n       }\\n\\n       return left; // nums[left++],刚好指向了下一个元素，下标 = 元素个数\\n        \\t\\t\\t// right指向上一个元素，需要+1\\n    }\\n};\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n\\n\\n\\n# 困难点\\n\\n 1. 暴力移动元素时考虑不完善，没有考虑到挨着的重复元素，直接 ++i 跳过了。\\n 2. 双指针中！= 写法很简洁，没有想到\\n\\n\\n# 拓展\\n\\n\\n# 35. 搜索插入位置\\n\\n\\n# 34. 在排序数组中查找元素的第一个和最后一个位置\\n\\n\\n# 总结\\n\\n 1. 数组的元素是不能删的，只能覆盖。\\n 2. 细节考虑不周。\",\n      \"charsets\": {\n        \"cjk\": true\n      }\n    },\n    {\n      \"title\": \"Day02-数组\",\n      \"frontmatter\": {\n        \"title\": \"Day02-数组\",\n        \"date\": \"2023-05-25T01:28:41.000Z\",\n        \"permalink\": \"/pages/f2d3aa/\",\n        \"categories\": [\n          \"算法\",\n          \"算法打卡\"\n        ],\n        \"tags\": [\n          \"打卡\"\n        ]\n      },\n      \"regularPath\": \"/02.%E7%AE%97%E6%B3%95/01.%E7%AE%97%E6%B3%95%E6%89%93%E5%8D%A1/02.Day02-%E6%95%B0%E7%BB%84.html\",\n      \"relativePath\": \"02.算法/01.算法打卡/02.Day02-数组.md\",\n      \"key\": \"v-21be97d0\",\n      \"path\": \"/pages/f2d3aa/\",\n      \"headers\": [\n        {\n          \"level\": 2,\n          \"title\": \"977.有序数组的平方\",\n          \"slug\": \"_977-有序数组的平方\",\n          \"normalizedTitle\": \"977. 有序数组的平方\",\n          \"charIndex\": 2\n        },\n        {\n          \"level\": 3,\n          \"title\": \"录前想法\",\n          \"slug\": \"录前想法\",\n          \"normalizedTitle\": \"录前想法\",\n          \"charIndex\": 120\n        },\n        {\n          \"level\": 3,\n          \"title\": \"录后想法\",\n          \"slug\": \"录后想法\",\n          \"normalizedTitle\": \"录后想法\",\n          \"charIndex\": 1382\n        },\n        {\n          \"level\": 3,\n          \"title\": \"困难点\",\n          \"slug\": \"困难点\",\n          \"normalizedTitle\": \"困难点\",\n          \"charIndex\": 2110\n        },\n        {\n          \"level\": 2,\n          \"title\": \"209.长度最小的子数组\",\n          \"slug\": \"_209-长度最小的子数组\",\n          \"normalizedTitle\": \"209. 长度最小的子数组\",\n          \"charIndex\": 16\n        },\n        {\n          \"level\": 3,\n          \"title\": \"录前想法\",\n          \"slug\": \"录前想法-2\",\n          \"normalizedTitle\": \"录前想法\",\n          \"charIndex\": 120\n        },\n        {\n          \"level\": 3,\n          \"title\": \"录后想法\",\n          \"slug\": \"录后想法-2\",\n          \"normalizedTitle\": \"录后想法\",\n          \"charIndex\": 1382\n        },\n        {\n          \"level\": 3,\n          \"title\": \"困难点\",\n          \"slug\": \"困难点-2\",\n          \"normalizedTitle\": \"困难点\",\n          \"charIndex\": 2110\n        },\n        {\n          \"level\": 2,\n          \"title\": \"59.螺旋矩阵II\",\n          \"slug\": \"_59-螺旋矩阵ii\",\n          \"normalizedTitle\": \"59. 螺旋矩阵 ii\",\n          \"charIndex\": 31\n        },\n        {\n          \"level\": 3,\n          \"title\": \"录前想法\",\n          \"slug\": \"录前想法-3\",\n          \"normalizedTitle\": \"录前想法\",\n          \"charIndex\": 120\n        },\n        {\n          \"level\": 3,\n          \"title\": \"录后想法\",\n          \"slug\": \"录后想法-3\",\n          \"normalizedTitle\": \"录后想法\",\n          \"charIndex\": 1382\n        },\n        {\n          \"level\": 3,\n          \"title\": \"困难点\",\n          \"slug\": \"困难点-3\",\n          \"normalizedTitle\": \"困难点\",\n          \"charIndex\": 2110\n        },\n        {\n          \"level\": 2,\n          \"title\": \"总结\",\n          \"slug\": \"总结\",\n          \"normalizedTitle\": \"总结\",\n          \"charIndex\": 44\n        }\n      ],\n      \"excerpt\": \"<blockquote>\\n<p>977. 有序数组的平方 、209. 长度最小的子数组 、59. 螺旋矩阵 II 、总结</p>\\n</blockquote>\\n\",\n      \"lastUpdated\": \"6/2/2023, 6:34:00 PM\",\n      \"lastUpdatedTimestamp\": 1685702040000,\n      \"headersStr\": \"977.有序数组的平方 录前想法 录后想法 困难点 209.长度最小的子数组 录前想法 录后想法 困难点 59.螺旋矩阵II 录前想法 录后想法 困难点 总结\",\n      \"content\": \"> 977. 有序数组的平方 、209. 长度最小的子数组 、59. 螺旋矩阵 II 、总结\\n\\n\\n# 977. 有序数组的平方\\n\\n * 题目：977. 有序数组的平方\\n\\n * 讲解：文章讲解、视频讲解\\n\\n * 要求：理解双指针思想\\n\\n\\n# 录前想法\\n\\n我的思路是用双指针，找到负数的最大值，正数的最小值，然后交换，不额外申请新的空间【未实现❌】\\n\\n类似冒牌排序，将大的元素冒泡上去。\\n\\nclass Solution {\\npublic:\\n    vector<int> sortedSquares(vector<int>& nums) {\\n        int fast = 0,slow = 0;\\n        int size = nums.size();\\n        int tmp = 0;\\n\\n        if (nums[fast] >= 0){\\n            return plus(nums,size);\\n        }else{\\n            // 找到第一个正数，包括0\\n            while(nums[fast] < 0){++fast;}\\n        }\\n\\n        for(;fast < size,slow > 0;){\\n            // -4 -1 0 3 10\\n            // -4  0 1 3 10 \\n            // 0   4 1 3 10\\n            // 0   1 4 3 10\\n            // 0   1 3 4 10\\n            // 平方\\n            if(nums[fast] < -nums[slow]){\\n                tmp = nums[fast];\\n                nums[fast] = -nums[slow];\\n                nums[slow] = tmp;\\n                --slow;\\n            }else{\\n                tmp = nums[fast];\\n                nums[fast] = -nums[slow];\\n                nums[slow] = tmp;\\n            }\\n        }\\n\\n        return plus(nums,size);\\n    }\\n\\n    vector<int> plus(vector<int>& nums,int size){\\n\\n        for(int i = 0;i < size;++i){\\n            nums[i] = nums[i]*nums[i];\\n        }\\n\\n        return nums;\\n    }\\n};\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n\\n\\n\\n# 录后想法\\n\\n看完卡哥的题解后发现自己写的有点画蛇添足，冒泡不如暴力自带的排序时间复杂度低😥\\n\\n发现随想录里的双指针是用了额外空间的，下次练习要先考虑 AC 再考虑优化。\\n\\n\\n\\nclass Solution {\\npublic:\\n    vector<int> sortedSquares(vector<int>& nums) {\\n       \\n       int size = nums.size();\\n       // 额外空间\\n       vector<int> ans(size,0);\\n       // 指向最大元素\\n       int p = size - 1;\\n\\n       for(int left = 0,right = p;left <= right;){\\n           if(nums[left]*nums[left] < nums[right]*nums[right]){\\n               ans[p--] = nums[right]*nums[right];\\n               --right;\\n           }else{\\n                ans[p--] = nums[left]*nums[left];\\n                ++left;\\n           }\\n       }\\n\\n       return ans;\\n    }\\n\\n};\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n\\n * 时间复杂度：O (n)\\n * 空间复杂度：O (n)\\n\\n\\n# 困难点\\n\\n * 想不到双指针的移动\\n\\n\\n# 209. 长度最小的子数组\\n\\n * 题目：209. 长度最小的子数组\\n\\n * 讲解：文章讲解、视频讲解\\n\\n * 要求：理解滑动窗口\\n\\n\\n# 录前想法\\n\\n我的思路：先排序然后从小到大不断缩小范围找到最小子数组\\n\\nclass Solution {\\npublic:\\n    int minSubArrayLen(int target, vector<int>& nums) {\\n\\n        int size = nums.size();\\n        \\n        // 排序\\n        sort(nums.begin(), nums.end());\\n\\n        // 双指针\\n        int ans = size + 1,sum = 0;\\n\\n        for (int left = 0,right = 0; right < nums.size(); ++right){\\n            sum += nums[right]; \\n            while(sum >= target){\\n                ans = min(right - left + 1,ans);\\n                sum -= nums[left++];\\n            }\\n        }\\n\\n        if (ans == size + 1){\\n            return 0;\\n        }else{\\n            return ans;\\n        }\\n        \\n    }\\n\\n    int min(int a,int b){\\n        return a > b ? b : a;\\n    }\\n};\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n\\n * 时间复杂度：O (n)\\n * 空间复杂度：O (1)\\n\\n没有通过，卡在了第 17 个测试用例\\n\\n213\\n[12,28,83,4,25,26,25,2,25,25,25,12]\\n// 正确 8\\n// 我的 7\\n\\n\\n1\\n2\\n3\\n4\\n\\n\\n经过排查，发现是因为排序导致了顺序出错了，不能排序\\n\\n将 sort 注释即通过\\n\\n\\n# 录后想法\\n\\n和卡哥的思路相同，在写法有不同，主要是在三目运算。\\n\\n修改后代码如下\\n\\nclass Solution {\\npublic:\\n    int minSubArrayLen(int target, vector<int>& nums) {\\n\\n        int size = nums.size();\\n        int ans = size + 1,sum = 0,tmpSub = 0;\\n\\n        // 双指针\\n        for (int left = 0,right = 0; right < nums.size(); ++right){\\n            sum += nums[right]; \\n            while(sum >= target){\\n                // 窗口内元素\\n                tmpSub = right - left + 1;\\n                ans = tmpSub > ans ? ans : tmpSub;\\n                sum -= nums[left++];\\n            }\\n        }\\n\\n        return ans == size + 1 ? 0 : ans;        \\n    }\\n};\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n\\n * 时间复杂度：O (n)\\n * 空间复杂度：O (1)\\n\\n\\n# 困难点\\n\\n * 顺序是否可以被打乱（排序）\\n\\n\\n# 59. 螺旋矩阵 II\\n\\n * 题目：59. 螺旋矩阵 II\\n * 讲解：文章讲解、视频讲解\\n * 要求：转圈的逻辑和区间定义\\n\\n\\n# 录前想法\\n\\n分为四部，然后通过判断需要循环的圈数为 n/2 ，直接 AC\\n\\nclass Solution {\\npublic:\\n    vector<vector<int>> generateMatrix(int n) {\\n        // 定义结果集\\n        vector<vector<int>> ans(n, vector<int>(n, 0));\\n        int left = 0, up = 0,sum = 1;\\n\\n        for(int j = 0; j <= n/2; j++){\\n            // 左 -> 右\\n            for(int i = left; i < n - left; ++i ){\\n                ans[left][i] = sum++;\\n            }\\n            ++left;\\n\\n            // 上 -> 下\\n            for(int i = up + 1; i < n - up; ++i ){\\n                ans[i][n - up - 1] = sum++;\\n            }\\n            ++up;\\n\\n            // 右 -> 左\\n            for(int i = n - left - 1; i >= left - 1; --i){\\n                ans[n - left][i] = sum++;\\n            }\\n\\n            // 下 -> 上\\n            for(int i = n - up - 1; i >= up; --i){\\n                ans[i][up - 1] = sum++;\\n            }\\n        }\\n\\n        return ans;\\n    }\\n};\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n\\n * 时间复杂度 O (n^2)\\n * 空间复杂度 O (1)\\n\\n\\n# 录后想法\\n\\n和卡哥思路差不多🆗\\n\\n\\n# 困难点\\n\\n * 需要仔细判断从哪开始到哪结束\\n\\n\\n# 总结\\n\\n 1. 先考虑完成题目\\n 2. 双指针需要灵活使用，不能死板\\n 3. 注意条件中顺序是否能被打乱（排序）\",\n      \"normalizedContent\": \"> 977. 有序数组的平方 、209. 长度最小的子数组 、59. 螺旋矩阵 ii 、总结\\n\\n\\n# 977. 有序数组的平方\\n\\n * 题目：977. 有序数组的平方\\n\\n * 讲解：文章讲解、视频讲解\\n\\n * 要求：理解双指针思想\\n\\n\\n# 录前想法\\n\\n我的思路是用双指针，找到负数的最大值，正数的最小值，然后交换，不额外申请新的空间【未实现❌】\\n\\n类似冒牌排序，将大的元素冒泡上去。\\n\\nclass solution {\\npublic:\\n    vector<int> sortedsquares(vector<int>& nums) {\\n        int fast = 0,slow = 0;\\n        int size = nums.size();\\n        int tmp = 0;\\n\\n        if (nums[fast] >= 0){\\n            return plus(nums,size);\\n        }else{\\n            // 找到第一个正数，包括0\\n            while(nums[fast] < 0){++fast;}\\n        }\\n\\n        for(;fast < size,slow > 0;){\\n            // -4 -1 0 3 10\\n            // -4  0 1 3 10 \\n            // 0   4 1 3 10\\n            // 0   1 4 3 10\\n            // 0   1 3 4 10\\n            // 平方\\n            if(nums[fast] < -nums[slow]){\\n                tmp = nums[fast];\\n                nums[fast] = -nums[slow];\\n                nums[slow] = tmp;\\n                --slow;\\n            }else{\\n                tmp = nums[fast];\\n                nums[fast] = -nums[slow];\\n                nums[slow] = tmp;\\n            }\\n        }\\n\\n        return plus(nums,size);\\n    }\\n\\n    vector<int> plus(vector<int>& nums,int size){\\n\\n        for(int i = 0;i < size;++i){\\n            nums[i] = nums[i]*nums[i];\\n        }\\n\\n        return nums;\\n    }\\n};\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n\\n\\n\\n# 录后想法\\n\\n看完卡哥的题解后发现自己写的有点画蛇添足，冒泡不如暴力自带的排序时间复杂度低😥\\n\\n发现随想录里的双指针是用了额外空间的，下次练习要先考虑 ac 再考虑优化。\\n\\n\\n\\nclass solution {\\npublic:\\n    vector<int> sortedsquares(vector<int>& nums) {\\n       \\n       int size = nums.size();\\n       // 额外空间\\n       vector<int> ans(size,0);\\n       // 指向最大元素\\n       int p = size - 1;\\n\\n       for(int left = 0,right = p;left <= right;){\\n           if(nums[left]*nums[left] < nums[right]*nums[right]){\\n               ans[p--] = nums[right]*nums[right];\\n               --right;\\n           }else{\\n                ans[p--] = nums[left]*nums[left];\\n                ++left;\\n           }\\n       }\\n\\n       return ans;\\n    }\\n\\n};\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n\\n * 时间复杂度：o (n)\\n * 空间复杂度：o (n)\\n\\n\\n# 困难点\\n\\n * 想不到双指针的移动\\n\\n\\n# 209. 长度最小的子数组\\n\\n * 题目：209. 长度最小的子数组\\n\\n * 讲解：文章讲解、视频讲解\\n\\n * 要求：理解滑动窗口\\n\\n\\n# 录前想法\\n\\n我的思路：先排序然后从小到大不断缩小范围找到最小子数组\\n\\nclass solution {\\npublic:\\n    int minsubarraylen(int target, vector<int>& nums) {\\n\\n        int size = nums.size();\\n        \\n        // 排序\\n        sort(nums.begin(), nums.end());\\n\\n        // 双指针\\n        int ans = size + 1,sum = 0;\\n\\n        for (int left = 0,right = 0; right < nums.size(); ++right){\\n            sum += nums[right]; \\n            while(sum >= target){\\n                ans = min(right - left + 1,ans);\\n                sum -= nums[left++];\\n            }\\n        }\\n\\n        if (ans == size + 1){\\n            return 0;\\n        }else{\\n            return ans;\\n        }\\n        \\n    }\\n\\n    int min(int a,int b){\\n        return a > b ? b : a;\\n    }\\n};\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n\\n * 时间复杂度：o (n)\\n * 空间复杂度：o (1)\\n\\n没有通过，卡在了第 17 个测试用例\\n\\n213\\n[12,28,83,4,25,26,25,2,25,25,25,12]\\n// 正确 8\\n// 我的 7\\n\\n\\n1\\n2\\n3\\n4\\n\\n\\n经过排查，发现是因为排序导致了顺序出错了，不能排序\\n\\n将 sort 注释即通过\\n\\n\\n# 录后想法\\n\\n和卡哥的思路相同，在写法有不同，主要是在三目运算。\\n\\n修改后代码如下\\n\\nclass solution {\\npublic:\\n    int minsubarraylen(int target, vector<int>& nums) {\\n\\n        int size = nums.size();\\n        int ans = size + 1,sum = 0,tmpsub = 0;\\n\\n        // 双指针\\n        for (int left = 0,right = 0; right < nums.size(); ++right){\\n            sum += nums[right]; \\n            while(sum >= target){\\n                // 窗口内元素\\n                tmpsub = right - left + 1;\\n                ans = tmpsub > ans ? ans : tmpsub;\\n                sum -= nums[left++];\\n            }\\n        }\\n\\n        return ans == size + 1 ? 0 : ans;        \\n    }\\n};\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n\\n * 时间复杂度：o (n)\\n * 空间复杂度：o (1)\\n\\n\\n# 困难点\\n\\n * 顺序是否可以被打乱（排序）\\n\\n\\n# 59. 螺旋矩阵 ii\\n\\n * 题目：59. 螺旋矩阵 ii\\n * 讲解：文章讲解、视频讲解\\n * 要求：转圈的逻辑和区间定义\\n\\n\\n# 录前想法\\n\\n分为四部，然后通过判断需要循环的圈数为 n/2 ，直接 ac\\n\\nclass solution {\\npublic:\\n    vector<vector<int>> generatematrix(int n) {\\n        // 定义结果集\\n        vector<vector<int>> ans(n, vector<int>(n, 0));\\n        int left = 0, up = 0,sum = 1;\\n\\n        for(int j = 0; j <= n/2; j++){\\n            // 左 -> 右\\n            for(int i = left; i < n - left; ++i ){\\n                ans[left][i] = sum++;\\n            }\\n            ++left;\\n\\n            // 上 -> 下\\n            for(int i = up + 1; i < n - up; ++i ){\\n                ans[i][n - up - 1] = sum++;\\n            }\\n            ++up;\\n\\n            // 右 -> 左\\n            for(int i = n - left - 1; i >= left - 1; --i){\\n                ans[n - left][i] = sum++;\\n            }\\n\\n            // 下 -> 上\\n            for(int i = n - up - 1; i >= up; --i){\\n                ans[i][up - 1] = sum++;\\n            }\\n        }\\n\\n        return ans;\\n    }\\n};\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n\\n * 时间复杂度 o (n^2)\\n * 空间复杂度 o (1)\\n\\n\\n# 录后想法\\n\\n和卡哥思路差不多🆗\\n\\n\\n# 困难点\\n\\n * 需要仔细判断从哪开始到哪结束\\n\\n\\n# 总结\\n\\n 1. 先考虑完成题目\\n 2. 双指针需要灵活使用，不能死板\\n 3. 注意条件中顺序是否能被打乱（排序）\",\n      \"charsets\": {\n        \"cjk\": true\n      }\n    },\n    {\n      \"title\": \"Day04-链表\",\n      \"frontmatter\": {\n        \"title\": \"Day04-链表\",\n        \"date\": \"2023-05-27T00:19:58.000Z\",\n        \"permalink\": \"/pages/115af7/\",\n        \"categories\": [\n          \"算法\",\n          \"算法打卡\"\n        ],\n        \"tags\": [\n          \"打卡\"\n        ]\n      },\n      \"regularPath\": \"/02.%E7%AE%97%E6%B3%95/01.%E7%AE%97%E6%B3%95%E6%89%93%E5%8D%A1/04.Day04-%E9%93%BE%E8%A1%A8.html\",\n      \"relativePath\": \"02.算法/01.算法打卡/04.Day04-链表.md\",\n      \"key\": \"v-72f05d08\",\n      \"path\": \"/pages/115af7/\",\n      \"headers\": [\n        {\n          \"level\": 2,\n          \"title\": \"24. 两两交换链表中的节点\",\n          \"slug\": \"_24-两两交换链表中的节点\",\n          \"normalizedTitle\": \"24. 两两交换链表中的节点\",\n          \"charIndex\": 2\n        },\n        {\n          \"level\": 3,\n          \"title\": \"录前想法\",\n          \"slug\": \"录前想法\",\n          \"normalizedTitle\": \"录前想法\",\n          \"charIndex\": 141\n        },\n        {\n          \"level\": 3,\n          \"title\": \"录后想法\",\n          \"slug\": \"录后想法\",\n          \"normalizedTitle\": \"录后想法\",\n          \"charIndex\": 1883\n        },\n        {\n          \"level\": 3,\n          \"title\": \"总结\",\n          \"slug\": \"总结\",\n          \"normalizedTitle\": \"总结\",\n          \"charIndex\": 965\n        },\n        {\n          \"level\": 2,\n          \"title\": \"19.删除链表的倒数第N个节点\",\n          \"slug\": \"_19-删除链表的倒数第n个节点\",\n          \"normalizedTitle\": \"19. 删除链表的倒数第 n 个节点\",\n          \"charIndex\": 17\n        },\n        {\n          \"level\": 3,\n          \"title\": \"录前想法\",\n          \"slug\": \"录前想法-2\",\n          \"normalizedTitle\": \"录前想法\",\n          \"charIndex\": 141\n        },\n        {\n          \"level\": 3,\n          \"title\": \"录后想法\",\n          \"slug\": \"录后想法-2\",\n          \"normalizedTitle\": \"录后想法\",\n          \"charIndex\": 1883\n        },\n        {\n          \"level\": 3,\n          \"title\": \"总结\",\n          \"slug\": \"总结-2\",\n          \"normalizedTitle\": \"总结\",\n          \"charIndex\": 965\n        },\n        {\n          \"level\": 2,\n          \"title\": \"面试题 02.07. 链表相交\",\n          \"slug\": \"面试题-02-07-链表相交\",\n          \"normalizedTitle\": \"面试题 02.07. 链表相交\",\n          \"charIndex\": 37\n        },\n        {\n          \"level\": 3,\n          \"title\": \"录前想法\",\n          \"slug\": \"录前想法-3\",\n          \"normalizedTitle\": \"录前想法\",\n          \"charIndex\": 141\n        },\n        {\n          \"level\": 3,\n          \"title\": \"录后想法\",\n          \"slug\": \"录后想法-3\",\n          \"normalizedTitle\": \"录后想法\",\n          \"charIndex\": 1883\n        },\n        {\n          \"level\": 3,\n          \"title\": \"总结\",\n          \"slug\": \"总结-3\",\n          \"normalizedTitle\": \"总结\",\n          \"charIndex\": 965\n        },\n        {\n          \"level\": 2,\n          \"title\": \"142.环形链表II\",\n          \"slug\": \"_142-环形链表ii\",\n          \"normalizedTitle\": \"142. 环形链表 ii\",\n          \"charIndex\": 53\n        },\n        {\n          \"level\": 3,\n          \"title\": \"录前想法\",\n          \"slug\": \"录前想法-4\",\n          \"normalizedTitle\": \"录前想法\",\n          \"charIndex\": 141\n        },\n        {\n          \"level\": 3,\n          \"title\": \"录后想法\",\n          \"slug\": \"录后想法-4\",\n          \"normalizedTitle\": \"录后想法\",\n          \"charIndex\": 1883\n        },\n        {\n          \"level\": 3,\n          \"title\": \"总结\",\n          \"slug\": \"总结-4\",\n          \"normalizedTitle\": \"总结\",\n          \"charIndex\": 965\n        },\n        {\n          \"level\": 2,\n          \"title\": \"总结\",\n          \"slug\": \"总结-5\",\n          \"normalizedTitle\": \"总结\",\n          \"charIndex\": 965\n        }\n      ],\n      \"excerpt\": \"<blockquote>\\n<p>24. 两两交换链表中的节点、19. 删除链表的倒数第 N 个节点 、面试题 02.07. 链表相交、142. 环形链表 II</p>\\n</blockquote>\\n\",\n      \"lastUpdated\": \"6/2/2023, 6:34:00 PM\",\n      \"lastUpdatedTimestamp\": 1685702040000,\n      \"headersStr\": \"24. 两两交换链表中的节点 录前想法 录后想法 总结 19.删除链表的倒数第N个节点 录前想法 录后想法 总结 面试题 02.07. 链表相交 录前想法 录后想法 总结 142.环形链表II 录前想法 录后想法 总结 总结\",\n      \"content\": \"> 24. 两两交换链表中的节点、19. 删除链表的倒数第 N 个节点 、面试题 02.07. 链表相交、142. 环形链表 II\\n\\n\\n# 24. 两两交换链表中的节点\\n\\n * 题目：24. 两两交换链表中的节点\\n\\n * 讲解：文章讲解、视频讲解\\n\\n * 要求：虚拟头结点\\n\\n\\n# 录前想法\\n\\n开始时的思路：\\n\\npre -> 1 -> 2 -> 3 -> 4\\n\\n 1. 1 -> 3\\n\\n 2. 2 -> 1\\n\\n 3. pre -> 2\\n\\npre -> 2 -> 1 -> 3 -> 4\\n\\n以下代码未通过 (❌)\\n\\nclass Solution {\\npublic:\\n    ListNode* swapPairs(ListNode* head) {\\n\\n        // 虚拟头节点\\n        ListNode* newHead = new ListNode(0);\\n        newHead->next = head;\\n\\n        // 双指针\\n        ListNode* pre = newHead;\\n        ListNode* cur = newHead->next;\\n        ListNode* tmp = cur->next;\\n\\n        while(cur->next){\\n    \\n            // 1 -> 3\\n            cur->next = cur->next->next;\\n            // 2 -> 1\\n            tmp->next = cur;\\n            // pre -> 2\\n            pre->next = tmp;\\n\\n            pre = cur;\\n            tmp = cur->next;\\n            cur = tmp->next;\\n        }\\n\\n        return newHead->next;\\n    }\\n};\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n\\n\\n经过一段时间的调试总结了以下问题：\\n\\n 1. 如果一开始就使用 cur -> next 需要考虑空的情况\\n 2. 循环时要先定值、后变值，不然循环的条件就失效了\\n\\n以下代码已 AC (✔️)\\n\\nclass Solution {\\npublic:\\n    ListNode* swapPairs(ListNode* head) {\\n\\n        if(!head){return head;}\\n\\n        // 虚拟头节点\\n        ListNode* newHead = new ListNode(0);\\n        newHead->next = head;\\n\\n        // 双指针\\n        ListNode* pre = newHead;\\n        ListNode* cur = newHead->next;\\n        // 需要判断空\\n        ListNode* tmp = cur->next;\\n\\n        // 循环判断，先定值，后变值，不然无法判断\\n        while(pre->next && pre->next->next){\\n\\n            cur = pre->next;\\n            tmp = cur->next;\\n    \\n            // 1 -> 3\\n            cur->next = cur->next->next;\\n            // 2 -> 1\\n            tmp->next = cur;\\n            // pre -> 2\\n            pre->next = tmp;\\n\\n            pre = pre->next->next;\\n        }\\n\\n        return newHead->next;\\n    }\\n};\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n\\n\\n\\n# 录后想法\\n\\n看了卡哥的思路后，可以再进行优化：\\n\\n 1. 一开始的赋值操作可以放入循环中\\n 2. 统一的 pre 指针使用观感上舒服很多\\n\\nclass Solution {\\npublic:\\n    ListNode* swapPairs(ListNode* head) {\\n\\n        // 虚拟头节点\\n        ListNode *newHead = new ListNode(0);\\n        newHead->next = head;\\n\\n        // 双指针\\n        ListNode *pre = newHead;\\n        ListNode *tmp1,*tmp2;\\n\\n        while(pre->next && pre->next->next){\\n            \\n            tmp1 = pre->next;\\n            tmp2 = pre->next->next->next;\\n\\n            pre->next = pre->next->next;\\n            pre->next->next = tmp1;\\n            pre->next->next->next = tmp2;\\n            \\n            pre = pre->next->next;\\n\\n        }\\n\\n        return newHead->next;\\n    }\\n};\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n\\n\\n\\n# 总结\\n\\n其实没有那么死板，重在理解交换的步骤顺序\\n\\n\\n\\n\\n# 19. 删除链表的倒数第 N 个节点\\n\\n * 题目：19. 删除链表的倒数第 N 个节点\\n\\n * 讲解：文章讲解、视频讲解\\n\\n * 要求：双指针的操作（删除第 N 个节点，要指向 第 N 个节点的前一个节点）\\n\\n\\n# 录前想法\\n\\n双指针隔 n+1 个元素前进，直接 AC (✔️)\\n\\nclass Solution {\\npublic:\\n    ListNode* removeNthFromEnd(ListNode* head, int n) {\\n\\n        // 虚拟头节点\\n        ListNode *newHead = new ListNode(0);\\n        newHead->next = head;\\n        // 快慢指针\\n        ListNode *slow = newHead;\\n        ListNode *fast = newHead;\\n        // 间隔\\n        while(n--){\\n            fast = fast->next;\\n        }\\n        // 同时移动\\n        while(fast->next){\\n            fast = fast->next;\\n            slow = slow->next;\\n        }\\n\\n        slow->next = slow->next->next;\\n\\n        return newHead->next; \\n    }\\n};\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n\\n * 时间复杂度: O (n)\\n * 空间复杂度: O (1)\\n\\n\\n# 录后想法\\n\\n和卡哥思路一致✌️\\n\\n\\n# 总结\\n\\n无\\n\\n\\n# 面试题 02.07. 链表相交\\n\\n * 题目：面试题 02.07. 链表相交\\n\\n * 讲解：文章讲解、视频讲解\\n\\n * 要求：注意数值相同，不代表指针相同\\n\\n\\n# 录前想法\\n\\n 1. 分别计算出链表 A 和 B 的长度\\n\\n 2. 移动长链表\\n\\n 3. 同时移动\\n\\n 4. 返回相同或空\\n\\n以下代码，已 AC (✔️)\\n\\nclass Solution {\\npublic:\\n    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {\\n        \\n        // 1.分别计算出链表A和B的长度\\n        int sizeA = 0,sizeB = 0;\\n        ListNode *tmpA = headA;\\n        ListNode *tmpB = headB;\\n        while(tmpA){\\n            tmpA = tmpA->next;\\n            ++sizeA;\\n        }\\n        while(tmpB){\\n            tmpB = tmpB->next;\\n            ++sizeB;\\n        }\\n\\n        // 2. 移动长链表\\n        tmpA = headA;\\n        tmpB = headB;\\n\\n        if (sizeA > sizeB){\\n            for(int i = sizeA - sizeB;i > 0;--i){\\n                tmpA = tmpA->next;\\n            }\\n        }else{\\n            for(int i = sizeB - sizeA;i > 0;--i){\\n                tmpB = tmpB->next;\\n            }\\n        }\\n\\n        // 3. 同时移动\\n        while(tmpB && tmpA){\\n            if(tmpB == tmpA){\\n                return tmpA;\\n            }\\n\\n            tmpA = tmpA->next;\\n            tmpB = tmpB->next;\\n        }\\n\\n        // 4. 返回空\\n        return NULL;\\n    }\\n};\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n\\n * 时间复杂度: O (n)\\n * 空间复杂度: O (1)\\n\\n\\n# 录后想法\\n\\n思路与卡哥一致，写法上参考后有改进的地方：\\n\\n * 在循环上可以控制一个，交换另一个\\n\\n// 原代码\\nif (sizeA > sizeB){\\n\\tfor(int i = sizeA - sizeB;i > 0;--i){\\n\\t\\ttmpA = tmpA->next;\\n\\t}\\n}else{\\n\\tfor(int i = sizeB - sizeA;i > 0;--i){\\n\\t\\ttmpB = tmpB->next;\\n\\t}\\n}\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n\\n\\n// 改进后\\nif (sizeA < sizeB){\\n    swap(sizeA,sizeB);\\n    swap(tmpA,tmpB);\\n}\\n\\nfor(int i = sizeA - sizeB;i > 0;--i){\\n    tmpA = tmpA->next;\\n}\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n\\n\\n\\n# 总结\\n\\n * 循环的写法可以控制一个修改另一个\\n\\n\\n# 142. 环形链表 II\\n\\n * 题目：142. 环形链表 II\\n\\n * 讲解：文章讲解、视频讲解\\n\\n * 要求：确定环和找环入口\\n\\n\\n# 录前想法\\n\\n 1. 快慢指针找到环\\n 2. 慢指针回原位，同时和快指针往前走，相遇点就是入口（之前写过，记得结论）\\n\\n以下代码，超时了，估计是哪里死循环了（❌）\\n\\nclass Solution {\\npublic:\\n    ListNode *detectCycle(ListNode *head) {\\n\\n        if(!head){return head;}\\n\\n        // 虚拟头节点\\n        ListNode *newHead = new ListNode(0);\\n        newHead->next = head;\\n        // 快慢指针\\n        ListNode *fast = newHead;\\n        ListNode *slow = newHead;\\n        // 找到相遇点\\n        while(fast->next && fast->next->next){\\n            \\n            // 先赋值\\n            fast = fast->next->next;\\n            slow = slow->next;\\n\\n            if(fast == slow){\\n                // slow归原位\\n                slow = newHead->next;\\n                // 共同前进\\n                while(fast != slow){\\n                    fast = fast->next;\\n                    slow = slow->next;\\n                }\\n                return fast;\\n            }\\n        }\\n\\n        return NULL;\\n    }\\n};\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n\\n\\n暂时没有找到错在哪，去看看卡哥的讲解。\\n\\n\\n# 录后想法\\n\\n经过比对发现，思路是一致的，不同的地方在虚拟头节点的使用，删除虚拟头节点后就 AC (✔️)\\n\\n// 改进后\\nclass Solution {\\npublic:\\n    ListNode *detectCycle(ListNode *head) {\\n\\n        if(!head){return head;}\\n\\n        // 快慢指针\\n        ListNode *fast = head;\\n        ListNode *slow = head;\\n        \\n        // 找到相遇点\\n        while(fast && fast->next){\\n            \\n            // 先赋值\\n            fast = fast->next->next;\\n            slow = slow->next;\\n\\n            if(slow == fast){\\n\\n                fast =  head;\\n                if(!fast){return nullptr;}\\n\\n                while(fast != slow){\\n                    fast = fast->next;\\n                    slow = slow->next;\\n                }\\n\\n                return fast;\\n            }\\n\\n        }\\n\\n        return nullptr;\\n    }\\n};\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n\\n\\n\\n# 总结\\n\\n * 虚拟头节点不能乱用，哪些情况下需要使用虚拟头节点呢？\\n\\n\\n# 总结\\n\\n 1. 虚拟头节点是否该使用？\\n 2. 双指针\\n    1. 快慢指针（一个每次都走的比另一个快）\\n    2. 滑动窗口\",\n      \"normalizedContent\": \"> 24. 两两交换链表中的节点、19. 删除链表的倒数第 n 个节点 、面试题 02.07. 链表相交、142. 环形链表 ii\\n\\n\\n# 24. 两两交换链表中的节点\\n\\n * 题目：24. 两两交换链表中的节点\\n\\n * 讲解：文章讲解、视频讲解\\n\\n * 要求：虚拟头结点\\n\\n\\n# 录前想法\\n\\n开始时的思路：\\n\\npre -> 1 -> 2 -> 3 -> 4\\n\\n 1. 1 -> 3\\n\\n 2. 2 -> 1\\n\\n 3. pre -> 2\\n\\npre -> 2 -> 1 -> 3 -> 4\\n\\n以下代码未通过 (❌)\\n\\nclass solution {\\npublic:\\n    listnode* swappairs(listnode* head) {\\n\\n        // 虚拟头节点\\n        listnode* newhead = new listnode(0);\\n        newhead->next = head;\\n\\n        // 双指针\\n        listnode* pre = newhead;\\n        listnode* cur = newhead->next;\\n        listnode* tmp = cur->next;\\n\\n        while(cur->next){\\n    \\n            // 1 -> 3\\n            cur->next = cur->next->next;\\n            // 2 -> 1\\n            tmp->next = cur;\\n            // pre -> 2\\n            pre->next = tmp;\\n\\n            pre = cur;\\n            tmp = cur->next;\\n            cur = tmp->next;\\n        }\\n\\n        return newhead->next;\\n    }\\n};\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n\\n\\n经过一段时间的调试总结了以下问题：\\n\\n 1. 如果一开始就使用 cur -> next 需要考虑空的情况\\n 2. 循环时要先定值、后变值，不然循环的条件就失效了\\n\\n以下代码已 ac (✔️)\\n\\nclass solution {\\npublic:\\n    listnode* swappairs(listnode* head) {\\n\\n        if(!head){return head;}\\n\\n        // 虚拟头节点\\n        listnode* newhead = new listnode(0);\\n        newhead->next = head;\\n\\n        // 双指针\\n        listnode* pre = newhead;\\n        listnode* cur = newhead->next;\\n        // 需要判断空\\n        listnode* tmp = cur->next;\\n\\n        // 循环判断，先定值，后变值，不然无法判断\\n        while(pre->next && pre->next->next){\\n\\n            cur = pre->next;\\n            tmp = cur->next;\\n    \\n            // 1 -> 3\\n            cur->next = cur->next->next;\\n            // 2 -> 1\\n            tmp->next = cur;\\n            // pre -> 2\\n            pre->next = tmp;\\n\\n            pre = pre->next->next;\\n        }\\n\\n        return newhead->next;\\n    }\\n};\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n\\n\\n\\n# 录后想法\\n\\n看了卡哥的思路后，可以再进行优化：\\n\\n 1. 一开始的赋值操作可以放入循环中\\n 2. 统一的 pre 指针使用观感上舒服很多\\n\\nclass solution {\\npublic:\\n    listnode* swappairs(listnode* head) {\\n\\n        // 虚拟头节点\\n        listnode *newhead = new listnode(0);\\n        newhead->next = head;\\n\\n        // 双指针\\n        listnode *pre = newhead;\\n        listnode *tmp1,*tmp2;\\n\\n        while(pre->next && pre->next->next){\\n            \\n            tmp1 = pre->next;\\n            tmp2 = pre->next->next->next;\\n\\n            pre->next = pre->next->next;\\n            pre->next->next = tmp1;\\n            pre->next->next->next = tmp2;\\n            \\n            pre = pre->next->next;\\n\\n        }\\n\\n        return newhead->next;\\n    }\\n};\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n\\n\\n\\n# 总结\\n\\n其实没有那么死板，重在理解交换的步骤顺序\\n\\n\\n\\n\\n# 19. 删除链表的倒数第 n 个节点\\n\\n * 题目：19. 删除链表的倒数第 n 个节点\\n\\n * 讲解：文章讲解、视频讲解\\n\\n * 要求：双指针的操作（删除第 n 个节点，要指向 第 n 个节点的前一个节点）\\n\\n\\n# 录前想法\\n\\n双指针隔 n+1 个元素前进，直接 ac (✔️)\\n\\nclass solution {\\npublic:\\n    listnode* removenthfromend(listnode* head, int n) {\\n\\n        // 虚拟头节点\\n        listnode *newhead = new listnode(0);\\n        newhead->next = head;\\n        // 快慢指针\\n        listnode *slow = newhead;\\n        listnode *fast = newhead;\\n        // 间隔\\n        while(n--){\\n            fast = fast->next;\\n        }\\n        // 同时移动\\n        while(fast->next){\\n            fast = fast->next;\\n            slow = slow->next;\\n        }\\n\\n        slow->next = slow->next->next;\\n\\n        return newhead->next; \\n    }\\n};\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n\\n * 时间复杂度: o (n)\\n * 空间复杂度: o (1)\\n\\n\\n# 录后想法\\n\\n和卡哥思路一致✌️\\n\\n\\n# 总结\\n\\n无\\n\\n\\n# 面试题 02.07. 链表相交\\n\\n * 题目：面试题 02.07. 链表相交\\n\\n * 讲解：文章讲解、视频讲解\\n\\n * 要求：注意数值相同，不代表指针相同\\n\\n\\n# 录前想法\\n\\n 1. 分别计算出链表 a 和 b 的长度\\n\\n 2. 移动长链表\\n\\n 3. 同时移动\\n\\n 4. 返回相同或空\\n\\n以下代码，已 ac (✔️)\\n\\nclass solution {\\npublic:\\n    listnode *getintersectionnode(listnode *heada, listnode *headb) {\\n        \\n        // 1.分别计算出链表a和b的长度\\n        int sizea = 0,sizeb = 0;\\n        listnode *tmpa = heada;\\n        listnode *tmpb = headb;\\n        while(tmpa){\\n            tmpa = tmpa->next;\\n            ++sizea;\\n        }\\n        while(tmpb){\\n            tmpb = tmpb->next;\\n            ++sizeb;\\n        }\\n\\n        // 2. 移动长链表\\n        tmpa = heada;\\n        tmpb = headb;\\n\\n        if (sizea > sizeb){\\n            for(int i = sizea - sizeb;i > 0;--i){\\n                tmpa = tmpa->next;\\n            }\\n        }else{\\n            for(int i = sizeb - sizea;i > 0;--i){\\n                tmpb = tmpb->next;\\n            }\\n        }\\n\\n        // 3. 同时移动\\n        while(tmpb && tmpa){\\n            if(tmpb == tmpa){\\n                return tmpa;\\n            }\\n\\n            tmpa = tmpa->next;\\n            tmpb = tmpb->next;\\n        }\\n\\n        // 4. 返回空\\n        return null;\\n    }\\n};\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n\\n * 时间复杂度: o (n)\\n * 空间复杂度: o (1)\\n\\n\\n# 录后想法\\n\\n思路与卡哥一致，写法上参考后有改进的地方：\\n\\n * 在循环上可以控制一个，交换另一个\\n\\n// 原代码\\nif (sizea > sizeb){\\n\\tfor(int i = sizea - sizeb;i > 0;--i){\\n\\t\\ttmpa = tmpa->next;\\n\\t}\\n}else{\\n\\tfor(int i = sizeb - sizea;i > 0;--i){\\n\\t\\ttmpb = tmpb->next;\\n\\t}\\n}\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n\\n\\n// 改进后\\nif (sizea < sizeb){\\n    swap(sizea,sizeb);\\n    swap(tmpa,tmpb);\\n}\\n\\nfor(int i = sizea - sizeb;i > 0;--i){\\n    tmpa = tmpa->next;\\n}\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n\\n\\n\\n# 总结\\n\\n * 循环的写法可以控制一个修改另一个\\n\\n\\n# 142. 环形链表 ii\\n\\n * 题目：142. 环形链表 ii\\n\\n * 讲解：文章讲解、视频讲解\\n\\n * 要求：确定环和找环入口\\n\\n\\n# 录前想法\\n\\n 1. 快慢指针找到环\\n 2. 慢指针回原位，同时和快指针往前走，相遇点就是入口（之前写过，记得结论）\\n\\n以下代码，超时了，估计是哪里死循环了（❌）\\n\\nclass solution {\\npublic:\\n    listnode *detectcycle(listnode *head) {\\n\\n        if(!head){return head;}\\n\\n        // 虚拟头节点\\n        listnode *newhead = new listnode(0);\\n        newhead->next = head;\\n        // 快慢指针\\n        listnode *fast = newhead;\\n        listnode *slow = newhead;\\n        // 找到相遇点\\n        while(fast->next && fast->next->next){\\n            \\n            // 先赋值\\n            fast = fast->next->next;\\n            slow = slow->next;\\n\\n            if(fast == slow){\\n                // slow归原位\\n                slow = newhead->next;\\n                // 共同前进\\n                while(fast != slow){\\n                    fast = fast->next;\\n                    slow = slow->next;\\n                }\\n                return fast;\\n            }\\n        }\\n\\n        return null;\\n    }\\n};\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n\\n\\n暂时没有找到错在哪，去看看卡哥的讲解。\\n\\n\\n# 录后想法\\n\\n经过比对发现，思路是一致的，不同的地方在虚拟头节点的使用，删除虚拟头节点后就 ac (✔️)\\n\\n// 改进后\\nclass solution {\\npublic:\\n    listnode *detectcycle(listnode *head) {\\n\\n        if(!head){return head;}\\n\\n        // 快慢指针\\n        listnode *fast = head;\\n        listnode *slow = head;\\n        \\n        // 找到相遇点\\n        while(fast && fast->next){\\n            \\n            // 先赋值\\n            fast = fast->next->next;\\n            slow = slow->next;\\n\\n            if(slow == fast){\\n\\n                fast =  head;\\n                if(!fast){return nullptr;}\\n\\n                while(fast != slow){\\n                    fast = fast->next;\\n                    slow = slow->next;\\n                }\\n\\n                return fast;\\n            }\\n\\n        }\\n\\n        return nullptr;\\n    }\\n};\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n\\n\\n\\n# 总结\\n\\n * 虚拟头节点不能乱用，哪些情况下需要使用虚拟头节点呢？\\n\\n\\n# 总结\\n\\n 1. 虚拟头节点是否该使用？\\n 2. 双指针\\n    1. 快慢指针（一个每次都走的比另一个快）\\n    2. 滑动窗口\",\n      \"charsets\": {\n        \"cjk\": true\n      }\n    },\n    {\n      \"title\": \"Day07-字符串\",\n      \"frontmatter\": {\n        \"title\": \"Day07-字符串\",\n        \"date\": \"2023-05-31T10:04:29.000Z\",\n        \"permalink\": \"/pages/26eaf0/\",\n        \"categories\": [\n          \"算法\",\n          \"算法打卡\"\n        ],\n        \"tags\": [\n          \"打卡\"\n        ]\n      },\n      \"regularPath\": \"/02.%E7%AE%97%E6%B3%95/01.%E7%AE%97%E6%B3%95%E6%89%93%E5%8D%A1/07.Day07-%E5%AD%97%E7%AC%A6%E4%B8%B2.html\",\n      \"relativePath\": \"02.算法/01.算法打卡/07.Day07-字符串.md\",\n      \"key\": \"v-3bb075f0\",\n      \"path\": \"/pages/26eaf0/\",\n      \"headers\": [\n        {\n          \"level\": 2,\n          \"title\": \"344.反转字符串\",\n          \"slug\": \"_344-反转字符串\",\n          \"normalizedTitle\": \"344. 反转字符串\",\n          \"charIndex\": 2\n        },\n        {\n          \"level\": 3,\n          \"title\": \"录前想法\",\n          \"slug\": \"录前想法\",\n          \"normalizedTitle\": \"录前想法\",\n          \"charIndex\": 166\n        },\n        {\n          \"level\": 3,\n          \"title\": \"录后想法\",\n          \"slug\": \"录后想法\",\n          \"normalizedTitle\": \"录后想法\",\n          \"charIndex\": 533\n        },\n        {\n          \"level\": 2,\n          \"title\": \"541. 反转字符串II\",\n          \"slug\": \"_541-反转字符串ii\",\n          \"normalizedTitle\": \"541. 反转字符串 ii\",\n          \"charIndex\": 13\n        },\n        {\n          \"level\": 3,\n          \"title\": \"录前想法\",\n          \"slug\": \"录前想法-2\",\n          \"normalizedTitle\": \"录前想法\",\n          \"charIndex\": 166\n        },\n        {\n          \"level\": 3,\n          \"title\": \"录后想法\",\n          \"slug\": \"录后想法-2\",\n          \"normalizedTitle\": \"录后想法\",\n          \"charIndex\": 533\n        },\n        {\n          \"level\": 3,\n          \"title\": \"总结\",\n          \"slug\": \"总结\",\n          \"normalizedTitle\": \"总结\",\n          \"charIndex\": 2359\n        },\n        {\n          \"level\": 2,\n          \"title\": \"剑指Offer 05.替换空格\",\n          \"slug\": \"剑指offer-05-替换空格\",\n          \"normalizedTitle\": \"剑指 offer 05. 替换空格\",\n          \"charIndex\": 27\n        },\n        {\n          \"level\": 3,\n          \"title\": \"录前想法\",\n          \"slug\": \"录前想法-3\",\n          \"normalizedTitle\": \"录前想法\",\n          \"charIndex\": 166\n        },\n        {\n          \"level\": 3,\n          \"title\": \"录后想法\",\n          \"slug\": \"录后想法-3\",\n          \"normalizedTitle\": \"录后想法\",\n          \"charIndex\": 533\n        },\n        {\n          \"level\": 2,\n          \"title\": \"151.翻转字符串里的单词\",\n          \"slug\": \"_151-翻转字符串里的单词\",\n          \"normalizedTitle\": \"151. 翻转字符串里的单词\",\n          \"charIndex\": 46\n        },\n        {\n          \"level\": 3,\n          \"title\": \"录前想法\",\n          \"slug\": \"录前想法-4\",\n          \"normalizedTitle\": \"录前想法\",\n          \"charIndex\": 166\n        },\n        {\n          \"level\": 3,\n          \"title\": \"录后想法\",\n          \"slug\": \"录后想法-4\",\n          \"normalizedTitle\": \"录后想法\",\n          \"charIndex\": 533\n        },\n        {\n          \"level\": 3,\n          \"title\": \"总结\",\n          \"slug\": \"总结-2\",\n          \"normalizedTitle\": \"总结\",\n          \"charIndex\": 2359\n        },\n        {\n          \"level\": 2,\n          \"title\": \"剑指Offer58-II.左旋转字符串\",\n          \"slug\": \"剑指offer58-ii-左旋转字符串\",\n          \"normalizedTitle\": \"剑指 offer58-ii. 左旋转字符串\",\n          \"charIndex\": 62\n        },\n        {\n          \"level\": 3,\n          \"title\": \"录前想法\",\n          \"slug\": \"录前想法-5\",\n          \"normalizedTitle\": \"录前想法\",\n          \"charIndex\": 166\n        },\n        {\n          \"level\": 3,\n          \"title\": \"录后想法\",\n          \"slug\": \"录后想法-5\",\n          \"normalizedTitle\": \"录后想法\",\n          \"charIndex\": 533\n        },\n        {\n          \"level\": 2,\n          \"title\": \"总结\",\n          \"slug\": \"总结-3\",\n          \"normalizedTitle\": \"总结\",\n          \"charIndex\": 2359\n        }\n      ],\n      \"excerpt\": \"<blockquote>\\n<p>344. 反转字符串、541. 反转字符串 II、剑指 Offer 05. 替换空格、 151. 翻转字符串里的单词、 剑指 Offer58-II. 左旋转字符串</p>\\n</blockquote>\\n\",\n      \"lastUpdated\": \"6/2/2023, 6:34:00 PM\",\n      \"lastUpdatedTimestamp\": 1685702040000,\n      \"headersStr\": \"344.反转字符串 录前想法 录后想法 541. 反转字符串II 录前想法 录后想法 总结 剑指Offer 05.替换空格 录前想法 录后想法 151.翻转字符串里的单词 录前想法 录后想法 总结 剑指Offer58-II.左旋转字符串 录前想法 录后想法 总结\",\n      \"content\": \"> 344. 反转字符串、541. 反转字符串 II、剑指 Offer 05. 替换空格、 151. 翻转字符串里的单词、 剑指 Offer58-II. 左旋转字符串\\n\\n\\n# 344. 反转字符串\\n\\n * 题目：344. 反转字符串\\n\\n * 讲解：文章讲解、视频讲解\\n\\n * 要求：理解什么时候用库函数，什么时候不用库函数\\n\\n\\n# 录前想法\\n\\n交换首末元素，注意数组越界，已 AC (✔️)\\n\\nclass Solution {\\npublic:\\n    void reverseString(vector<char>& s) {\\n\\n        int tmp;\\n        int len = s.size() - 1;\\n\\n        // 交换\\n        for(int i = 0; i <= len/2; ++i){\\n            \\n            tmp = s[i];\\n            s[i] = s[len-i];\\n            s[len-i] = tmp;\\n\\n        }\\n    }\\n};\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n\\n\\n\\n# 录后想法\\n\\n思路一致，多了两种交换的方法可以学习：\\n\\n 1. swap 函数\\n    \\n    swap(s[i],s[j]);\\n    \\n    \\n    1\\n    \\n\\n 2. 通过位运算\\n    \\n    s[i] ^= s[j];\\n    s[j] ^= s[i];\\n    s[i] ^= s[j];\\n    \\n    \\n    1\\n    2\\n    3\\n    \\n\\n\\n# 541. 反转字符串 II\\n\\n * 题目：541. 反转字符串 II\\n\\n * 讲解：文章讲解、视频讲解\\n\\n * 要求：先独立做再看解析\\n\\n\\n# 录前想法\\n\\n有思路，但就是写不对，提交错了三次😓\\n\\n以下是我的代码，未 AC (❌)\\n\\nclass Solution {\\npublic:\\n    string reverseStr(string s, int k) {\\n        \\n        int len = s.size();\\n        int pos = 0;\\n\\n        if(len <= k){\\n            reverse(s,0 ,len - 1);\\n            return s;\\n        }\\n\\n        for(pos = k - 1; pos < len; pos += 2 * k){\\n\\n            // 反转前k个字符\\n            // abcdefghe 8\\n            reverse(s,pos - k + 1 ,pos);\\n            \\n        }\\n\\n        // 如果剩余字符少于 k 个，则将剩余字符全部反转。\\n        // abcdefg 8\\n        if(len - pos < k){\\n            reverse(s,pos,len - pos - 1);\\n        }\\n\\n        // 小于 2k 但大于或等于 k 个，则反转前 k 个字符\\n        if(len - pos < 2 * k && len - pos >= k){\\n            reverse(s,pos,pos + k - 1);\\n        }\\n\\n        return s;\\n    }\\n\\n    // 反转\\n    void reverse(string &s,int l,int r){\\n        for(;l < r;l++,r--){\\n            swap(s[l],s[r]);\\n        }\\n    }\\n};\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n\\n\\n\\n# 录后想法\\n\\n哇，感觉自己写的好复杂😂\\n\\n有考虑到间断跳跃\\n\\n以下是整理后已 AC 的代码（✔️）\\n\\nclass Solution {\\npublic:\\n    string reverseStr(string s, int k) {\\n\\n        int len = s.size();\\n\\n        for (int i = 0; i < len; i += (2 * k)) {\\n            \\n            if(i+k<=len){\\n                reverse(s,i,i+k-1);\\n                continue;\\n            }\\n\\n            reverse(s,i,len-1);\\n        }\\n\\n        return s;\\n    }\\n\\n    // 反转\\n    void reverse(string &s,int l,int r){\\n        for(;l < r;l++,r--){\\n            swap(s[l],s[r]);\\n        }\\n    }\\n};\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n\\n\\n\\n# 总结\\n\\n * 间断的跳跃\\n\\n\\n# 剑指 Offer 05. 替换空格\\n\\n * 题目：剑指 Offer 05. 替换空格\\n\\n * 讲解：文章讲解\\n\\n * 建议：对于线性数据结构，填充或者删除，后序处理会高效的多。好好体会一下。\\n\\n\\n# 录前想法\\n\\n创建新的 char 数组，数组容量为 原数组+Space * 2 来保存结果集\\n\\nclass Solution {\\npublic:\\n    string replaceSpace(string s) {\\n\\n        // 统计空格数量\\n        int len = s.size();\\n        int spaceCount = 0;\\n        int pos = 0;\\n        \\n        for(int i = 0; i < len; ++i){\\n            if(s[i] == ' '){\\n                ++spaceCount;\\n            }\\n        }\\n\\n\\n        // 拓容\\n        char ans[len + 2 * spaceCount];\\n\\n        // 循环填充\\n        for(int i = 0; i < len; ++i){\\n            \\n            if(s[i] == ' '){\\n                ans[pos++] = '%';\\n                ans[pos++] = '2';\\n                ans[pos++] = '0';\\n            }else{\\n                ans[pos++] = s[i];\\n            }\\n            \\n        }\\n\\n        return string(ans);\\n    }\\n};\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n\\n\\n运行时出现以下的错误\\n\\n\\n\\n经过一段时间的排查后发现是对 char*、char [] 与 string 的初始化及转换不熟悉导致\\n\\n核心时忽略了 char 数组自带的 '\\\\0' 字符，所以可以进行以下修改：\\n\\nclass Solution {\\npublic:\\n    string replaceSpace(string s) {\\n\\n\\t   ...\\n\\n        // 拓容\\n        char ans[len + 2 * spaceCount + 1];\\n        \\n       \\t...\\n\\n        ans[pos] = '\\\\0';\\n\\n        return string(ans);\\n    }\\n};\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n\\n\\n修改完后就没有问题了，最终已 AC 的实现代码如下：\\n\\nclass Solution {\\npublic:\\n    string replaceSpace(string s) {\\n\\n        // 统计空格数量\\n        int len = s.size();\\n        int spaceCount = 0;\\n        int pos = 0;\\n        \\n        for(int i = 0; i < len; ++i){\\n            if(s[i] == ' '){\\n                ++spaceCount;\\n            }\\n        }\\n\\n\\n        // 拓容\\n        char ans[len + 2 * spaceCount + 1];\\n\\n        // 循环填充\\n        for(int i = 0; i < len; ++i){\\n            \\n            if(s[i] == ' '){\\n                ans[pos++] = '%';\\n                ans[pos++] = '2';\\n                ans[pos++] = '0';\\n            }else{\\n                ans[pos++] = s[i];\\n            }\\n            \\n        }\\n\\n        ans[pos] = '\\\\0';\\n\\n        return string(ans);\\n    }\\n};\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n\\n\\n\\n# 录后想法\\n\\n>  * 双指针\\n>  * resize()\\n\\n\\n\\nclass Solution {\\npublic:\\n    string replaceSpace(string s) {\\n\\n        // 统计空格数量\\n        int oldLen = s.size();\\n        int newLen;\\n        int spaceCount = 0;\\n        \\n        for(int i = 0; i < oldLen; ++i){\\n            if(s[i] == ' '){\\n                ++spaceCount;\\n            }\\n        }\\n\\n        newLen = oldLen + 2 * spaceCount;\\n\\n        // 拓容\\n        s.resize(newLen);\\n\\n        // 循环填充\\n        // fast 指向原数组的最后一个位置\\n        // slow 指向新数组的最后一个位置\\n        for(int fast = oldLen - 1,slow = newLen - 1; fast >= 0;){\\n            \\n            if(s[fast] == ' '){\\n                s[slow--] = '0';\\n                s[slow--] = '2';\\n                s[slow--] = '%';\\n                fast--;\\n            }else{\\n                s[slow--] = s[fast--];\\n            }\\n        }\\n\\n        return s;\\n    }\\n};\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n\\n\\n\\n# 151. 翻转字符串里的单词\\n\\n * 题目：151. 翻转字符串里的单词\\n\\n * 讲解：文章讲解、视频讲解\\n\\n * 建议：这道题目基本把 刚刚做过的字符串操作 都覆盖了，不过就算知道解题思路，本题代码并不容易写，要多练一练。\\n\\n\\n# 录前想法\\n\\n 1. 去除多余的空格\\n 2. 整体反转\\n 3. 单词反转\\n\\n已经 AC (✔️)\\n\\nclass Solution {\\npublic:\\n    string reverseWords(string s) {\\n        \\n        int len = s.size();\\n\\n        // 1.双指针移动删除空格\\n        // 对空格去重\\n        int fast = 0,slow = 0;\\n        // 1.1 删除\\n        // 找到第一个不为空格的元素\\n        while(s[fast] == ' ' && fast < len){fast++;}\\n        // 1.2 中间遇到空格\\n        while(fast < len){\\n            \\n            if(s[fast] != ' ' || (s[fast] == ' ' && s[fast-1] != ' ' && fast != 0)){\\n                s[slow++] = s[fast++];\\n            }else{\\n                while(s[fast] == ' ' && fast < len){fast++;}\\n            }\\n\\n        }\\n        // 1.3 结尾遇到空格\\n        if(s[slow - 1] == ' '){\\n            s.resize(slow - 1);\\n            len = slow - 1;\\n        }else{\\n            s.resize(slow);\\n            len = slow;\\n        }\\n\\n        // 2. 整体反转\\n        reverse(s,0,len-1);\\n\\n        // 3. 再对每个单词反转\\n        int l,r;\\n        for(l = 0,r = 0; r < len; ++r){\\n\\n            if(s[r] == ' '){\\n                reverse(s,l,r - 1);\\n                l = r + 1;\\n            }\\n        }\\n\\n        // 反转最后一个单词\\n        reverse(s,l,r - 1);\\n\\n        return s;\\n    }\\n\\n    // 反转\\n    void reverse(string &str,int l,int r){\\n        for(;l<r; ++l,--r){\\n            swap(str[l],str[r]);\\n        }\\n    }\\n};\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n\\n * 时间复杂度: O (n)\\n * 空间复杂度: O (1)\\n\\n\\n# 录后想法\\n\\n思路一致\\n\\n\\n# 总结\\n\\n删除中间段空格的核心判断代码：理解了 s [fast] 与 s [fast-1]\\n\\nif(s[fast] != ' ' || (s[fast] == ' ' && s[fast-1] != ' ' && fast != 0))\\n\\n\\n1\\n\\n\\n\\n# 剑指 Offer58-II. 左旋转字符串\\n\\n * 题目：剑指 Offer58-II. 左旋转字符串\\n\\n * 讲解：文章讲解\\n\\n * 建议：题解中的解法如果没接触过的话，应该会想不到\\n\\n\\n# 录前想法\\n\\n 1. 整体反转\\n 2. 倒数 k 个字符反转\\n 3. 正数 len - k 个字符反转\\n\\n以下代码已 AC (✔️)\\n\\nclass Solution {\\npublic:\\n    string reverseLeftWords(string s, int n) {\\n\\n        // abcdefg\\n        // gfedc ba\\n        // cdefg ab\\n\\n        // lrloseumgh\\n        // hgmu esolrl\\n        // umgh lrlose\\n\\n        int len = s.size();\\n        // 整体反转\\n        reverse(s,0,len-1);\\n\\n        // 倒数n个反转\\n        reverse(s,len-n,len-1);\\n\\n        // 0 ~ len - n 反转\\n        reverse(s,0,len-n-1);\\n\\n        return s;\\n    }\\n\\n    void reverse(string &str,int l,int r){\\n        for(;l<r;++l,--r){\\n            swap(str[l],str[r]);\\n        }\\n    }\\n};\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n\\n\\n\\n# 录后想法\\n\\n思路一致✌️\\n\\n\\n# 总结\\n\\n * 关于 char*、char [] 与 string 的初始化及转换\\n\\n剪枝操作的细节好难，还需要多加练习！\",\n      \"normalizedContent\": \"> 344. 反转字符串、541. 反转字符串 ii、剑指 offer 05. 替换空格、 151. 翻转字符串里的单词、 剑指 offer58-ii. 左旋转字符串\\n\\n\\n# 344. 反转字符串\\n\\n * 题目：344. 反转字符串\\n\\n * 讲解：文章讲解、视频讲解\\n\\n * 要求：理解什么时候用库函数，什么时候不用库函数\\n\\n\\n# 录前想法\\n\\n交换首末元素，注意数组越界，已 ac (✔️)\\n\\nclass solution {\\npublic:\\n    void reversestring(vector<char>& s) {\\n\\n        int tmp;\\n        int len = s.size() - 1;\\n\\n        // 交换\\n        for(int i = 0; i <= len/2; ++i){\\n            \\n            tmp = s[i];\\n            s[i] = s[len-i];\\n            s[len-i] = tmp;\\n\\n        }\\n    }\\n};\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n\\n\\n\\n# 录后想法\\n\\n思路一致，多了两种交换的方法可以学习：\\n\\n 1. swap 函数\\n    \\n    swap(s[i],s[j]);\\n    \\n    \\n    1\\n    \\n\\n 2. 通过位运算\\n    \\n    s[i] ^= s[j];\\n    s[j] ^= s[i];\\n    s[i] ^= s[j];\\n    \\n    \\n    1\\n    2\\n    3\\n    \\n\\n\\n# 541. 反转字符串 ii\\n\\n * 题目：541. 反转字符串 ii\\n\\n * 讲解：文章讲解、视频讲解\\n\\n * 要求：先独立做再看解析\\n\\n\\n# 录前想法\\n\\n有思路，但就是写不对，提交错了三次😓\\n\\n以下是我的代码，未 ac (❌)\\n\\nclass solution {\\npublic:\\n    string reversestr(string s, int k) {\\n        \\n        int len = s.size();\\n        int pos = 0;\\n\\n        if(len <= k){\\n            reverse(s,0 ,len - 1);\\n            return s;\\n        }\\n\\n        for(pos = k - 1; pos < len; pos += 2 * k){\\n\\n            // 反转前k个字符\\n            // abcdefghe 8\\n            reverse(s,pos - k + 1 ,pos);\\n            \\n        }\\n\\n        // 如果剩余字符少于 k 个，则将剩余字符全部反转。\\n        // abcdefg 8\\n        if(len - pos < k){\\n            reverse(s,pos,len - pos - 1);\\n        }\\n\\n        // 小于 2k 但大于或等于 k 个，则反转前 k 个字符\\n        if(len - pos < 2 * k && len - pos >= k){\\n            reverse(s,pos,pos + k - 1);\\n        }\\n\\n        return s;\\n    }\\n\\n    // 反转\\n    void reverse(string &s,int l,int r){\\n        for(;l < r;l++,r--){\\n            swap(s[l],s[r]);\\n        }\\n    }\\n};\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n\\n\\n\\n# 录后想法\\n\\n哇，感觉自己写的好复杂😂\\n\\n有考虑到间断跳跃\\n\\n以下是整理后已 ac 的代码（✔️）\\n\\nclass solution {\\npublic:\\n    string reversestr(string s, int k) {\\n\\n        int len = s.size();\\n\\n        for (int i = 0; i < len; i += (2 * k)) {\\n            \\n            if(i+k<=len){\\n                reverse(s,i,i+k-1);\\n                continue;\\n            }\\n\\n            reverse(s,i,len-1);\\n        }\\n\\n        return s;\\n    }\\n\\n    // 反转\\n    void reverse(string &s,int l,int r){\\n        for(;l < r;l++,r--){\\n            swap(s[l],s[r]);\\n        }\\n    }\\n};\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n\\n\\n\\n# 总结\\n\\n * 间断的跳跃\\n\\n\\n# 剑指 offer 05. 替换空格\\n\\n * 题目：剑指 offer 05. 替换空格\\n\\n * 讲解：文章讲解\\n\\n * 建议：对于线性数据结构，填充或者删除，后序处理会高效的多。好好体会一下。\\n\\n\\n# 录前想法\\n\\n创建新的 char 数组，数组容量为 原数组+space * 2 来保存结果集\\n\\nclass solution {\\npublic:\\n    string replacespace(string s) {\\n\\n        // 统计空格数量\\n        int len = s.size();\\n        int spacecount = 0;\\n        int pos = 0;\\n        \\n        for(int i = 0; i < len; ++i){\\n            if(s[i] == ' '){\\n                ++spacecount;\\n            }\\n        }\\n\\n\\n        // 拓容\\n        char ans[len + 2 * spacecount];\\n\\n        // 循环填充\\n        for(int i = 0; i < len; ++i){\\n            \\n            if(s[i] == ' '){\\n                ans[pos++] = '%';\\n                ans[pos++] = '2';\\n                ans[pos++] = '0';\\n            }else{\\n                ans[pos++] = s[i];\\n            }\\n            \\n        }\\n\\n        return string(ans);\\n    }\\n};\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n\\n\\n运行时出现以下的错误\\n\\n\\n\\n经过一段时间的排查后发现是对 char*、char [] 与 string 的初始化及转换不熟悉导致\\n\\n核心时忽略了 char 数组自带的 '\\\\0' 字符，所以可以进行以下修改：\\n\\nclass solution {\\npublic:\\n    string replacespace(string s) {\\n\\n\\t   ...\\n\\n        // 拓容\\n        char ans[len + 2 * spacecount + 1];\\n        \\n       \\t...\\n\\n        ans[pos] = '\\\\0';\\n\\n        return string(ans);\\n    }\\n};\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n\\n\\n修改完后就没有问题了，最终已 ac 的实现代码如下：\\n\\nclass solution {\\npublic:\\n    string replacespace(string s) {\\n\\n        // 统计空格数量\\n        int len = s.size();\\n        int spacecount = 0;\\n        int pos = 0;\\n        \\n        for(int i = 0; i < len; ++i){\\n            if(s[i] == ' '){\\n                ++spacecount;\\n            }\\n        }\\n\\n\\n        // 拓容\\n        char ans[len + 2 * spacecount + 1];\\n\\n        // 循环填充\\n        for(int i = 0; i < len; ++i){\\n            \\n            if(s[i] == ' '){\\n                ans[pos++] = '%';\\n                ans[pos++] = '2';\\n                ans[pos++] = '0';\\n            }else{\\n                ans[pos++] = s[i];\\n            }\\n            \\n        }\\n\\n        ans[pos] = '\\\\0';\\n\\n        return string(ans);\\n    }\\n};\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n\\n\\n\\n# 录后想法\\n\\n>  * 双指针\\n>  * resize()\\n\\n\\n\\nclass solution {\\npublic:\\n    string replacespace(string s) {\\n\\n        // 统计空格数量\\n        int oldlen = s.size();\\n        int newlen;\\n        int spacecount = 0;\\n        \\n        for(int i = 0; i < oldlen; ++i){\\n            if(s[i] == ' '){\\n                ++spacecount;\\n            }\\n        }\\n\\n        newlen = oldlen + 2 * spacecount;\\n\\n        // 拓容\\n        s.resize(newlen);\\n\\n        // 循环填充\\n        // fast 指向原数组的最后一个位置\\n        // slow 指向新数组的最后一个位置\\n        for(int fast = oldlen - 1,slow = newlen - 1; fast >= 0;){\\n            \\n            if(s[fast] == ' '){\\n                s[slow--] = '0';\\n                s[slow--] = '2';\\n                s[slow--] = '%';\\n                fast--;\\n            }else{\\n                s[slow--] = s[fast--];\\n            }\\n        }\\n\\n        return s;\\n    }\\n};\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n\\n\\n\\n# 151. 翻转字符串里的单词\\n\\n * 题目：151. 翻转字符串里的单词\\n\\n * 讲解：文章讲解、视频讲解\\n\\n * 建议：这道题目基本把 刚刚做过的字符串操作 都覆盖了，不过就算知道解题思路，本题代码并不容易写，要多练一练。\\n\\n\\n# 录前想法\\n\\n 1. 去除多余的空格\\n 2. 整体反转\\n 3. 单词反转\\n\\n已经 ac (✔️)\\n\\nclass solution {\\npublic:\\n    string reversewords(string s) {\\n        \\n        int len = s.size();\\n\\n        // 1.双指针移动删除空格\\n        // 对空格去重\\n        int fast = 0,slow = 0;\\n        // 1.1 删除\\n        // 找到第一个不为空格的元素\\n        while(s[fast] == ' ' && fast < len){fast++;}\\n        // 1.2 中间遇到空格\\n        while(fast < len){\\n            \\n            if(s[fast] != ' ' || (s[fast] == ' ' && s[fast-1] != ' ' && fast != 0)){\\n                s[slow++] = s[fast++];\\n            }else{\\n                while(s[fast] == ' ' && fast < len){fast++;}\\n            }\\n\\n        }\\n        // 1.3 结尾遇到空格\\n        if(s[slow - 1] == ' '){\\n            s.resize(slow - 1);\\n            len = slow - 1;\\n        }else{\\n            s.resize(slow);\\n            len = slow;\\n        }\\n\\n        // 2. 整体反转\\n        reverse(s,0,len-1);\\n\\n        // 3. 再对每个单词反转\\n        int l,r;\\n        for(l = 0,r = 0; r < len; ++r){\\n\\n            if(s[r] == ' '){\\n                reverse(s,l,r - 1);\\n                l = r + 1;\\n            }\\n        }\\n\\n        // 反转最后一个单词\\n        reverse(s,l,r - 1);\\n\\n        return s;\\n    }\\n\\n    // 反转\\n    void reverse(string &str,int l,int r){\\n        for(;l<r; ++l,--r){\\n            swap(str[l],str[r]);\\n        }\\n    }\\n};\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n\\n * 时间复杂度: o (n)\\n * 空间复杂度: o (1)\\n\\n\\n# 录后想法\\n\\n思路一致\\n\\n\\n# 总结\\n\\n删除中间段空格的核心判断代码：理解了 s [fast] 与 s [fast-1]\\n\\nif(s[fast] != ' ' || (s[fast] == ' ' && s[fast-1] != ' ' && fast != 0))\\n\\n\\n1\\n\\n\\n\\n# 剑指 offer58-ii. 左旋转字符串\\n\\n * 题目：剑指 offer58-ii. 左旋转字符串\\n\\n * 讲解：文章讲解\\n\\n * 建议：题解中的解法如果没接触过的话，应该会想不到\\n\\n\\n# 录前想法\\n\\n 1. 整体反转\\n 2. 倒数 k 个字符反转\\n 3. 正数 len - k 个字符反转\\n\\n以下代码已 ac (✔️)\\n\\nclass solution {\\npublic:\\n    string reverseleftwords(string s, int n) {\\n\\n        // abcdefg\\n        // gfedc ba\\n        // cdefg ab\\n\\n        // lrloseumgh\\n        // hgmu esolrl\\n        // umgh lrlose\\n\\n        int len = s.size();\\n        // 整体反转\\n        reverse(s,0,len-1);\\n\\n        // 倒数n个反转\\n        reverse(s,len-n,len-1);\\n\\n        // 0 ~ len - n 反转\\n        reverse(s,0,len-n-1);\\n\\n        return s;\\n    }\\n\\n    void reverse(string &str,int l,int r){\\n        for(;l<r;++l,--r){\\n            swap(str[l],str[r]);\\n        }\\n    }\\n};\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n\\n\\n\\n# 录后想法\\n\\n思路一致✌️\\n\\n\\n# 总结\\n\\n * 关于 char*、char [] 与 string 的初始化及转换\\n\\n剪枝操作的细节好难，还需要多加练习！\",\n      \"charsets\": {\n        \"cjk\": true\n      }\n    },\n    {\n      \"title\": \"Day06-哈希\",\n      \"frontmatter\": {\n        \"title\": \"Day06-哈希\",\n        \"date\": \"2023-05-30T01:13:06.000Z\",\n        \"permalink\": \"/pages/5d4a2f/\",\n        \"categories\": [\n          \"算法\",\n          \"算法打卡\"\n        ],\n        \"tags\": [\n          \"打卡\"\n        ]\n      },\n      \"regularPath\": \"/02.%E7%AE%97%E6%B3%95/01.%E7%AE%97%E6%B3%95%E6%89%93%E5%8D%A1/06.Day06-%E5%93%88%E5%B8%8C.html\",\n      \"relativePath\": \"02.算法/01.算法打卡/06.Day06-哈希.md\",\n      \"key\": \"v-24f403b8\",\n      \"path\": \"/pages/5d4a2f/\",\n      \"headers\": [\n        {\n          \"level\": 2,\n          \"title\": \"454.四数相加II\",\n          \"slug\": \"_454-四数相加ii\",\n          \"normalizedTitle\": \"454. 四数相加 ii\",\n          \"charIndex\": 4\n        },\n        {\n          \"level\": 3,\n          \"title\": \"录前想法\",\n          \"slug\": \"录前想法\",\n          \"normalizedTitle\": \"录前想法\",\n          \"charIndex\": 130\n        },\n        {\n          \"level\": 3,\n          \"title\": \"录后想法\",\n          \"slug\": \"录后想法\",\n          \"normalizedTitle\": \"录后想法\",\n          \"charIndex\": 850\n        },\n        {\n          \"level\": 3,\n          \"title\": \"总结\",\n          \"slug\": \"总结\",\n          \"normalizedTitle\": \"总结\",\n          \"charIndex\": 865\n        },\n        {\n          \"level\": 2,\n          \"title\": \"383. 赎金信\",\n          \"slug\": \"_383-赎金信\",\n          \"normalizedTitle\": \"383. 赎金信\",\n          \"charIndex\": 18\n        },\n        {\n          \"level\": 3,\n          \"title\": \"录前想法\",\n          \"slug\": \"录前想法-2\",\n          \"normalizedTitle\": \"录前想法\",\n          \"charIndex\": 130\n        },\n        {\n          \"level\": 3,\n          \"title\": \"录后想法\",\n          \"slug\": \"录后想法-2\",\n          \"normalizedTitle\": \"录后想法\",\n          \"charIndex\": 850\n        },\n        {\n          \"level\": 3,\n          \"title\": \"总结\",\n          \"slug\": \"总结-2\",\n          \"normalizedTitle\": \"总结\",\n          \"charIndex\": 865\n        },\n        {\n          \"level\": 2,\n          \"title\": \"15. 三数之和\",\n          \"slug\": \"_15-三数之和\",\n          \"normalizedTitle\": \"15. 三数之和\",\n          \"charIndex\": 28\n        },\n        {\n          \"level\": 3,\n          \"title\": \"录前想法\",\n          \"slug\": \"录前想法-3\",\n          \"normalizedTitle\": \"录前想法\",\n          \"charIndex\": 130\n        },\n        {\n          \"level\": 3,\n          \"title\": \"录后想法\",\n          \"slug\": \"录后想法-3\",\n          \"normalizedTitle\": \"录后想法\",\n          \"charIndex\": 850\n        },\n        {\n          \"level\": 3,\n          \"title\": \"总结\",\n          \"slug\": \"总结-3\",\n          \"normalizedTitle\": \"总结\",\n          \"charIndex\": 865\n        },\n        {\n          \"level\": 2,\n          \"title\": \"18. 四数之和\",\n          \"slug\": \"_18-四数之和\",\n          \"normalizedTitle\": \"18. 四数之和\",\n          \"charIndex\": 44\n        },\n        {\n          \"level\": 3,\n          \"title\": \"录前想法\",\n          \"slug\": \"录前想法-4\",\n          \"normalizedTitle\": \"录前想法\",\n          \"charIndex\": 130\n        },\n        {\n          \"level\": 3,\n          \"title\": \"录后想法\",\n          \"slug\": \"录后想法-4\",\n          \"normalizedTitle\": \"录后想法\",\n          \"charIndex\": 850\n        },\n        {\n          \"level\": 3,\n          \"title\": \"总结\",\n          \"slug\": \"总结-4\",\n          \"normalizedTitle\": \"总结\",\n          \"charIndex\": 865\n        },\n        {\n          \"level\": 2,\n          \"title\": \"总结\",\n          \"slug\": \"总结-5\",\n          \"normalizedTitle\": \"总结\",\n          \"charIndex\": 865\n        }\n      ],\n      \"excerpt\": \"<div class=\\\"custom-block tip\\\"><p class=\\\"custom-block-title\\\">提示</p>\\n<p>454. 四数相加 II、 383. 赎金信、 15. 三数之和 <code>【很难】</code>   、 18. 四数之和 <code>【很难】</code></p>\\n</div>\\n\",\n      \"lastUpdated\": \"6/2/2023, 6:34:00 PM\",\n      \"lastUpdatedTimestamp\": 1685702040000,\n      \"headersStr\": \"454.四数相加II 录前想法 录后想法 总结 383. 赎金信 录前想法 录后想法 总结 15. 三数之和 录前想法 录后想法 总结 18. 四数之和 录前想法 录后想法 总结 总结\",\n      \"content\": \"提示\\n\\n454. 四数相加 II、 383. 赎金信、 15. 三数之和 【很难】 、 18. 四数之和 【很难】\\n\\n\\n# 454. 四数相加 II\\n\\n * 题目：454. 四数相加 II\\n\\n * 讲解：文章讲解、视频讲解\\n\\n * 要求：map 巧解\\n\\n\\n# 录前想法\\n\\n做过，记得思路，两个为一组记录为 MAP 的 Key，再两个一组记录为 MAP 的 - Key\\n\\n下面是实现代码，已 AC (✔️)\\n\\nclass Solution {\\npublic:\\n    int fourSumCount(vector<int>& nums1, vector<int>& nums2, vector<int>& nums3, vector<int>& nums4) {\\n\\n        // 创建map\\n        unordered_map<int,int> map;\\n        \\n        int ans = 0;\\n\\n        // 第一组循环\\n        for(int num1 : nums1){\\n            for(int num2 : nums2){\\n                map[num1+num2]++;\\n            }\\n        }\\n\\n        // 第二组循环\\n        for(int num3 : nums3){\\n            for(int num4 : nums4){\\n                ans += map[-(num3+num4)];\\n            }\\n        }\\n\\n        return ans;\\n    }\\n};\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n\\n * 时间复杂度: O (n^2)\\n * 空间复杂度: O (n^2)\\n\\n\\n# 录后想法\\n\\n一致✌️\\n\\n\\n# 总结\\n\\n无\\n\\n\\n# 383. 赎金信\\n\\n * 题目：383. 赎金信\\n\\n * 讲解：文章讲解\\n\\n * 要求：和上一题同思路\\n\\n\\n# 录前想法\\n\\n与上一题思路一致，已 AC (✔️)\\n\\nclass Solution {\\npublic:\\n    bool canConstruct(string ransomNote, string magazine) {\\n\\n        // 创建map\\n        unordered_map<char,int> map;\\n\\n        // 放入ransomNote\\n        for(int i = 0; i < ransomNote.size(); ++i){\\n            map[ransomNote[i]]++;\\n        }\\n\\n        // 出magazine\\n        for(int i = 0; i < magazine.size(); ++i){\\n            map[magazine[i]]--;\\n        }\\n\\n        for(int i = 0; i < ransomNote.size(); ++i){\\n            if(map[ransomNote[i]] > 0){\\n                return false;\\n            }\\n        }\\n\\n        // 判断是否全部出完\\n        return true;\\n    }\\n};\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n\\n * 时间复杂度: O (n)\\n * 空间复杂度: O (1)\\n\\n\\n# 录后想法\\n\\nmap 的空间消耗要比数组大一些的，因为 map 要维护红黑树或者哈希表，而且还要做哈希函数，是费时的\\n\\n使用数组会节省空间\\n\\nclass Solution {\\npublic:\\n    bool canConstruct(string ransomNote, string magazine) {\\n\\n        // 创建map\\n        int arr[26] = {0};\\n\\n        // 放入ransomNote\\n        for(int i = 0; i < magazine.size(); ++i){\\n            arr[magazine[i] - 'a']++;\\n        }\\n\\n        // 出magazine\\n        for(int i = 0; i < ransomNote.size(); ++i){\\n            arr[ransomNote[i] - 'a']--;\\n\\n            if(arr[ransomNote[i] - 'a'] < 0){\\n                return false;\\n            }\\n        }\\n\\n        // 判断是否全部出完\\n        return true;\\n    }\\n};\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n\\n * 时间复杂度: O (n)\\n * 空间复杂度: O (1)\\n\\n\\n# 总结\\n\\nmap 固然好，但也开销大\\n\\n\\n# 15. 三数之和\\n\\n * 题目：15. 三数之和\\n\\n * 讲解：文章讲解、视频讲解\\n\\n * 要求：双指针\\n\\n\\n# 录前想法\\n\\n只想到了暴力的解法，双指针没想。。。\\n\\n\\n# 录后想法\\n\\n看过卡哥的讲解视频后，整理出以下实现思路：\\n\\n * i 确定 nums [i]，向后移动\\n * left 和 right 确定 nums [left] 和 nums [right]，向中间缩\\n\\nclass Solution {\\npublic:\\n    vector<vector<int>> threeSum(vector<int>& nums) {\\n        \\n        // 创建二位数组结果集合\\n\\n        // 排序\\n\\n        // 遍历\\n\\n            // 对i去重\\n\\n            // 三数之和 > 0\\n                // right--\\n\\n            // 三数之和 < 0\\n                // left++\\n\\n            // 三数之和 = 0\\n                // 收集结果\\n\\n                // 对left去重\\n\\n                // 对right去重\\n            \\n        // 返回结果集合\\n    }\\n};\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n\\n\\n以下是最终实现的代码，已 AC (✔️)：\\n\\nclass Solution {\\npublic:\\n    vector<vector<int>> threeSum(vector<int>& nums) {\\n        \\n        // 创建二位数组结果集合\\n        vector<vector<int>> result;\\n        int left,right;\\n\\n        // 排序\\n        sort(nums.begin(), nums.end());\\n\\n        // 遍历\\n        for(int i = 0; i < nums.size(); ++i){\\n\\n            if(nums[i] > 0){return result;}\\n\\n            // 对i去重\\n            if(i > 0 && nums[i] == nums[i-1]){continue;}\\n\\n            // 创建双指针\\n            left = i + 1;\\n            right = nums.size() - 1;\\n\\n            while(left < right){\\n                \\n                // 求和\\n                int tmp = nums[i] + nums[left] + nums[right];\\n                \\n                if(tmp > 0){// 三数之和 > 0\\n                    // right--\\n                    right--;\\n                }else if(tmp < 0){// 三数之和 < 0\\n                    // left++\\n                    left++;\\n                }else{// 三数之和 = 0\\n                    // 收集结果\\n                    result.push_back(vector<int>{nums[i],nums[left],nums[right]});\\n\\n                    // 对left去重\\n                    while(left < right && nums[left] == nums[left + 1]){\\n                        left++;\\n                    }\\n\\n                    // 对right去重\\n                    while(left < right && nums[right] == nums[right - 1]){\\n                        right--;\\n                    }\\n\\n                    // 同时缩小\\n                    left++;\\n                    right--;\\n                } \\n            }\\n        }\\n            \\n        // 返回结果集合\\n        return result;\\n    }\\n};\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n\\n\\n\\n# 总结\\n\\n * 要注意去重的细节\\n * 双指针收缩\\n\\n\\n# 18. 四数之和\\n\\n * 题目：18. 四数之和\\n * 讲解：文章讲解、视频讲解\\n * 要求：\\n   * 1. 为什么 454. 四数相加 II 会简单很多？\\n     2. 双指针\\n\\n\\n# 录前想法\\n\\n和三数之和的思路相似，学习完三数之和有思路写出代码，已 AC (✔️)\\n\\nclass Solution {\\npublic:\\n    vector<vector<int>> fourSum(vector<int>& nums, int target) {\\n\\n        int size = nums.size();     // 获取数组长度\\n        vector<vector<int>> result; // 结果集合\\n        long tmpSum = 0;             // 是数之和\\n        int left,right;             // 双指针\\n\\n        // 小于4判断\\n        if (size < 4) { return result; }\\n\\n        // 排序\\n        sort(nums.begin(), nums.end());\\n\\n        // 循环a\\n        for(int a = 0; a < size - 3; ++a){\\n            \\n            // 对a去重\\n            if(a > 0 && nums[a] == nums[a-1]){continue;}\\n\\n            // 循环b\\n            for(int b = a + 1; b < size - 2; ++b){\\n\\n                // 对b去重\\n                if(b > a + 1 && nums[b] == nums[b-1]){continue;}\\n\\n                // 双指针\\n                left = b + 1;\\n                right = size - 1;\\n\\n                // 双指针移动\\n                while(left < right){\\n\\n                    // 求和\\n                    tmpSum = (long)nums[a]+nums[b]+nums[left]+nums[right];\\n\\n                    // 对比target\\n                    if(tmpSum > target){\\n                        --right;\\n                    }else if(tmpSum < target){\\n                        ++left;\\n                    }else{\\n                        result.push_back(vector<int>{nums[a],nums[b],nums[left],nums[right]});\\n\\n                        // left 去重\\n                        while(left < right && nums[left] == nums[left+1]){++left;}\\n\\n                        // right去重\\n                        while(left < right && nums[right] == nums[right-1]){--right;}\\n\\n                        ++left;\\n                        --right;\\n                    }\\n                }\\n            }\\n        }\\n\\n        return result;\\n    }\\n};\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n\\n\\n\\n# 录后想法\\n\\n剪枝的细节操作，叹服\\n\\n整理完后，写出以下代码，已 AC (✔️)\\n\\n * 求和时 long 类型，防止溢出\\n\\nclass Solution {\\npublic:\\n    vector<vector<int>> fourSum(vector<int>& nums, int target) {\\n\\n        int size = nums.size();     // 获取数组长度\\n        vector<vector<int>> result; // 结果集合\\n        long tmpSum = 0;             // 是数之和 long防止溢出\\n        int left,right;             // 双指针\\n\\n        // 小于4判断\\n        if (size < 4) { return result; }\\n\\n        // 排序\\n        sort(nums.begin(), nums.end());\\n\\n        // 循环a\\n        for(int a = 0; a < size - 3; ++a){\\n            \\n            // 对a去重\\n            if(a > 0 && nums[a] == nums[a-1]){continue;}\\n\\n            // 循环b\\n            for(int b = a + 1; b < size - 2; ++b){\\n\\n                // 对b去重\\n                if(b > a + 1 && nums[b] == nums[b-1]){continue;}\\n\\n                // 一层剪枝\\n                if(nums[a]+nums[b] > 0 && target > 0 && nums[a]+nums[b]>target){break;}\\n                // 双指针\\n                left = b + 1;\\n                right = size - 1;\\n\\n                // 双指针移动\\n                while(left < right){\\n\\n                    // 求和\\n                    tmpSum = (long)nums[a]+nums[b]+nums[left]+nums[right];\\n\\n                    // 对比target\\n                    if(tmpSum > target){\\n                        --right;\\n                    }else if(tmpSum < target){\\n                        ++left;\\n                    }else{\\n                        result.push_back(vector<int>{nums[a],nums[b],nums[left],nums[right]});\\n\\n                        // left 去重\\n                        while(left < right && nums[left] == nums[left+1]){++left;}\\n\\n                        // right去重\\n                        while(left < right && nums[right] == nums[right-1]){--right;}\\n\\n                        ++left;\\n                        --right;\\n                    }\\n                }\\n            }\\n        }\\n\\n        return result;\\n    }\\n};\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n\\n\\n\\n# 总结\\n\\n * 细节的剪枝操作\\n\\n\\n# 总结\\n\\n三数之和与四数之和太难了，细节上的操作很多，侧面也反映对代码的掌握不足，继续刷！\",\n      \"normalizedContent\": \"提示\\n\\n454. 四数相加 ii、 383. 赎金信、 15. 三数之和 【很难】 、 18. 四数之和 【很难】\\n\\n\\n# 454. 四数相加 ii\\n\\n * 题目：454. 四数相加 ii\\n\\n * 讲解：文章讲解、视频讲解\\n\\n * 要求：map 巧解\\n\\n\\n# 录前想法\\n\\n做过，记得思路，两个为一组记录为 map 的 key，再两个一组记录为 map 的 - key\\n\\n下面是实现代码，已 ac (✔️)\\n\\nclass solution {\\npublic:\\n    int foursumcount(vector<int>& nums1, vector<int>& nums2, vector<int>& nums3, vector<int>& nums4) {\\n\\n        // 创建map\\n        unordered_map<int,int> map;\\n        \\n        int ans = 0;\\n\\n        // 第一组循环\\n        for(int num1 : nums1){\\n            for(int num2 : nums2){\\n                map[num1+num2]++;\\n            }\\n        }\\n\\n        // 第二组循环\\n        for(int num3 : nums3){\\n            for(int num4 : nums4){\\n                ans += map[-(num3+num4)];\\n            }\\n        }\\n\\n        return ans;\\n    }\\n};\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n\\n * 时间复杂度: o (n^2)\\n * 空间复杂度: o (n^2)\\n\\n\\n# 录后想法\\n\\n一致✌️\\n\\n\\n# 总结\\n\\n无\\n\\n\\n# 383. 赎金信\\n\\n * 题目：383. 赎金信\\n\\n * 讲解：文章讲解\\n\\n * 要求：和上一题同思路\\n\\n\\n# 录前想法\\n\\n与上一题思路一致，已 ac (✔️)\\n\\nclass solution {\\npublic:\\n    bool canconstruct(string ransomnote, string magazine) {\\n\\n        // 创建map\\n        unordered_map<char,int> map;\\n\\n        // 放入ransomnote\\n        for(int i = 0; i < ransomnote.size(); ++i){\\n            map[ransomnote[i]]++;\\n        }\\n\\n        // 出magazine\\n        for(int i = 0; i < magazine.size(); ++i){\\n            map[magazine[i]]--;\\n        }\\n\\n        for(int i = 0; i < ransomnote.size(); ++i){\\n            if(map[ransomnote[i]] > 0){\\n                return false;\\n            }\\n        }\\n\\n        // 判断是否全部出完\\n        return true;\\n    }\\n};\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n\\n * 时间复杂度: o (n)\\n * 空间复杂度: o (1)\\n\\n\\n# 录后想法\\n\\nmap 的空间消耗要比数组大一些的，因为 map 要维护红黑树或者哈希表，而且还要做哈希函数，是费时的\\n\\n使用数组会节省空间\\n\\nclass solution {\\npublic:\\n    bool canconstruct(string ransomnote, string magazine) {\\n\\n        // 创建map\\n        int arr[26] = {0};\\n\\n        // 放入ransomnote\\n        for(int i = 0; i < magazine.size(); ++i){\\n            arr[magazine[i] - 'a']++;\\n        }\\n\\n        // 出magazine\\n        for(int i = 0; i < ransomnote.size(); ++i){\\n            arr[ransomnote[i] - 'a']--;\\n\\n            if(arr[ransomnote[i] - 'a'] < 0){\\n                return false;\\n            }\\n        }\\n\\n        // 判断是否全部出完\\n        return true;\\n    }\\n};\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n\\n * 时间复杂度: o (n)\\n * 空间复杂度: o (1)\\n\\n\\n# 总结\\n\\nmap 固然好，但也开销大\\n\\n\\n# 15. 三数之和\\n\\n * 题目：15. 三数之和\\n\\n * 讲解：文章讲解、视频讲解\\n\\n * 要求：双指针\\n\\n\\n# 录前想法\\n\\n只想到了暴力的解法，双指针没想。。。\\n\\n\\n# 录后想法\\n\\n看过卡哥的讲解视频后，整理出以下实现思路：\\n\\n * i 确定 nums [i]，向后移动\\n * left 和 right 确定 nums [left] 和 nums [right]，向中间缩\\n\\nclass solution {\\npublic:\\n    vector<vector<int>> threesum(vector<int>& nums) {\\n        \\n        // 创建二位数组结果集合\\n\\n        // 排序\\n\\n        // 遍历\\n\\n            // 对i去重\\n\\n            // 三数之和 > 0\\n                // right--\\n\\n            // 三数之和 < 0\\n                // left++\\n\\n            // 三数之和 = 0\\n                // 收集结果\\n\\n                // 对left去重\\n\\n                // 对right去重\\n            \\n        // 返回结果集合\\n    }\\n};\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n\\n\\n以下是最终实现的代码，已 ac (✔️)：\\n\\nclass solution {\\npublic:\\n    vector<vector<int>> threesum(vector<int>& nums) {\\n        \\n        // 创建二位数组结果集合\\n        vector<vector<int>> result;\\n        int left,right;\\n\\n        // 排序\\n        sort(nums.begin(), nums.end());\\n\\n        // 遍历\\n        for(int i = 0; i < nums.size(); ++i){\\n\\n            if(nums[i] > 0){return result;}\\n\\n            // 对i去重\\n            if(i > 0 && nums[i] == nums[i-1]){continue;}\\n\\n            // 创建双指针\\n            left = i + 1;\\n            right = nums.size() - 1;\\n\\n            while(left < right){\\n                \\n                // 求和\\n                int tmp = nums[i] + nums[left] + nums[right];\\n                \\n                if(tmp > 0){// 三数之和 > 0\\n                    // right--\\n                    right--;\\n                }else if(tmp < 0){// 三数之和 < 0\\n                    // left++\\n                    left++;\\n                }else{// 三数之和 = 0\\n                    // 收集结果\\n                    result.push_back(vector<int>{nums[i],nums[left],nums[right]});\\n\\n                    // 对left去重\\n                    while(left < right && nums[left] == nums[left + 1]){\\n                        left++;\\n                    }\\n\\n                    // 对right去重\\n                    while(left < right && nums[right] == nums[right - 1]){\\n                        right--;\\n                    }\\n\\n                    // 同时缩小\\n                    left++;\\n                    right--;\\n                } \\n            }\\n        }\\n            \\n        // 返回结果集合\\n        return result;\\n    }\\n};\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n\\n\\n\\n# 总结\\n\\n * 要注意去重的细节\\n * 双指针收缩\\n\\n\\n# 18. 四数之和\\n\\n * 题目：18. 四数之和\\n * 讲解：文章讲解、视频讲解\\n * 要求：\\n   * 1. 为什么 454. 四数相加 ii 会简单很多？\\n     2. 双指针\\n\\n\\n# 录前想法\\n\\n和三数之和的思路相似，学习完三数之和有思路写出代码，已 ac (✔️)\\n\\nclass solution {\\npublic:\\n    vector<vector<int>> foursum(vector<int>& nums, int target) {\\n\\n        int size = nums.size();     // 获取数组长度\\n        vector<vector<int>> result; // 结果集合\\n        long tmpsum = 0;             // 是数之和\\n        int left,right;             // 双指针\\n\\n        // 小于4判断\\n        if (size < 4) { return result; }\\n\\n        // 排序\\n        sort(nums.begin(), nums.end());\\n\\n        // 循环a\\n        for(int a = 0; a < size - 3; ++a){\\n            \\n            // 对a去重\\n            if(a > 0 && nums[a] == nums[a-1]){continue;}\\n\\n            // 循环b\\n            for(int b = a + 1; b < size - 2; ++b){\\n\\n                // 对b去重\\n                if(b > a + 1 && nums[b] == nums[b-1]){continue;}\\n\\n                // 双指针\\n                left = b + 1;\\n                right = size - 1;\\n\\n                // 双指针移动\\n                while(left < right){\\n\\n                    // 求和\\n                    tmpsum = (long)nums[a]+nums[b]+nums[left]+nums[right];\\n\\n                    // 对比target\\n                    if(tmpsum > target){\\n                        --right;\\n                    }else if(tmpsum < target){\\n                        ++left;\\n                    }else{\\n                        result.push_back(vector<int>{nums[a],nums[b],nums[left],nums[right]});\\n\\n                        // left 去重\\n                        while(left < right && nums[left] == nums[left+1]){++left;}\\n\\n                        // right去重\\n                        while(left < right && nums[right] == nums[right-1]){--right;}\\n\\n                        ++left;\\n                        --right;\\n                    }\\n                }\\n            }\\n        }\\n\\n        return result;\\n    }\\n};\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n\\n\\n\\n# 录后想法\\n\\n剪枝的细节操作，叹服\\n\\n整理完后，写出以下代码，已 ac (✔️)\\n\\n * 求和时 long 类型，防止溢出\\n\\nclass solution {\\npublic:\\n    vector<vector<int>> foursum(vector<int>& nums, int target) {\\n\\n        int size = nums.size();     // 获取数组长度\\n        vector<vector<int>> result; // 结果集合\\n        long tmpsum = 0;             // 是数之和 long防止溢出\\n        int left,right;             // 双指针\\n\\n        // 小于4判断\\n        if (size < 4) { return result; }\\n\\n        // 排序\\n        sort(nums.begin(), nums.end());\\n\\n        // 循环a\\n        for(int a = 0; a < size - 3; ++a){\\n            \\n            // 对a去重\\n            if(a > 0 && nums[a] == nums[a-1]){continue;}\\n\\n            // 循环b\\n            for(int b = a + 1; b < size - 2; ++b){\\n\\n                // 对b去重\\n                if(b > a + 1 && nums[b] == nums[b-1]){continue;}\\n\\n                // 一层剪枝\\n                if(nums[a]+nums[b] > 0 && target > 0 && nums[a]+nums[b]>target){break;}\\n                // 双指针\\n                left = b + 1;\\n                right = size - 1;\\n\\n                // 双指针移动\\n                while(left < right){\\n\\n                    // 求和\\n                    tmpsum = (long)nums[a]+nums[b]+nums[left]+nums[right];\\n\\n                    // 对比target\\n                    if(tmpsum > target){\\n                        --right;\\n                    }else if(tmpsum < target){\\n                        ++left;\\n                    }else{\\n                        result.push_back(vector<int>{nums[a],nums[b],nums[left],nums[right]});\\n\\n                        // left 去重\\n                        while(left < right && nums[left] == nums[left+1]){++left;}\\n\\n                        // right去重\\n                        while(left < right && nums[right] == nums[right-1]){--right;}\\n\\n                        ++left;\\n                        --right;\\n                    }\\n                }\\n            }\\n        }\\n\\n        return result;\\n    }\\n};\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n\\n\\n\\n# 总结\\n\\n * 细节的剪枝操作\\n\\n\\n# 总结\\n\\n三数之和与四数之和太难了，细节上的操作很多，侧面也反映对代码的掌握不足，继续刷！\",\n      \"charsets\": {\n        \"cjk\": true\n      }\n    },\n    {\n      \"title\": \"Day05-哈希\",\n      \"frontmatter\": {\n        \"title\": \"Day05-哈希\",\n        \"date\": \"2023-05-29T16:34:30.000Z\",\n        \"permalink\": \"/pages/311b6b/\",\n        \"categories\": [\n          \"算法\",\n          \"算法打卡\"\n        ],\n        \"tags\": [\n          \"打卡\"\n        ]\n      },\n      \"regularPath\": \"/02.%E7%AE%97%E6%B3%95/01.%E7%AE%97%E6%B3%95%E6%89%93%E5%8D%A1/05.Day05-%E5%93%88%E5%B8%8C.html\",\n      \"relativePath\": \"02.算法/01.算法打卡/05.Day05-哈希.md\",\n      \"key\": \"v-72465a38\",\n      \"path\": \"/pages/311b6b/\",\n      \"headers\": [\n        {\n          \"level\": 2,\n          \"title\": \"哈希表理论基础\",\n          \"slug\": \"哈希表理论基础\",\n          \"normalizedTitle\": \"哈希表理论基础\",\n          \"charIndex\": 2\n        },\n        {\n          \"level\": 2,\n          \"title\": \"242.有效的字母异位词\",\n          \"slug\": \"_242-有效的字母异位词\",\n          \"normalizedTitle\": \"242. 有效的字母异位词\",\n          \"charIndex\": 10\n        },\n        {\n          \"level\": 3,\n          \"title\": \"录前想法\",\n          \"slug\": \"录前想法\",\n          \"normalizedTitle\": \"录前想法\",\n          \"charIndex\": 920\n        },\n        {\n          \"level\": 3,\n          \"title\": \"录后想法\",\n          \"slug\": \"录后想法\",\n          \"normalizedTitle\": \"录后想法\",\n          \"charIndex\": 1703\n        },\n        {\n          \"level\": 3,\n          \"title\": \"总结\",\n          \"slug\": \"总结\",\n          \"normalizedTitle\": \"总结\",\n          \"charIndex\": 128\n        },\n        {\n          \"level\": 2,\n          \"title\": \"349.两个数组的交集\",\n          \"slug\": \"_349-两个数组的交集\",\n          \"normalizedTitle\": \"349. 两个数组的交集\",\n          \"charIndex\": 24\n        },\n        {\n          \"level\": 3,\n          \"title\": \"录前想法\",\n          \"slug\": \"录前想法-2\",\n          \"normalizedTitle\": \"录前想法\",\n          \"charIndex\": 920\n        },\n        {\n          \"level\": 3,\n          \"title\": \"录后想法\",\n          \"slug\": \"录后想法-2\",\n          \"normalizedTitle\": \"录后想法\",\n          \"charIndex\": 1703\n        },\n        {\n          \"level\": 3,\n          \"title\": \"总结\",\n          \"slug\": \"总结-2\",\n          \"normalizedTitle\": \"总结\",\n          \"charIndex\": 128\n        },\n        {\n          \"level\": 2,\n          \"title\": \"202.快乐数\",\n          \"slug\": \"_202-快乐数\",\n          \"normalizedTitle\": \"202. 快乐数\",\n          \"charIndex\": 37\n        },\n        {\n          \"level\": 3,\n          \"title\": \"录前想法\",\n          \"slug\": \"录前想法-3\",\n          \"normalizedTitle\": \"录前想法\",\n          \"charIndex\": 920\n        },\n        {\n          \"level\": 3,\n          \"title\": \"录后想法\",\n          \"slug\": \"录后想法-3\",\n          \"normalizedTitle\": \"录后想法\",\n          \"charIndex\": 1703\n        },\n        {\n          \"level\": 3,\n          \"title\": \"总结\",\n          \"slug\": \"总结-3\",\n          \"normalizedTitle\": \"总结\",\n          \"charIndex\": 128\n        },\n        {\n          \"level\": 2,\n          \"title\": \"1.两数之和\",\n          \"slug\": \"_1-两数之和\",\n          \"normalizedTitle\": \"1. 两数之和\",\n          \"charIndex\": 46\n        },\n        {\n          \"level\": 3,\n          \"title\": \"录前想法\",\n          \"slug\": \"录前想法-4\",\n          \"normalizedTitle\": \"录前想法\",\n          \"charIndex\": 920\n        },\n        {\n          \"level\": 3,\n          \"title\": \"录后想法\",\n          \"slug\": \"录后想法-4\",\n          \"normalizedTitle\": \"录后想法\",\n          \"charIndex\": 1703\n        },\n        {\n          \"level\": 3,\n          \"title\": \"总结\",\n          \"slug\": \"总结-4\",\n          \"normalizedTitle\": \"总结\",\n          \"charIndex\": 128\n        },\n        {\n          \"level\": 2,\n          \"title\": \"总结\",\n          \"slug\": \"总结-5\",\n          \"normalizedTitle\": \"总结\",\n          \"charIndex\": 128\n        }\n      ],\n      \"excerpt\": \"<blockquote>\\n<p>哈希表理论基础、242. 有效的字母异位词、349. 两个数组的交集、202. 快乐数、1. 两数之和</p>\\n</blockquote>\\n\",\n      \"lastUpdated\": \"6/2/2023, 6:34:00 PM\",\n      \"lastUpdatedTimestamp\": 1685702040000,\n      \"headersStr\": \"哈希表理论基础 242.有效的字母异位词 录前想法 录后想法 总结 349.两个数组的交集 录前想法 录后想法 总结 202.快乐数 录前想法 录后想法 总结 1.两数之和 录前想法 录后想法 总结 总结\",\n      \"content\": \"> 哈希表理论基础、242. 有效的字母异位词、349. 两个数组的交集、202. 快乐数、1. 两数之和\\n\\n\\n# 哈希表理论基础\\n\\n * 讲解\\n\\n * 要求：了解哈希表的内部实现原理，哈希函数，哈希碰撞，以及常见哈希表的区别，数组，set 和 map\\n\\n总结：\\n\\n 1. 当我们遇到了要快速判断一个元素是否出现集合里的时候，就要考虑哈希法\\n 2. 牺牲了空间换取了时间\\n\\n集合                       底层实现   是否有序   数值是否可以重复   能否更改数值   查询效率       增删效率\\nstd::set                 红黑树    有序     否          否        O(log n)   O(log n)\\nstd::multiset            红黑树    有序     是          否        O(logn)    O(logn)\\nstd::unordered_set(✔️)   哈希表    无序     否          否        O(1)       O(1)\\n\\n----------------------------------------\\n\\n映射                   底层实现   是否有序     数值是否可以重复   能否更改数值     查询效率       增删效率\\nstd::map             红黑树    key 有序   key 不可重复   key 不可修改   O(logn)    O(logn)\\nstd::multimap        红黑树    key 有序   key 可重复    key 不可修改   O(log n)   O(log n)\\nstd::unordered_map   哈希表    key 无序   key 不可重复   key 不可修改   O(1)       O(1)\\n\\n\\n# 242. 有效的字母异位词\\n\\n * 题目：242. 有效的字母异位词\\n\\n * 讲解：文章讲解、视频讲解\\n\\n * 要求：数组用来做哈希表\\n\\n\\n# 录前想法\\n\\n按要求，数组作为哈希表来记录每个字符，s 字符串的字符 ++，t 字符串的字符 --，若最后 tmp 数组中都为 0 则为有效的字母异位词。\\n\\n以下代码已 AC (✔️)\\n\\nclass Solution {\\npublic:\\n    bool isAnagram(string s, string t) {\\n        \\n        if(s.size() != t.size()){return false;}\\n\\n        // 初始化数组\\n        int tmp[26] = {0};\\n\\n        // s.size() == t.size()\\n        for(int i = 0; i < s.size();++i){\\n            // 记录s字符串\\n            tmp[s[i] - 'a']++;\\n            // 从tmp中删除t字符串字符\\n            tmp[t[i] - 'a']--;\\n        }\\n\\n        // 查看tmp是否全为0\\n        for(int i = 0; i < 26;++i){\\n            cout<<tmp[i]<<endl;\\n            if(tmp[i] != 0){\\n                return false;\\n            }\\n        }\\n\\n        return true;\\n \\n    }\\n};\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n\\n * 时间复杂度: O (n)\\n * 空间复杂度: O (1)\\n\\n\\n# 录后想法\\n\\n思路一致✌️\\n\\n\\n# 总结\\n\\n无\\n\\n\\n# 349. 两个数组的交集\\n\\n * 题目：349. 两个数组的交集\\n\\n * 讲解：文章讲解、视频讲解\\n\\n * 要求：使用数组和 set 两种解法\\n\\n\\n# 录前想法\\n\\n> 数组\\n\\n 1. 定义 set 数据结构，防止结果重复\\n 2. 定义 1000 数组\\n 3. 记录 nums1 并判断 nums2 是否存在\\n 4. 类型转换并返回\\n\\n已 AC (✔️)\\n\\nclass Solution {\\npublic:\\n    vector<int> intersection(vector<int>& nums1, vector<int>& nums2) {\\n        // 去重结果集\\n        unordered_set<int> result;\\n\\n        // 使用数组\\n        int tmp[1000] = {0};\\n\\n        // 记录nums1\\n        for(int i = 0;i < nums1.size();++i){\\n            tmp[nums1[i]] = 1;\\n        }\\n\\n        // 判断nums2元素是否存在\\n        for(int i = 0;i < nums2.size();++i){\\n            if(tmp[nums2[i]] == 1){\\n                result.insert(nums2[i]);\\n            }\\n        }\\n\\n        return vector<int>(result.begin(), result.end());;\\n    }\\n};\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n\\n\\n> set 数据结构\\n\\n写出来和上面数组差不多，对 SET 数据结构操作不熟练。\\n\\n\\n# 录后想法\\n\\n主要是迭代器的使用，AC (✔️)\\n\\nclass Solution {\\npublic:\\n    vector<int> intersection(vector<int>& nums1, vector<int>& nums2) {\\n        // 去重结果集\\n        unordered_set<int> result;\\n        unordered_set<int> tmp(nums1.begin(),nums1.end());\\n\\n        // 使用SET\\n        for(int num : nums2){\\n            // tmp.find(num) 未找到则返回tmp.end()\\n            if(tmp.find(num) != tmp.end()){\\n                result.insert(num);\\n            }\\n        }\\n\\n        return vector<int>(result.begin(), result.end());;\\n    }\\n};\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n\\n\\n\\n# 总结\\n\\n * SET 数据结构的无重复\\n * 迭代器的使用\\n\\n\\n# 202. 快乐数\\n\\n * 题目：202. 快乐数\\n\\n * 讲解：文章讲解\\n\\n * 要求：set 的应用\\n\\n\\n# 录前想法\\n\\n暴力求和判断是否为 1，若出现和为个位数且不为 1 就是 false\\n\\n下面是代码实现，未通过 (❌)\\n\\nclass Solution {\\npublic:\\n    bool isHappy(int n) {\\n\\n        if(n == 1){return true;}\\n\\n        // 备份n\\n        int tmp;\\n        int len = 0,sum = 0,p;\\n\\n        while(1){\\n\\n            // 备份n\\n            tmp = n;\\n            // 初始化、归零\\n            len = 0;\\n            p = 10;\\n            sum = 0;\\n\\n            // 判断n有几位\\n            while(tmp != 0){\\n                tmp /= 10;\\n                ++len;\\n            }\\n\\n            // 若出现个位则直接返回false\\n            if(len == 1){\\n                return false;\\n            }\\n\\n            tmp = n;\\n\\n            // 循环记录平方和\\n            while(len--){\\n\\n                // 取数\\n                tmp = n%p;\\n                // 记录和\\n                sum += tmp * tmp;\\n\\n                if(len == 1){\\n                    tmp = n/p;\\n                    sum += tmp * tmp;\\n                    break;\\n                }\\n                \\n                p *= 10; \\n            }\\n\\n            // 判断是否为1\\n            if(sum == 1){\\n                return true;\\n            }else{\\n                n = sum;\\n            }\\n        }\\n\\n    }\\n};\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n\\n\\n应该是思路错了，且并没有用上 set\\n\\n\\n# 录后想法\\n\\n * 会 无限循环，那么也就是说求和的过程中，sum 会重复出现，这对解题很重要！\\n\\n看了卡哥的讲解后发现是思路错了，不是出现 sum 为个位数时返回 false，而是出现了重复的 sum\\n\\n根据这个思路可以写出以下代码：AC (✔️)\\n\\nclass Solution {\\npublic:\\n    bool isHappy(int n) {\\n\\n        int sum;\\n        unordered_set<int> tmp;\\n\\n        while(1){\\n\\n            // 循环记录平方和\\n            sum = 0;\\n            while(n){\\n                // 取个数数并平方和\\n                sum += (n%10)*(n%10);\\n                // 缩短位数（剔除个位）\\n                n /= 10;\\n            }\\n\\n            // 判断是否为1\\n            if(sum == 1){\\n                return true;\\n            }else{\\n                n = sum;\\n            }\\n\\n            // sum曾经出现过\\n            if(tmp.find(sum) != tmp.end()){\\n                return false;\\n            }else{\\n                tmp.insert(sum);\\n            }\\n\\n        }\\n    }\\n};\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n\\n\\n\\n# 总结\\n\\n * 无限循环 = 会重复出现值\\n\\n * 分解正数的个位数\\n   \\n   while(n){\\n       // 取个数数并平方和\\n       sum += (n%10)*(n%10);\\n       // 缩短位数（剔除个位）\\n       n /= 10;\\n   }\\n   \\n   \\n   1\\n   2\\n   3\\n   4\\n   5\\n   6\\n   \\n\\n\\n# 1. 两数之和\\n\\n * 题目：1. 两数之和\\n\\n * 讲解：文章讲解、视频讲解\\n\\n * 要求：map 解决哈希问题\\n\\n\\n# 录前想法\\n\\n 1. 可以暴力的循环比对\\n 2. 利用相加，使用 MAP 数据结构保存值，快速匹配\\n\\nMAP 的掌握不熟，下面代码为暴力解法，已 AC (✔️)\\n\\nclass Solution {\\npublic:\\n    vector<int> twoSum(vector<int>& nums, int target) {\\n        \\n       for(int i = 0; i < nums.size();++i){\\n            for(int j = i + 1; j < nums.size();++j){\\n                if(nums[i]+nums[j] == target){\\n                    return {i,j};\\n                }\\n            }\\n       }\\n\\n        return {};\\n    }\\n};\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n\\n\\n\\n# 录后想法\\n\\n思路正确，顺便学习以下 map 用法，AC (✔️)\\n\\nclass Solution {\\npublic:\\n    vector<int> twoSum(vector<int>& nums, int target) {\\n        \\n        // 将nums装入map中\\n        std::unordered_map <int,int> map;\\n        for(int i = 0; i < nums.size(); ++i){\\n            auto iter = map.find(target - nums[i]); \\n            if(iter != map.end()){\\n                // iter->second 下标\\n                // iter->frist  值\\n                return {iter->second, i};\\n            }\\n            map.insert(pair<int, int>(nums[i], i)); \\n        }\\n\\n        return {};\\n    }\\n};\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n\\n\\n\\n# 总结\\n\\n * 判断 key 有序无序选择使用 MAP\\n\\n映射                   底层实现   是否有序     数值是否可以重复   能否更改数值     查询效率       增删效率\\nstd::map             红黑树    key 有序   key 不可重复   key 不可修改   O(log n)   O(log n)\\nstd::multimap        红黑树    key 有序   key 可重复    key 不可修改   O(log n)   O(log n)\\nstd::unordered_map   哈希表    key 无序   key 不可重复   key 不可修改   O(1)       O(1)\\n\\n\\n# 总结\\n\\n 1. 数组、SET 集合、MAP 的应用\\n\\n * SET 集合：查元素、保存不重复\\n * MAP：查元素，需要下标\\n\\n集合                       底层实现   是否有序   数值是否可以重复   能否更改数值   查询效率       增删效率\\nstd::set                 红黑树    有序     否          否        O(log n)   O(log n)\\nstd::multiset            红黑树    有序     是          否        O(logn)    O(logn)\\nstd::unordered_set(✔️)   哈希表    无序     否          否        O(1)       O(1)\\n\\n----------------------------------------\\n\\n映射                   底层实现   是否有序     数值是否可以重复   能否更改数值     查询效率       增删效率\\nstd::map             红黑树    key 有序   key 不可重复   key 不可修改   O(logn)    O(logn)\\nstd::multimap        红黑树    key 有序   key 可重复    key 不可修改   O(log n)   O(log n)\\nstd::unordered_map   哈希表    key 无序   key 不可重复   key 不可修改   O(1)       O(1)\\n\\n 2. 迭代器的使用\\n\\n// 判断元素是否出现过\\nif(tmp.find(sum) != tmp.end()){}\\n\\n\\n1\\n2\\n\\n 3. 个位运算\\n\\nwhile(n){\\n\\tsum += n%10; // n%10个位\\n\\tn /= 10;     // 剔除已使用个位\\n}\\n\\n\\n1\\n2\\n3\\n4\\n\",\n      \"normalizedContent\": \"> 哈希表理论基础、242. 有效的字母异位词、349. 两个数组的交集、202. 快乐数、1. 两数之和\\n\\n\\n# 哈希表理论基础\\n\\n * 讲解\\n\\n * 要求：了解哈希表的内部实现原理，哈希函数，哈希碰撞，以及常见哈希表的区别，数组，set 和 map\\n\\n总结：\\n\\n 1. 当我们遇到了要快速判断一个元素是否出现集合里的时候，就要考虑哈希法\\n 2. 牺牲了空间换取了时间\\n\\n集合                       底层实现   是否有序   数值是否可以重复   能否更改数值   查询效率       增删效率\\nstd::set                 红黑树    有序     否          否        o(log n)   o(log n)\\nstd::multiset            红黑树    有序     是          否        o(logn)    o(logn)\\nstd::unordered_set(✔️)   哈希表    无序     否          否        o(1)       o(1)\\n\\n----------------------------------------\\n\\n映射                   底层实现   是否有序     数值是否可以重复   能否更改数值     查询效率       增删效率\\nstd::map             红黑树    key 有序   key 不可重复   key 不可修改   o(logn)    o(logn)\\nstd::multimap        红黑树    key 有序   key 可重复    key 不可修改   o(log n)   o(log n)\\nstd::unordered_map   哈希表    key 无序   key 不可重复   key 不可修改   o(1)       o(1)\\n\\n\\n# 242. 有效的字母异位词\\n\\n * 题目：242. 有效的字母异位词\\n\\n * 讲解：文章讲解、视频讲解\\n\\n * 要求：数组用来做哈希表\\n\\n\\n# 录前想法\\n\\n按要求，数组作为哈希表来记录每个字符，s 字符串的字符 ++，t 字符串的字符 --，若最后 tmp 数组中都为 0 则为有效的字母异位词。\\n\\n以下代码已 ac (✔️)\\n\\nclass solution {\\npublic:\\n    bool isanagram(string s, string t) {\\n        \\n        if(s.size() != t.size()){return false;}\\n\\n        // 初始化数组\\n        int tmp[26] = {0};\\n\\n        // s.size() == t.size()\\n        for(int i = 0; i < s.size();++i){\\n            // 记录s字符串\\n            tmp[s[i] - 'a']++;\\n            // 从tmp中删除t字符串字符\\n            tmp[t[i] - 'a']--;\\n        }\\n\\n        // 查看tmp是否全为0\\n        for(int i = 0; i < 26;++i){\\n            cout<<tmp[i]<<endl;\\n            if(tmp[i] != 0){\\n                return false;\\n            }\\n        }\\n\\n        return true;\\n \\n    }\\n};\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n\\n * 时间复杂度: o (n)\\n * 空间复杂度: o (1)\\n\\n\\n# 录后想法\\n\\n思路一致✌️\\n\\n\\n# 总结\\n\\n无\\n\\n\\n# 349. 两个数组的交集\\n\\n * 题目：349. 两个数组的交集\\n\\n * 讲解：文章讲解、视频讲解\\n\\n * 要求：使用数组和 set 两种解法\\n\\n\\n# 录前想法\\n\\n> 数组\\n\\n 1. 定义 set 数据结构，防止结果重复\\n 2. 定义 1000 数组\\n 3. 记录 nums1 并判断 nums2 是否存在\\n 4. 类型转换并返回\\n\\n已 ac (✔️)\\n\\nclass solution {\\npublic:\\n    vector<int> intersection(vector<int>& nums1, vector<int>& nums2) {\\n        // 去重结果集\\n        unordered_set<int> result;\\n\\n        // 使用数组\\n        int tmp[1000] = {0};\\n\\n        // 记录nums1\\n        for(int i = 0;i < nums1.size();++i){\\n            tmp[nums1[i]] = 1;\\n        }\\n\\n        // 判断nums2元素是否存在\\n        for(int i = 0;i < nums2.size();++i){\\n            if(tmp[nums2[i]] == 1){\\n                result.insert(nums2[i]);\\n            }\\n        }\\n\\n        return vector<int>(result.begin(), result.end());;\\n    }\\n};\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n\\n\\n> set 数据结构\\n\\n写出来和上面数组差不多，对 set 数据结构操作不熟练。\\n\\n\\n# 录后想法\\n\\n主要是迭代器的使用，ac (✔️)\\n\\nclass solution {\\npublic:\\n    vector<int> intersection(vector<int>& nums1, vector<int>& nums2) {\\n        // 去重结果集\\n        unordered_set<int> result;\\n        unordered_set<int> tmp(nums1.begin(),nums1.end());\\n\\n        // 使用set\\n        for(int num : nums2){\\n            // tmp.find(num) 未找到则返回tmp.end()\\n            if(tmp.find(num) != tmp.end()){\\n                result.insert(num);\\n            }\\n        }\\n\\n        return vector<int>(result.begin(), result.end());;\\n    }\\n};\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n\\n\\n\\n# 总结\\n\\n * set 数据结构的无重复\\n * 迭代器的使用\\n\\n\\n# 202. 快乐数\\n\\n * 题目：202. 快乐数\\n\\n * 讲解：文章讲解\\n\\n * 要求：set 的应用\\n\\n\\n# 录前想法\\n\\n暴力求和判断是否为 1，若出现和为个位数且不为 1 就是 false\\n\\n下面是代码实现，未通过 (❌)\\n\\nclass solution {\\npublic:\\n    bool ishappy(int n) {\\n\\n        if(n == 1){return true;}\\n\\n        // 备份n\\n        int tmp;\\n        int len = 0,sum = 0,p;\\n\\n        while(1){\\n\\n            // 备份n\\n            tmp = n;\\n            // 初始化、归零\\n            len = 0;\\n            p = 10;\\n            sum = 0;\\n\\n            // 判断n有几位\\n            while(tmp != 0){\\n                tmp /= 10;\\n                ++len;\\n            }\\n\\n            // 若出现个位则直接返回false\\n            if(len == 1){\\n                return false;\\n            }\\n\\n            tmp = n;\\n\\n            // 循环记录平方和\\n            while(len--){\\n\\n                // 取数\\n                tmp = n%p;\\n                // 记录和\\n                sum += tmp * tmp;\\n\\n                if(len == 1){\\n                    tmp = n/p;\\n                    sum += tmp * tmp;\\n                    break;\\n                }\\n                \\n                p *= 10; \\n            }\\n\\n            // 判断是否为1\\n            if(sum == 1){\\n                return true;\\n            }else{\\n                n = sum;\\n            }\\n        }\\n\\n    }\\n};\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n\\n\\n应该是思路错了，且并没有用上 set\\n\\n\\n# 录后想法\\n\\n * 会 无限循环，那么也就是说求和的过程中，sum 会重复出现，这对解题很重要！\\n\\n看了卡哥的讲解后发现是思路错了，不是出现 sum 为个位数时返回 false，而是出现了重复的 sum\\n\\n根据这个思路可以写出以下代码：ac (✔️)\\n\\nclass solution {\\npublic:\\n    bool ishappy(int n) {\\n\\n        int sum;\\n        unordered_set<int> tmp;\\n\\n        while(1){\\n\\n            // 循环记录平方和\\n            sum = 0;\\n            while(n){\\n                // 取个数数并平方和\\n                sum += (n%10)*(n%10);\\n                // 缩短位数（剔除个位）\\n                n /= 10;\\n            }\\n\\n            // 判断是否为1\\n            if(sum == 1){\\n                return true;\\n            }else{\\n                n = sum;\\n            }\\n\\n            // sum曾经出现过\\n            if(tmp.find(sum) != tmp.end()){\\n                return false;\\n            }else{\\n                tmp.insert(sum);\\n            }\\n\\n        }\\n    }\\n};\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n\\n\\n\\n# 总结\\n\\n * 无限循环 = 会重复出现值\\n\\n * 分解正数的个位数\\n   \\n   while(n){\\n       // 取个数数并平方和\\n       sum += (n%10)*(n%10);\\n       // 缩短位数（剔除个位）\\n       n /= 10;\\n   }\\n   \\n   \\n   1\\n   2\\n   3\\n   4\\n   5\\n   6\\n   \\n\\n\\n# 1. 两数之和\\n\\n * 题目：1. 两数之和\\n\\n * 讲解：文章讲解、视频讲解\\n\\n * 要求：map 解决哈希问题\\n\\n\\n# 录前想法\\n\\n 1. 可以暴力的循环比对\\n 2. 利用相加，使用 map 数据结构保存值，快速匹配\\n\\nmap 的掌握不熟，下面代码为暴力解法，已 ac (✔️)\\n\\nclass solution {\\npublic:\\n    vector<int> twosum(vector<int>& nums, int target) {\\n        \\n       for(int i = 0; i < nums.size();++i){\\n            for(int j = i + 1; j < nums.size();++j){\\n                if(nums[i]+nums[j] == target){\\n                    return {i,j};\\n                }\\n            }\\n       }\\n\\n        return {};\\n    }\\n};\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n\\n\\n\\n# 录后想法\\n\\n思路正确，顺便学习以下 map 用法，ac (✔️)\\n\\nclass solution {\\npublic:\\n    vector<int> twosum(vector<int>& nums, int target) {\\n        \\n        // 将nums装入map中\\n        std::unordered_map <int,int> map;\\n        for(int i = 0; i < nums.size(); ++i){\\n            auto iter = map.find(target - nums[i]); \\n            if(iter != map.end()){\\n                // iter->second 下标\\n                // iter->frist  值\\n                return {iter->second, i};\\n            }\\n            map.insert(pair<int, int>(nums[i], i)); \\n        }\\n\\n        return {};\\n    }\\n};\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n\\n\\n\\n# 总结\\n\\n * 判断 key 有序无序选择使用 map\\n\\n映射                   底层实现   是否有序     数值是否可以重复   能否更改数值     查询效率       增删效率\\nstd::map             红黑树    key 有序   key 不可重复   key 不可修改   o(log n)   o(log n)\\nstd::multimap        红黑树    key 有序   key 可重复    key 不可修改   o(log n)   o(log n)\\nstd::unordered_map   哈希表    key 无序   key 不可重复   key 不可修改   o(1)       o(1)\\n\\n\\n# 总结\\n\\n 1. 数组、set 集合、map 的应用\\n\\n * set 集合：查元素、保存不重复\\n * map：查元素，需要下标\\n\\n集合                       底层实现   是否有序   数值是否可以重复   能否更改数值   查询效率       增删效率\\nstd::set                 红黑树    有序     否          否        o(log n)   o(log n)\\nstd::multiset            红黑树    有序     是          否        o(logn)    o(logn)\\nstd::unordered_set(✔️)   哈希表    无序     否          否        o(1)       o(1)\\n\\n----------------------------------------\\n\\n映射                   底层实现   是否有序     数值是否可以重复   能否更改数值     查询效率       增删效率\\nstd::map             红黑树    key 有序   key 不可重复   key 不可修改   o(logn)    o(logn)\\nstd::multimap        红黑树    key 有序   key 可重复    key 不可修改   o(log n)   o(log n)\\nstd::unordered_map   哈希表    key 无序   key 不可重复   key 不可修改   o(1)       o(1)\\n\\n 2. 迭代器的使用\\n\\n// 判断元素是否出现过\\nif(tmp.find(sum) != tmp.end()){}\\n\\n\\n1\\n2\\n\\n 3. 个位运算\\n\\nwhile(n){\\n\\tsum += n%10; // n%10个位\\n\\tn /= 10;     // 剔除已使用个位\\n}\\n\\n\\n1\\n2\\n3\\n4\\n\",\n      \"charsets\": {\n        \"cjk\": true\n      }\n    },\n    {\n      \"title\": \"Day09-栈与队列\",\n      \"frontmatter\": {\n        \"title\": \"Day09-栈与队列\",\n        \"date\": \"2023-06-02T09:38:28.000Z\",\n        \"permalink\": \"/pages/5b91fa/\",\n        \"categories\": [\n          \"算法\",\n          \"算法打卡\"\n        ],\n        \"tags\": [\n          \"打卡\"\n        ]\n      },\n      \"regularPath\": \"/02.%E7%AE%97%E6%B3%95/01.%E7%AE%97%E6%B3%95%E6%89%93%E5%8D%A1/09.Day09-%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97.html\",\n      \"relativePath\": \"02.算法/01.算法打卡/09.Day09-栈与队列.md\",\n      \"key\": \"v-ea597386\",\n      \"path\": \"/pages/5b91fa/\",\n      \"headers\": [\n        {\n          \"level\": 2,\n          \"title\": \"理论基础\",\n          \"slug\": \"理论基础\",\n          \"normalizedTitle\": \"理论基础\",\n          \"charIndex\": 2\n        },\n        {\n          \"level\": 3,\n          \"title\": \"三个常见STL版本\",\n          \"slug\": \"三个常见stl版本\",\n          \"normalizedTitle\": \"三个常见 stl 版本\",\n          \"charIndex\": 44\n        },\n        {\n          \"level\": 3,\n          \"title\": \"四个问题\",\n          \"slug\": \"四个问题\",\n          \"normalizedTitle\": \"四个问题\",\n          \"charIndex\": 337\n        },\n        {\n          \"level\": 2,\n          \"title\": \"232.用栈实现队列\",\n          \"slug\": \"_232-用栈实现队列\",\n          \"normalizedTitle\": \"232. 用栈实现队列\",\n          \"charIndex\": 7\n        },\n        {\n          \"level\": 3,\n          \"title\": \"录前想法\",\n          \"slug\": \"录前想法\",\n          \"normalizedTitle\": \"录前想法\",\n          \"charIndex\": 1338\n        },\n        {\n          \"level\": 3,\n          \"title\": \"录后想法\",\n          \"slug\": \"录后想法\",\n          \"normalizedTitle\": \"录后想法\",\n          \"charIndex\": 1381\n        },\n        {\n          \"level\": 2,\n          \"title\": \"225. 用队列实现栈\",\n          \"slug\": \"_225-用队列实现栈\",\n          \"normalizedTitle\": \"225. 用队列实现栈\",\n          \"charIndex\": 19\n        },\n        {\n          \"level\": 3,\n          \"title\": \"录前想法\",\n          \"slug\": \"录前想法-2\",\n          \"normalizedTitle\": \"录前想法\",\n          \"charIndex\": 1338\n        },\n        {\n          \"level\": 3,\n          \"title\": \"录后想法\",\n          \"slug\": \"录后想法-2\",\n          \"normalizedTitle\": \"录后想法\",\n          \"charIndex\": 1381\n        },\n        {\n          \"level\": 2,\n          \"title\": \"总结\",\n          \"slug\": \"总结\",\n          \"normalizedTitle\": \"总结\",\n          \"charIndex\": 3213\n        }\n      ],\n      \"excerpt\": \"<blockquote>\\n<p>理论基础、232. 用栈实现队列、225. 用队列实现栈</p>\\n</blockquote>\\n\",\n      \"lastUpdated\": \"6/3/2023, 3:44:40 PM\",\n      \"lastUpdatedTimestamp\": 1685778280000,\n      \"headersStr\": \"理论基础 三个常见STL版本 四个问题 232.用栈实现队列 录前想法 录后想法 225. 用队列实现栈 录前想法 录后想法 总结\",\n      \"content\": \"> 理论基础、232. 用栈实现队列、225. 用队列实现栈\\n\\n\\n# 理论基础\\n\\n\\n# 三个常见 STL 版本\\n\\n 1. HP STL 其他版本的 C++ STL，一般是以 HP STL 为蓝本实现出来的，HP STL 是 C++ STL 的第一个实现版本，而且开放源代码。\\n\\n 2. P.J.Plauger STL 由 P.J.Plauger 参照 HP STL 实现出来的，被 Visual C++ 编译器所采用，不是开源的。\\n\\n 3. SGI STL 由 Silicon Graphics Computer Systems 公司参照 HP STL 实现，被 Linux 的 C++ 编译器 GCC 所采用，SGI STL 是开源软件，源码可读性甚高。(主要)\\n\\n\\n# 四个问题\\n\\n>  1. C++ 中 stack 是容器么？\\n>  2. 我们使用的 stack 是属于哪个版本的 STL？\\n>  3. 我们使用的 STL 中 stack 是如何实现的？\\n>  4. stack 提供迭代器来遍历 stack 空间么？\\n\\n 1. C++ 中 stack 是容器么？\\n    \\n    不属于容器，栈是以底层容器完成其所有的工作，对外提供统一的接口，底层容器是可插拔的（也就是说我们可以控制使用哪种容器来实现栈的功能）。\\n\\n所以 STL 中栈往往不被归类为容器，而被归类为 container adapter（容器适配器）。\\n\\n 2. 我们使用的 stack 是属于哪个版本的 STL？\\n\\n * Visual C++ 编译器所采用 P.J.Plauger STL\\n\\n * Linux 的 C++ 编译器 GCC 所采用 SGI STL\\n\\n 3. 我们使用的 STL 中 stack 是如何实现的？\\n\\n栈的底层实现可以是 vector，deque，list 都是可以的， 主要就是数组和链表的底层实现。\\n\\n\\n\\n我们常用的 SGI STL，默认是以 deque 为缺省情况下栈和队列的底层结构。\\n\\ndeque 是一个双向队列，只要封住一段，只开通另一端就可以实现栈的逻辑了。\\n\\n----------------------------------------\\n\\n我们也可以指定 vector 为栈的底层实现，初始化语句如下：\\n\\nstd::stack<int, std::vector<int> > third;  // 使用vector为底层容器的栈\\n\\n\\n1\\n\\n\\n也可以指定 list 为起底层实现，初始化 queue 的语句如下：\\n\\nstd::queue<int, std::list<int>> third; // 定义以list为底层容器的队列\\n\\n\\n1\\n\\n 4. stack 提供迭代器来遍历 stack 空间么？\\n\\nNO，栈提供 push 和 pop 等等接口，所有元素必须符合先进后出规则，所以栈不提供走访功能，也不提供迭代器 (iterator)。 不像是 set 或者 map 提供迭代器 iterator 来遍历所有元素。\\n\\n\\n# 232. 用栈实现队列\\n\\n * 题目：232. 用栈实现队列\\n\\n * 讲解：文章讲解、视频讲解\\n\\n * 要求：模拟过程\\n\\n\\n# 录前想法\\n\\n使用两个栈实现单向的队列（先进先出），没有自己动手实现，讲解视频\\n\\n\\n# 录后想法\\n\\n * 双栈（进出栈的设计）\\n * peek () 函数设计时的巧用\\n\\n\\n\\n以下时看完讲解后的实现代码，已 AC (✔️)\\n\\nclass MyQueue {\\npublic:\\n    MyQueue() {\\n\\n    }\\n    \\n    void push(int x) {\\n        stIn.push(x);\\n    }\\n    \\n    int pop() {\\n        // 输出栈为空\\n        if(stOut.empty()){\\n            // 将输入栈全部放入\\n            while(!stIn.empty()){\\n                stOut.push(stIn.top());\\n                stIn.pop();\\n            }\\n        }\\n        int result = stOut.top();\\n        stOut.pop();\\n        return result;\\n    }\\n    \\n    int peek() {\\n        // 先从输出栈中弹出\\n        int tmp = this->pop();\\n        // 再放入输出栈\\n        stOut.push(tmp);\\n        return tmp;\\n    }\\n    \\n    bool empty() {\\n        return stIn.empty() && stOut.empty();\\n    }\\nprivate:\\n    stack<int> stIn;\\n    stack<int> stOut;\\n};\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n\\n\\n\\n# 225. 用队列实现栈\\n\\n * 题目：225. 用队列实现栈\\n\\n * 讲解：文章讲解、视频讲解\\n\\n * 要求：用一个队列模拟栈\\n\\n\\n# 录前想法\\n\\n只考虑了使用一个队列模拟栈的情况，核心还是出栈的设计，我的思路是通过出不停的出队列和入队列将最后一个元素推到第一个元素的位置上，再进行操作\\n\\n * 1 2 3\\n * 2 3 1\\n * 3 1 2\\n\\n以下是实现代码，已 AC (✔️)\\n\\nclass MyStack {\\npublic:\\n    MyStack() {\\n\\n    }\\n    \\n    void push(int x) {\\n        q.push(x);\\n    }\\n    \\n    int pop() {\\n        int size = q.size();\\n        int result = q.back();\\n\\n        // 循环进出，暴露出最后一个元素\\n        while(--size){\\n            // 获取第一个元素\\n            int tmp = q.front();\\n            // 第一个元素出队\\n            q.pop();\\n            // 将其再插入末尾\\n            q.push(tmp);\\n        }\\n\\n        // 删除最后一个元素\\n        q.pop();\\n\\n        return result;\\n    }\\n    \\n    int top() {\\n        return q.back();\\n    }\\n    \\n    bool empty() {\\n        return q.empty();\\n    }\\nprivate:\\n    queue<int> q;\\n};\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n\\n * 时间复杂度: push 为 O (n)，其他为 O (1)\\n * 空间复杂度: O (n)\\n\\n\\n# 录后想法\\n\\n和卡哥思路一致✌️\\n\\n\\n# 总结\\n\\nQueue类 成员函数如下：\\n\\n * back () 返回最后一个元素\\n * empty () 如果队列空则返回真\\n * front () 返回第一个元素\\n * pop () 删除第一个元素\\n * push () 在末尾加入一个元素\\n * size () 返回队列中元素的个数\\n\\nStack类 成员函数如下：\\n\\n * 出栈：push ()\\n * 压栈：pop ()\\n * 栈是否为空：empty ()\\n * 栈的大小：size ()\\n * 访问栈顶：top ()\",\n      \"normalizedContent\": \"> 理论基础、232. 用栈实现队列、225. 用队列实现栈\\n\\n\\n# 理论基础\\n\\n\\n# 三个常见 stl 版本\\n\\n 1. hp stl 其他版本的 c++ stl，一般是以 hp stl 为蓝本实现出来的，hp stl 是 c++ stl 的第一个实现版本，而且开放源代码。\\n\\n 2. p.j.plauger stl 由 p.j.plauger 参照 hp stl 实现出来的，被 visual c++ 编译器所采用，不是开源的。\\n\\n 3. sgi stl 由 silicon graphics computer systems 公司参照 hp stl 实现，被 linux 的 c++ 编译器 gcc 所采用，sgi stl 是开源软件，源码可读性甚高。(主要)\\n\\n\\n# 四个问题\\n\\n>  1. c++ 中 stack 是容器么？\\n>  2. 我们使用的 stack 是属于哪个版本的 stl？\\n>  3. 我们使用的 stl 中 stack 是如何实现的？\\n>  4. stack 提供迭代器来遍历 stack 空间么？\\n\\n 1. c++ 中 stack 是容器么？\\n    \\n    不属于容器，栈是以底层容器完成其所有的工作，对外提供统一的接口，底层容器是可插拔的（也就是说我们可以控制使用哪种容器来实现栈的功能）。\\n\\n所以 stl 中栈往往不被归类为容器，而被归类为 container adapter（容器适配器）。\\n\\n 2. 我们使用的 stack 是属于哪个版本的 stl？\\n\\n * visual c++ 编译器所采用 p.j.plauger stl\\n\\n * linux 的 c++ 编译器 gcc 所采用 sgi stl\\n\\n 3. 我们使用的 stl 中 stack 是如何实现的？\\n\\n栈的底层实现可以是 vector，deque，list 都是可以的， 主要就是数组和链表的底层实现。\\n\\n\\n\\n我们常用的 sgi stl，默认是以 deque 为缺省情况下栈和队列的底层结构。\\n\\ndeque 是一个双向队列，只要封住一段，只开通另一端就可以实现栈的逻辑了。\\n\\n----------------------------------------\\n\\n我们也可以指定 vector 为栈的底层实现，初始化语句如下：\\n\\nstd::stack<int, std::vector<int> > third;  // 使用vector为底层容器的栈\\n\\n\\n1\\n\\n\\n也可以指定 list 为起底层实现，初始化 queue 的语句如下：\\n\\nstd::queue<int, std::list<int>> third; // 定义以list为底层容器的队列\\n\\n\\n1\\n\\n 4. stack 提供迭代器来遍历 stack 空间么？\\n\\nno，栈提供 push 和 pop 等等接口，所有元素必须符合先进后出规则，所以栈不提供走访功能，也不提供迭代器 (iterator)。 不像是 set 或者 map 提供迭代器 iterator 来遍历所有元素。\\n\\n\\n# 232. 用栈实现队列\\n\\n * 题目：232. 用栈实现队列\\n\\n * 讲解：文章讲解、视频讲解\\n\\n * 要求：模拟过程\\n\\n\\n# 录前想法\\n\\n使用两个栈实现单向的队列（先进先出），没有自己动手实现，讲解视频\\n\\n\\n# 录后想法\\n\\n * 双栈（进出栈的设计）\\n * peek () 函数设计时的巧用\\n\\n\\n\\n以下时看完讲解后的实现代码，已 ac (✔️)\\n\\nclass myqueue {\\npublic:\\n    myqueue() {\\n\\n    }\\n    \\n    void push(int x) {\\n        stin.push(x);\\n    }\\n    \\n    int pop() {\\n        // 输出栈为空\\n        if(stout.empty()){\\n            // 将输入栈全部放入\\n            while(!stin.empty()){\\n                stout.push(stin.top());\\n                stin.pop();\\n            }\\n        }\\n        int result = stout.top();\\n        stout.pop();\\n        return result;\\n    }\\n    \\n    int peek() {\\n        // 先从输出栈中弹出\\n        int tmp = this->pop();\\n        // 再放入输出栈\\n        stout.push(tmp);\\n        return tmp;\\n    }\\n    \\n    bool empty() {\\n        return stin.empty() && stout.empty();\\n    }\\nprivate:\\n    stack<int> stin;\\n    stack<int> stout;\\n};\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n\\n\\n\\n# 225. 用队列实现栈\\n\\n * 题目：225. 用队列实现栈\\n\\n * 讲解：文章讲解、视频讲解\\n\\n * 要求：用一个队列模拟栈\\n\\n\\n# 录前想法\\n\\n只考虑了使用一个队列模拟栈的情况，核心还是出栈的设计，我的思路是通过出不停的出队列和入队列将最后一个元素推到第一个元素的位置上，再进行操作\\n\\n * 1 2 3\\n * 2 3 1\\n * 3 1 2\\n\\n以下是实现代码，已 ac (✔️)\\n\\nclass mystack {\\npublic:\\n    mystack() {\\n\\n    }\\n    \\n    void push(int x) {\\n        q.push(x);\\n    }\\n    \\n    int pop() {\\n        int size = q.size();\\n        int result = q.back();\\n\\n        // 循环进出，暴露出最后一个元素\\n        while(--size){\\n            // 获取第一个元素\\n            int tmp = q.front();\\n            // 第一个元素出队\\n            q.pop();\\n            // 将其再插入末尾\\n            q.push(tmp);\\n        }\\n\\n        // 删除最后一个元素\\n        q.pop();\\n\\n        return result;\\n    }\\n    \\n    int top() {\\n        return q.back();\\n    }\\n    \\n    bool empty() {\\n        return q.empty();\\n    }\\nprivate:\\n    queue<int> q;\\n};\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n\\n * 时间复杂度: push 为 o (n)，其他为 o (1)\\n * 空间复杂度: o (n)\\n\\n\\n# 录后想法\\n\\n和卡哥思路一致✌️\\n\\n\\n# 总结\\n\\nqueue类 成员函数如下：\\n\\n * back () 返回最后一个元素\\n * empty () 如果队列空则返回真\\n * front () 返回第一个元素\\n * pop () 删除第一个元素\\n * push () 在末尾加入一个元素\\n * size () 返回队列中元素的个数\\n\\nstack类 成员函数如下：\\n\\n * 出栈：push ()\\n * 压栈：pop ()\\n * 栈是否为空：empty ()\\n * 栈的大小：size ()\\n * 访问栈顶：top ()\",\n      \"charsets\": {\n        \"cjk\": true\n      }\n    },\n    {\n      \"title\": \"Day10-栈与队列\",\n      \"frontmatter\": {\n        \"title\": \"Day10-栈与队列\",\n        \"date\": \"2023-06-03T11:05:34.000Z\",\n        \"permalink\": \"/pages/51e036/\",\n        \"categories\": [\n          \"算法\",\n          \"算法打卡\"\n        ],\n        \"tags\": [\n          \"打卡\"\n        ]\n      },\n      \"regularPath\": \"/02.%E7%AE%97%E6%B3%95/01.%E7%AE%97%E6%B3%95%E6%89%93%E5%8D%A1/10.Day10-%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97.html\",\n      \"relativePath\": \"02.算法/01.算法打卡/10.Day10-栈与队列.md\",\n      \"key\": \"v-7483b8bd\",\n      \"path\": \"/pages/51e036/\",\n      \"headers\": [\n        {\n          \"level\": 2,\n          \"title\": \"20.有效的括号\",\n          \"slug\": \"_20-有效的括号\",\n          \"normalizedTitle\": \"20. 有效的括号\",\n          \"charIndex\": 2\n        },\n        {\n          \"level\": 3,\n          \"title\": \"录前想法\",\n          \"slug\": \"录前想法\",\n          \"normalizedTitle\": \"录前想法\",\n          \"charIndex\": 118\n        },\n        {\n          \"level\": 3,\n          \"title\": \"录后想法\",\n          \"slug\": \"录后想法\",\n          \"normalizedTitle\": \"录后想法\",\n          \"charIndex\": 1411\n        },\n        {\n          \"level\": 2,\n          \"title\": \"1047. 删除字符串中的所有相邻重复项\",\n          \"slug\": \"_1047-删除字符串中的所有相邻重复项\",\n          \"normalizedTitle\": \"1047. 删除字符串中的所有相邻重复项\",\n          \"charIndex\": 12\n        },\n        {\n          \"level\": 3,\n          \"title\": \"录前想法\",\n          \"slug\": \"录前想法-2\",\n          \"normalizedTitle\": \"录前想法\",\n          \"charIndex\": 118\n        },\n        {\n          \"level\": 3,\n          \"title\": \"录后想法\",\n          \"slug\": \"录后想法-2\",\n          \"normalizedTitle\": \"录后想法\",\n          \"charIndex\": 1411\n        },\n        {\n          \"level\": 3,\n          \"title\": \"总结\",\n          \"slug\": \"总结\",\n          \"normalizedTitle\": \"总结\",\n          \"charIndex\": 2180\n        },\n        {\n          \"level\": 2,\n          \"title\": \"150. 逆波兰表达式求值\",\n          \"slug\": \"_150-逆波兰表达式求值\",\n          \"normalizedTitle\": \"150. 逆波兰表达式求值\",\n          \"charIndex\": 33\n        },\n        {\n          \"level\": 3,\n          \"title\": \"录前想法\",\n          \"slug\": \"录前想法-3\",\n          \"normalizedTitle\": \"录前想法\",\n          \"charIndex\": 118\n        },\n        {\n          \"level\": 3,\n          \"title\": \"录后想法\",\n          \"slug\": \"录后想法-3\",\n          \"normalizedTitle\": \"录后想法\",\n          \"charIndex\": 1411\n        },\n        {\n          \"level\": 3,\n          \"title\": \"总结\",\n          \"slug\": \"总结-2\",\n          \"normalizedTitle\": \"总结\",\n          \"charIndex\": 2180\n        }\n      ],\n      \"excerpt\": \"<blockquote>\\n<p>20. 有效的括号、1047. 删除字符串中的所有相邻重复项、150. 逆波兰表达式求值</p>\\n</blockquote>\\n\",\n      \"lastUpdated\": \"6/3/2023, 3:44:40 PM\",\n      \"lastUpdatedTimestamp\": 1685778280000,\n      \"headersStr\": \"20.有效的括号 录前想法 录后想法 1047. 删除字符串中的所有相邻重复项 录前想法 录后想法 总结 150. 逆波兰表达式求值 录前想法 录后想法 总结\",\n      \"content\": \"> 20. 有效的括号、1047. 删除字符串中的所有相邻重复项、150. 逆波兰表达式求值\\n\\n\\n# 20. 有效的括号\\n\\n * 题目：20. 有效的括号\\n\\n * 讲解：文章讲解、视频讲解\\n\\n * 要求：思考有哪些不匹配的场景\\n\\n\\n# 录前想法\\n\\n遇到 ([{ 就直接进栈，若遇到 }]) 需要先判断栈是否为空，若为空则直接返回 false，若栈中 top () 不是对应的另一半元素，也直接返回 false\\n\\n代码实现如下，已 AC (✔️)\\n\\nclass Solution {\\npublic:\\n    bool isValid(string str) {\\n\\n        stack<char> s;\\n\\n        for(int i = 0; i < str.size(); ++i){\\n\\n            if(str[i] == '(' || str[i] == '[' || str[i] == '{'){\\n                s.push(str[i]);\\n                continue;\\n            }\\n\\n            // switch case\\n            switch(str[i]){\\n                case ')':\\n                    if(s.empty() || s.top() != '('){\\n                        return false;\\n                    }else{\\n                        s.pop();\\n                    }\\n                    break;\\n                case ']':\\n                    if(s.empty() || s.top() != '['){\\n                        return false;\\n                    }else{\\n                        s.pop();\\n                    }\\n                    break;\\n                case '}':\\n                    if(s.empty() || s.top() != '{'){\\n                        return false;\\n                    }else{\\n                        s.pop();\\n                    }\\n            }\\n        }\\n\\n        return s.empty();\\n    }   \\n};\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n\\n * 时间复杂度: O (n)\\n * 空间复杂度: O (n)\\n\\n\\n# 录后想法\\n\\n\\n\\n卡哥的想法更精炼，没注意到奇数的情况！\\n\\n根据卡哥的思路，不难写出以下代码，已 AC (✔️)\\n\\nclass Solution {\\npublic:\\n    bool isValid(string s) {\\n\\n        // 排除奇数情况\\n        if (s.size() % 2 != 0) return false; \\n\\n        stack<char> st;\\n\\n        for(int i = 0; i < s.size(); ++i){\\n\\n            if(s[i] == '(') st.push(')');\\n            else if(s[i] == '[') st.push(']');\\n            else if(s[i] == '{') st.push('}');\\n            // 若出现') } ] '此时栈为空时 和 栈首不是对应字符时必出错\\n            else if(st.empty() || s[i] != st.top()) return false;\\n            else st.pop();\\n\\n        }\\n\\n        return st.empty();\\n    }   \\n};\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n\\n * 时间复杂度: O (n)\\n * 空间复杂度: O (n)\\n\\n\\n# 1047. 删除字符串中的所有相邻重复项\\n\\n * 题目：1047. 删除字符串中的所有相邻重复项\\n\\n * 讲解：文章讲解、视频讲解\\n\\n * 要求：\\n\\n\\n# 录前想法\\n\\n\\n# 录后想法\\n\\n\\n# 总结\\n\\n\\n# 150. 逆波兰表达式求值\\n\\n * 题目：150. 逆波兰表达式求值\\n\\n * 讲解：文章讲解、视频讲解\\n\\n * 要求：\\n\\n\\n# 录前想法\\n\\n\\n# 录后想法\\n\\n\\n# 总结\",\n      \"normalizedContent\": \"> 20. 有效的括号、1047. 删除字符串中的所有相邻重复项、150. 逆波兰表达式求值\\n\\n\\n# 20. 有效的括号\\n\\n * 题目：20. 有效的括号\\n\\n * 讲解：文章讲解、视频讲解\\n\\n * 要求：思考有哪些不匹配的场景\\n\\n\\n# 录前想法\\n\\n遇到 ([{ 就直接进栈，若遇到 }]) 需要先判断栈是否为空，若为空则直接返回 false，若栈中 top () 不是对应的另一半元素，也直接返回 false\\n\\n代码实现如下，已 ac (✔️)\\n\\nclass solution {\\npublic:\\n    bool isvalid(string str) {\\n\\n        stack<char> s;\\n\\n        for(int i = 0; i < str.size(); ++i){\\n\\n            if(str[i] == '(' || str[i] == '[' || str[i] == '{'){\\n                s.push(str[i]);\\n                continue;\\n            }\\n\\n            // switch case\\n            switch(str[i]){\\n                case ')':\\n                    if(s.empty() || s.top() != '('){\\n                        return false;\\n                    }else{\\n                        s.pop();\\n                    }\\n                    break;\\n                case ']':\\n                    if(s.empty() || s.top() != '['){\\n                        return false;\\n                    }else{\\n                        s.pop();\\n                    }\\n                    break;\\n                case '}':\\n                    if(s.empty() || s.top() != '{'){\\n                        return false;\\n                    }else{\\n                        s.pop();\\n                    }\\n            }\\n        }\\n\\n        return s.empty();\\n    }   \\n};\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n\\n * 时间复杂度: o (n)\\n * 空间复杂度: o (n)\\n\\n\\n# 录后想法\\n\\n\\n\\n卡哥的想法更精炼，没注意到奇数的情况！\\n\\n根据卡哥的思路，不难写出以下代码，已 ac (✔️)\\n\\nclass solution {\\npublic:\\n    bool isvalid(string s) {\\n\\n        // 排除奇数情况\\n        if (s.size() % 2 != 0) return false; \\n\\n        stack<char> st;\\n\\n        for(int i = 0; i < s.size(); ++i){\\n\\n            if(s[i] == '(') st.push(')');\\n            else if(s[i] == '[') st.push(']');\\n            else if(s[i] == '{') st.push('}');\\n            // 若出现') } ] '此时栈为空时 和 栈首不是对应字符时必出错\\n            else if(st.empty() || s[i] != st.top()) return false;\\n            else st.pop();\\n\\n        }\\n\\n        return st.empty();\\n    }   \\n};\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n\\n * 时间复杂度: o (n)\\n * 空间复杂度: o (n)\\n\\n\\n# 1047. 删除字符串中的所有相邻重复项\\n\\n * 题目：1047. 删除字符串中的所有相邻重复项\\n\\n * 讲解：文章讲解、视频讲解\\n\\n * 要求：\\n\\n\\n# 录前想法\\n\\n\\n# 录后想法\\n\\n\\n# 总结\\n\\n\\n# 150. 逆波兰表达式求值\\n\\n * 题目：150. 逆波兰表达式求值\\n\\n * 讲解：文章讲解、视频讲解\\n\\n * 要求：\\n\\n\\n# 录前想法\\n\\n\\n# 录后想法\\n\\n\\n# 总结\",\n      \"charsets\": {\n        \"cjk\": true\n      }\n    },\n    {\n      \"title\": \"Day08-字符串\",\n      \"frontmatter\": {\n        \"title\": \"Day08-字符串\",\n        \"date\": \"2023-06-01T12:33:54.000Z\",\n        \"permalink\": \"/pages/8ef17c/\",\n        \"categories\": [\n          \"算法\",\n          \"算法打卡\"\n        ],\n        \"tags\": [\n          \"打卡\"\n        ]\n      },\n      \"regularPath\": \"/02.%E7%AE%97%E6%B3%95/01.%E7%AE%97%E6%B3%95%E6%89%93%E5%8D%A1/08.Day08-%E5%AD%97%E7%AC%A6%E4%B8%B2.html\",\n      \"relativePath\": \"02.算法/01.算法打卡/08.Day08-字符串.md\",\n      \"key\": \"v-27115b6c\",\n      \"path\": \"/pages/8ef17c/\",\n      \"headers\": [\n        {\n          \"level\": 2,\n          \"title\": \"28.实现 strStr()\",\n          \"slug\": \"_28-实现-strstr\",\n          \"normalizedTitle\": \"28. 实现 strstr ()\",\n          \"charIndex\": 2\n        },\n        {\n          \"level\": 3,\n          \"title\": \"录前想法\",\n          \"slug\": \"录前想法\",\n          \"normalizedTitle\": \"录前想法\",\n          \"charIndex\": 139\n        },\n        {\n          \"level\": 3,\n          \"title\": \"录后想法\",\n          \"slug\": \"录后想法\",\n          \"normalizedTitle\": \"录后想法\",\n          \"charIndex\": 167\n        },\n        {\n          \"level\": 3,\n          \"title\": \"总结\",\n          \"slug\": \"总结\",\n          \"normalizedTitle\": \"总结\",\n          \"charIndex\": 1761\n        },\n        {\n          \"level\": 2,\n          \"title\": \"459.重复的子字符串\",\n          \"slug\": \"_459-重复的子字符串\",\n          \"normalizedTitle\": \"459. 重复的子字符串\",\n          \"charIndex\": 20\n        },\n        {\n          \"level\": 3,\n          \"title\": \"录前想法\",\n          \"slug\": \"录前想法-2\",\n          \"normalizedTitle\": \"录前想法\",\n          \"charIndex\": 139\n        },\n        {\n          \"level\": 3,\n          \"title\": \"录后想法\",\n          \"slug\": \"录后想法-2\",\n          \"normalizedTitle\": \"录后想法\",\n          \"charIndex\": 167\n        },\n        {\n          \"level\": 3,\n          \"title\": \"总结\",\n          \"slug\": \"总结-2\",\n          \"normalizedTitle\": \"总结\",\n          \"charIndex\": 1761\n        },\n        {\n          \"level\": 2,\n          \"title\": \"总结\",\n          \"slug\": \"总结-3\",\n          \"normalizedTitle\": \"总结\",\n          \"charIndex\": 1761\n        }\n      ],\n      \"excerpt\": \"<blockquote>\\n<p>28. 实现 strStr ()、 459. 重复的子字符串</p>\\n</blockquote>\\n\",\n      \"lastUpdated\": \"6/2/2023, 6:34:00 PM\",\n      \"lastUpdatedTimestamp\": 1685702040000,\n      \"headersStr\": \"28.实现 strStr() 录前想法 录后想法 总结 459.重复的子字符串 录前想法 录后想法 总结 总结\",\n      \"content\": \"> 28. 实现 strStr ()、 459. 重复的子字符串\\n\\n\\n# 28. 实现 strStr ()\\n\\n * 题目：28. 实现 strStr ()\\n * 讲解：文章讲解、视频讲解 (理论)、视频讲解 (next 数组)\\n * 要求：理解大名鼎鼎的 KMP 算法\\n\\n\\n# 录前想法\\n\\n只想出暴力 O (n^2) 的解法\\n\\n\\n# 录后想法\\n\\n看完讲解，一开始对求 next 数组部分的初始化变量非常不解，尤其是两个 \\\"末尾\\\"\\n\\n难点我觉得在于单个变量包含了两种含义，既是前缀头又是最长相等前后缀，没绕明白\\n\\n再摸索摸索\\n\\n自己慢慢磨出了代码，已 AC (✔️)\\n\\nclass Solution {\\npublic:\\n    int strStr(string haystack, string needle) {\\n\\n        int needleLen = needle.size();\\n        int haystackLen = haystack.size();\\n        int next[needleLen];\\n\\n        // 求出next数组\\n        getNext(next,needle);\\n\\n        // 遍历\\n        // i 控制文本串\\n        // j 控制模式串\\n        for(int i = 0,j = 0; i < haystackLen; ++i){\\n            \\n            // 匹配不相等\\n            while(haystack[i] != needle[j] && j > 0){\\n                j = next[j - 1];\\n            }\\n\\n            // 匹配\\n            if(haystack[i] == needle[j]){\\n                j++;\\n            }\\n\\n            // 以满足返回\\n            if(j == needleLen){\\n                // i = 8\\n                // needleLen = 6\\n                // ans = 3\\n\\n                return i - needleLen + 1;\\n            }\\n        }\\n\\n        return -1;\\n    }\\n\\n    // 求next数组\\n    void getNext(int *next,string needle){\\n\\n        int p = 0; // 定义前缀头和记录最长相等前后缀记录\\n        next[0] = 0;\\n\\n        // 定义后缀表尾和控制整体模式串\\n        for(int s = 1;s < needle.size(); ++s){\\n            \\n            // 不匹配时，回退\\n            while(p > 0 && needle[p] != needle[s]){\\n                p = next[p-1];\\n            }\\n\\n            // 匹配\\n            if(needle[p] == needle[s]){\\n                ++p;\\n            }\\n\\n            // 更新\\n            next[s] = p;\\n        }\\n    }\\n};\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n\\n\\n\\n# 总结\\n\\n * 回退部分确实如卡哥所说一开始写的时 if 不是 while😂\\n\\n\\n# 459. 重复的子字符串\\n\\n * 题目：459. 重复的子字符串\\n * 讲解：文章讲解、视频讲解\\n * 要求：KMP 算法的应用\\n\\n\\n# 录前想法\\n\\n\\n# 录后想法\\n\\n\\n# 总结\\n\\n\\n# 总结\\n\\n * 数组初始化的细节：\\n\\nint a[n]={0}; // 注意n必须为const类型，否则错误\\n\\n\\n1\\n\",\n      \"normalizedContent\": \"> 28. 实现 strstr ()、 459. 重复的子字符串\\n\\n\\n# 28. 实现 strstr ()\\n\\n * 题目：28. 实现 strstr ()\\n * 讲解：文章讲解、视频讲解 (理论)、视频讲解 (next 数组)\\n * 要求：理解大名鼎鼎的 kmp 算法\\n\\n\\n# 录前想法\\n\\n只想出暴力 o (n^2) 的解法\\n\\n\\n# 录后想法\\n\\n看完讲解，一开始对求 next 数组部分的初始化变量非常不解，尤其是两个 \\\"末尾\\\"\\n\\n难点我觉得在于单个变量包含了两种含义，既是前缀头又是最长相等前后缀，没绕明白\\n\\n再摸索摸索\\n\\n自己慢慢磨出了代码，已 ac (✔️)\\n\\nclass solution {\\npublic:\\n    int strstr(string haystack, string needle) {\\n\\n        int needlelen = needle.size();\\n        int haystacklen = haystack.size();\\n        int next[needlelen];\\n\\n        // 求出next数组\\n        getnext(next,needle);\\n\\n        // 遍历\\n        // i 控制文本串\\n        // j 控制模式串\\n        for(int i = 0,j = 0; i < haystacklen; ++i){\\n            \\n            // 匹配不相等\\n            while(haystack[i] != needle[j] && j > 0){\\n                j = next[j - 1];\\n            }\\n\\n            // 匹配\\n            if(haystack[i] == needle[j]){\\n                j++;\\n            }\\n\\n            // 以满足返回\\n            if(j == needlelen){\\n                // i = 8\\n                // needlelen = 6\\n                // ans = 3\\n\\n                return i - needlelen + 1;\\n            }\\n        }\\n\\n        return -1;\\n    }\\n\\n    // 求next数组\\n    void getnext(int *next,string needle){\\n\\n        int p = 0; // 定义前缀头和记录最长相等前后缀记录\\n        next[0] = 0;\\n\\n        // 定义后缀表尾和控制整体模式串\\n        for(int s = 1;s < needle.size(); ++s){\\n            \\n            // 不匹配时，回退\\n            while(p > 0 && needle[p] != needle[s]){\\n                p = next[p-1];\\n            }\\n\\n            // 匹配\\n            if(needle[p] == needle[s]){\\n                ++p;\\n            }\\n\\n            // 更新\\n            next[s] = p;\\n        }\\n    }\\n};\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n\\n\\n\\n# 总结\\n\\n * 回退部分确实如卡哥所说一开始写的时 if 不是 while😂\\n\\n\\n# 459. 重复的子字符串\\n\\n * 题目：459. 重复的子字符串\\n * 讲解：文章讲解、视频讲解\\n * 要求：kmp 算法的应用\\n\\n\\n# 录前想法\\n\\n\\n# 录后想法\\n\\n\\n# 总结\\n\\n\\n# 总结\\n\\n * 数组初始化的细节：\\n\\nint a[n]={0}; // 注意n必须为const类型，否则错误\\n\\n\\n1\\n\",\n      \"charsets\": {\n        \"cjk\": true\n      }\n    },\n    {\n      \"title\": \"字符串\",\n      \"frontmatter\": {\n        \"title\": \"字符串\",\n        \"date\": \"2023-06-02T10:19:59.000Z\",\n        \"permalink\": \"/pages/d1dc4a/\",\n        \"categories\": [\n          \"算法\",\n          \"经典算法\"\n        ],\n        \"tags\": [\n          \"经典算法\"\n        ]\n      },\n      \"regularPath\": \"/02.%E7%AE%97%E6%B3%95/02.%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95/01.%E5%AD%97%E7%AC%A6%E4%B8%B2.html\",\n      \"relativePath\": \"02.算法/02.经典算法/01.字符串.md\",\n      \"key\": \"v-56a89b80\",\n      \"path\": \"/pages/d1dc4a/\",\n      \"headers\": [\n        {\n          \"level\": 2,\n          \"title\": \"KMP\",\n          \"slug\": \"kmp\",\n          \"normalizedTitle\": \"kmp\",\n          \"charIndex\": 4\n        },\n        {\n          \"level\": 3,\n          \"title\": \"前置知识\",\n          \"slug\": \"前置知识\",\n          \"normalizedTitle\": \"前置知识\",\n          \"charIndex\": 20\n        },\n        {\n          \"level\": 3,\n          \"title\": \"能解决什么问题？\",\n          \"slug\": \"能解决什么问题\",\n          \"normalizedTitle\": \"能解决什么问题？\",\n          \"charIndex\": 937\n        },\n        {\n          \"level\": 3,\n          \"title\": \"next数组\",\n          \"slug\": \"next数组\",\n          \"normalizedTitle\": \"next 数组\",\n          \"charIndex\": 1226\n        },\n        {\n          \"level\": 3,\n          \"title\": \"完整的KMP流程\",\n          \"slug\": \"完整的kmp流程\",\n          \"normalizedTitle\": \"完整的 kmp 流程\",\n          \"charIndex\": 1928\n        }\n      ],\n      \"excerpt\": \"<div class=\\\"custom-block tip\\\"><p class=\\\"custom-block-title\\\">提示</p>\\n<p>KMP</p>\\n</div>\\n\",\n      \"lastUpdated\": \"6/2/2023, 6:34:00 PM\",\n      \"lastUpdatedTimestamp\": 1685702040000,\n      \"headersStr\": \"KMP 前置知识 能解决什么问题？ next数组 完整的KMP流程\",\n      \"content\": \"提示\\n\\nKMP\\n\\n\\n# KMP\\n\\n\\n# 前置知识\\n\\n * 文本串 ：\\\"aabaabaaf\\\"【普通字符串】\\n\\n * 模式串 ：\\\"aabaaf\\\"【待匹配的字符串】\\n\\n * 前缀（prefix） ：文本串中包含首字符，不包含尾字符的字符串【ex:\\\"aabaaf\\\"】\\n   \\n   * a\\n   * aa\\n   * aab\\n   * aaba\\n   * aabaa\\n   * aabaaf（❌）\\n\\n * 后缀（suffix） ：文本串中不包含首字符，包含尾字符的字符串【ex:\\\"aabaaf\\\"】\\n   \\n   * f\\n   * af\\n   * aaf\\n   * baaaf\\n   * abaaf\\n   * aabaaf（❌）\\n\\n * 最长相等前后缀 ：就是前缀等于后缀【ex:\\\"aabaaf\\\"】\\n   \\n   字符串      前缀                   后缀                    最长相等前后缀\\n   a        无                    无                     0\\n   aa       a                    a                     1\\n   aab      a aa                 b ab                  0\\n   aaba     a aa aab             a ba aba              1\\n   aabaa    a aa aab aaba        a aa baa abaa         2\\n   aabaaf   aaa aab aaba aabaa   f af aaf baaf abaaf   0\\n\\n * 前缀表 ：存放字符串中最长相等前后缀的数组，用于匹配失败后跳转到的位置（KMP 核心）‼️\\n   \\n   内容   A   A   B   A   A   F\\n   下标   0   1   0   1   2   0\\n\\n * 前缀头 ：【ex:\\\"aabaaf\\\"】中 \\\"aabaaf\\\"\\n\\n * 后缀尾 ：【ex:\\\"aabaaf\\\"】中 \\\"aabaaf\\\"\\n\\n\\n# 能解决什么问题？\\n\\n大段字符串中，匹配某一小段的字符串，类似 Ctrl+F 的搜索功能\\n\\n普通的比较，需要一段一段的比较完后移在比较...\\n\\n文本串:\\\"aabaabaaf\\\"\\n\\n模式串:\\\"aabaaf\\\"\\n\\n> a a b a a b a a f 的匹配过程如下：\\n> \\n>  1. a a b a a f(❌)，整体后移\\n>  2. a a b a a f(❌)，整体后移\\n>  3. a a b a a f(❌)，整体后移\\n>  4. a a b a a f(✔️)，完成匹配\\n\\n这显然效率非常低，KMP 算法就是解决了这个问题，核心是不像普通算法的只向后移一位，KMP 通过 next 数组，可以一次移多位来提交效率\\n\\n\\n# next 数组\\n\\n目的 ：求模式串的前缀表\\n\\n步骤 ：\\n\\n 1. 初始化\\n 2. 处理前缀不相同\\n 3. 处理前缀相同\\n 4. 更新 next 数组\\n\\n// next为next数组\\n// str为模式串\\nvoid getNext(int *next,string str){\\n    // 1. 初始化\\n    int p = 0;   // 前缀头 和 最长前后缀相同值\\n    next[0] = 0; // 第一个字符没有前缀和后缀，故为0\\n    \\n    // 遍历真个模式串,从1开始因为第一个字符最长前后缀相同值为0\\n    for(int s = 1;pos < str.size();++pos){ // s为后缀尾\\n        \\n        // 2,处理前缀不相同\\n        while(str[s] != str[p] && p > 0){\\n            // 回退\\n            p = next[p - 1]；\\n        }\\n        \\n        // 3. 处理前缀相同\\n        if(str[s] == str[p]){\\n            ++p;\\n        }\\n        \\n        // 4. 更新next数组\\n        next[s] = p;\\n    }\\n}\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n\\n\\n最终得到：\\n\\n\\n\\n\\n# 完整的 KMP 流程\\n\\n\\n\\nclass Solution {\\npublic:\\n    int strStr(string haystack, string needle) {\\n\\n        int needleLen = needle.size();\\n        int haystackLen = haystack.size();\\n        int next[needleLen];\\n\\n        // 求出next数组\\n        getNext(next,needle);\\n\\n        // 遍历\\n        // i 控制文本串\\n        // j 控制模式串\\n        for(int i = 0,j = 0; i < haystackLen; ++i){\\n            \\n            // 匹配不相等\\n            while(haystack[i] != needle[j] && j > 0){\\n                j = next[j - 1];\\n            }\\n\\n            // 匹配\\n            if(haystack[i] == needle[j]){\\n                j++;\\n            }\\n\\n            // 以满足返回\\n            if(j == needleLen){\\n                // i = 8\\n                // needleLen = 6\\n                // ans = 3\\n\\n                return i - needleLen + 1;\\n            }\\n        }\\n\\n        return -1;\\n    }\\n\\n    // 求next数组\\n    void getNext(int *next,string needle){\\n\\n        int p = 0; // 定义前缀头和记录最长相等前后缀记录\\n        next[0] = 0;\\n\\n        // 定义后缀表尾和控制整体模式串\\n        for(int s = 1;s < needle.size(); ++s){\\n            \\n            // 不匹配时，回退\\n            while(p > 0 && needle[p] != needle[s]){\\n                p = next[p-1];\\n            }\\n\\n            // 匹配\\n            if(needle[p] == needle[s]){\\n                ++p;\\n            }\\n\\n            // 更新\\n            next[s] = p;\\n        }\\n    }\\n};\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n\",\n      \"normalizedContent\": \"提示\\n\\nkmp\\n\\n\\n# kmp\\n\\n\\n# 前置知识\\n\\n * 文本串 ：\\\"aabaabaaf\\\"【普通字符串】\\n\\n * 模式串 ：\\\"aabaaf\\\"【待匹配的字符串】\\n\\n * 前缀（prefix） ：文本串中包含首字符，不包含尾字符的字符串【ex:\\\"aabaaf\\\"】\\n   \\n   * a\\n   * aa\\n   * aab\\n   * aaba\\n   * aabaa\\n   * aabaaf（❌）\\n\\n * 后缀（suffix） ：文本串中不包含首字符，包含尾字符的字符串【ex:\\\"aabaaf\\\"】\\n   \\n   * f\\n   * af\\n   * aaf\\n   * baaaf\\n   * abaaf\\n   * aabaaf（❌）\\n\\n * 最长相等前后缀 ：就是前缀等于后缀【ex:\\\"aabaaf\\\"】\\n   \\n   字符串      前缀                   后缀                    最长相等前后缀\\n   a        无                    无                     0\\n   aa       a                    a                     1\\n   aab      a aa                 b ab                  0\\n   aaba     a aa aab             a ba aba              1\\n   aabaa    a aa aab aaba        a aa baa abaa         2\\n   aabaaf   aaa aab aaba aabaa   f af aaf baaf abaaf   0\\n\\n * 前缀表 ：存放字符串中最长相等前后缀的数组，用于匹配失败后跳转到的位置（kmp 核心）‼️\\n   \\n   内容   a   a   b   a   a   f\\n   下标   0   1   0   1   2   0\\n\\n * 前缀头 ：【ex:\\\"aabaaf\\\"】中 \\\"aabaaf\\\"\\n\\n * 后缀尾 ：【ex:\\\"aabaaf\\\"】中 \\\"aabaaf\\\"\\n\\n\\n# 能解决什么问题？\\n\\n大段字符串中，匹配某一小段的字符串，类似 ctrl+f 的搜索功能\\n\\n普通的比较，需要一段一段的比较完后移在比较...\\n\\n文本串:\\\"aabaabaaf\\\"\\n\\n模式串:\\\"aabaaf\\\"\\n\\n> a a b a a b a a f 的匹配过程如下：\\n> \\n>  1. a a b a a f(❌)，整体后移\\n>  2. a a b a a f(❌)，整体后移\\n>  3. a a b a a f(❌)，整体后移\\n>  4. a a b a a f(✔️)，完成匹配\\n\\n这显然效率非常低，kmp 算法就是解决了这个问题，核心是不像普通算法的只向后移一位，kmp 通过 next 数组，可以一次移多位来提交效率\\n\\n\\n# next 数组\\n\\n目的 ：求模式串的前缀表\\n\\n步骤 ：\\n\\n 1. 初始化\\n 2. 处理前缀不相同\\n 3. 处理前缀相同\\n 4. 更新 next 数组\\n\\n// next为next数组\\n// str为模式串\\nvoid getnext(int *next,string str){\\n    // 1. 初始化\\n    int p = 0;   // 前缀头 和 最长前后缀相同值\\n    next[0] = 0; // 第一个字符没有前缀和后缀，故为0\\n    \\n    // 遍历真个模式串,从1开始因为第一个字符最长前后缀相同值为0\\n    for(int s = 1;pos < str.size();++pos){ // s为后缀尾\\n        \\n        // 2,处理前缀不相同\\n        while(str[s] != str[p] && p > 0){\\n            // 回退\\n            p = next[p - 1]；\\n        }\\n        \\n        // 3. 处理前缀相同\\n        if(str[s] == str[p]){\\n            ++p;\\n        }\\n        \\n        // 4. 更新next数组\\n        next[s] = p;\\n    }\\n}\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n\\n\\n最终得到：\\n\\n\\n\\n\\n# 完整的 kmp 流程\\n\\n\\n\\nclass solution {\\npublic:\\n    int strstr(string haystack, string needle) {\\n\\n        int needlelen = needle.size();\\n        int haystacklen = haystack.size();\\n        int next[needlelen];\\n\\n        // 求出next数组\\n        getnext(next,needle);\\n\\n        // 遍历\\n        // i 控制文本串\\n        // j 控制模式串\\n        for(int i = 0,j = 0; i < haystacklen; ++i){\\n            \\n            // 匹配不相等\\n            while(haystack[i] != needle[j] && j > 0){\\n                j = next[j - 1];\\n            }\\n\\n            // 匹配\\n            if(haystack[i] == needle[j]){\\n                j++;\\n            }\\n\\n            // 以满足返回\\n            if(j == needlelen){\\n                // i = 8\\n                // needlelen = 6\\n                // ans = 3\\n\\n                return i - needlelen + 1;\\n            }\\n        }\\n\\n        return -1;\\n    }\\n\\n    // 求next数组\\n    void getnext(int *next,string needle){\\n\\n        int p = 0; // 定义前缀头和记录最长相等前后缀记录\\n        next[0] = 0;\\n\\n        // 定义后缀表尾和控制整体模式串\\n        for(int s = 1;s < needle.size(); ++s){\\n            \\n            // 不匹配时，回退\\n            while(p > 0 && needle[p] != needle[s]){\\n                p = next[p-1];\\n            }\\n\\n            // 匹配\\n            if(needle[p] == needle[s]){\\n                ++p;\\n            }\\n\\n            // 更新\\n            next[s] = p;\\n        }\\n    }\\n};\\n\\n\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n\",\n      \"charsets\": {\n        \"cjk\": true\n      }\n    },\n    {\n      \"title\": \"算法\",\n      \"frontmatter\": {\n        \"pageComponent\": {\n          \"name\": \"Catalogue\",\n          \"data\": {\n            \"key\": \"02.算法\",\n            \"imgUrl\": \"/assets/img/algorithm.jpg\",\n            \"description\": \"独立做题 -> 视频讲解 -> 文章讲解 -> 重新做题 -> 整理博客\"\n          }\n        },\n        \"title\": \"算法\",\n        \"date\": \"2023-05-24 20:17\",\n        \"permalink\": \"/algorithm/\",\n        \"sidebar\": false,\n        \"article\": false,\n        \"comment\": false,\n        \"comments\": false,\n        \"editLink\": false\n      },\n      \"regularPath\": \"/02.%E7%AE%97%E6%B3%95/\",\n      \"relativePath\": \"02.算法/index.md\",\n      \"key\": \"v-012c6483\",\n      \"path\": \"/algorithm/\",\n      \"lastUpdated\": \"5/25/2023, 4:51:09 PM\",\n      \"lastUpdatedTimestamp\": 1685004669000,\n      \"headersStr\": null,\n      \"content\": \"\",\n      \"normalizedContent\": \"\",\n      \"charsets\": {}\n    },\n    {\n      \"title\": \"算法\",\n      \"frontmatter\": {\n        \"pageComponent\": {\n          \"name\": \"Catalogue\",\n          \"data\": {\n            \"key\": \"03.CPP\",\n            \"imgUrl\": \"/assets/img/cpp.png\",\n            \"description\": \"误区和细节的记录\"\n          }\n        },\n        \"title\": \"算法\",\n        \"date\": \"2023-06-01 17:46\",\n        \"permalink\": \"/cpp/\",\n        \"sidebar\": false,\n        \"article\": false,\n        \"comment\": false,\n        \"comments\": false,\n        \"editLink\": false\n      },\n      \"regularPath\": \"/03.CPP/\",\n      \"relativePath\": \"03.CPP/index.md\",\n      \"key\": \"v-3e18dce5\",\n      \"path\": \"/cpp/\",\n      \"lastUpdated\": \"6/1/2023, 6:03:48 PM\",\n      \"lastUpdatedTimestamp\": 1685613828000,\n      \"headersStr\": null,\n      \"content\": \"\",\n      \"normalizedContent\": \"\",\n      \"charsets\": {}\n    },\n    {\n      \"title\": \"Day11-栈与队列\",\n      \"frontmatter\": {\n        \"title\": \"Day11-栈与队列\",\n        \"date\": \"2023-06-05T16:01:03.000Z\",\n        \"permalink\": \"/pages/9f1ed7/\",\n        \"categories\": [\n          \"算法\",\n          \"算法打卡\"\n        ],\n        \"tags\": [\n          \"打卡\"\n        ]\n      },\n      \"regularPath\": \"/02.%E7%AE%97%E6%B3%95/01.%E7%AE%97%E6%B3%95%E6%89%93%E5%8D%A1/11.Day11-%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97.html\",\n      \"relativePath\": \"02.算法/01.算法打卡/11.Day11-栈与队列.md\",\n      \"key\": \"v-ea742706\",\n      \"path\": \"/pages/9f1ed7/\",\n      \"excerpt\": \"<blockquote>\\n<p>239. 滑动窗口最大值、 347. 前 K 个高频元素、总结</p>\\n</blockquote>\\n\",\n      \"headersStr\": null,\n      \"content\": \"> 239. 滑动窗口最大值、 347. 前 K 个高频元素、总结\",\n      \"normalizedContent\": \"> 239. 滑动窗口最大值、 347. 前 k 个高频元素、总结\",\n      \"charsets\": {\n        \"cjk\": true\n      }\n    },\n    {\n      \"title\": \"字符串与字符初始化及转换\",\n      \"frontmatter\": {\n        \"title\": \"字符串与字符初始化及转换\",\n        \"date\": \"2023-06-01T17:49:35.000Z\",\n        \"permalink\": \"/pages/cf07c3/\",\n        \"categories\": [\n          \"CPP\",\n          \"误区总结\"\n        ],\n        \"tags\": [\n          \"CPP-误区\"\n        ]\n      },\n      \"regularPath\": \"/03.CPP/01.%E8%AF%AF%E5%8C%BA%E6%80%BB%E7%BB%93/01.%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%8E%E5%AD%97%E7%AC%A6%E5%88%9D%E5%A7%8B%E5%8C%96%E5%8F%8A%E8%BD%AC%E6%8D%A2.html\",\n      \"relativePath\": \"03.CPP/01.误区总结/01.字符串与字符初始化及转换.md\",\n      \"key\": \"v-612aca70\",\n      \"path\": \"/pages/cf07c3/\",\n      \"headers\": [\n        {\n          \"level\": 2,\n          \"title\": \"char* 和 char[] 的初始化：\",\n          \"slug\": \"char-和-char-的初始化\",\n          \"normalizedTitle\": \"char* 和 char [] 的初始化：\",\n          \"charIndex\": 47\n        }\n      ],\n      \"excerpt\": \"<div class=\\\"custom-block tip\\\"><p class=\\\"custom-block-title\\\">提示</p>\\n<p>关于 char*、char [] 与 string 的初始化及转换<br>\\n<a href=\\\"https://zhuanlan.zhihu.com/p/110374182\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">参考文章<OutboundLink/></a></p>\\n</div>\\n\",\n      \"lastUpdated\": \"6/1/2023, 8:30:16 PM\",\n      \"lastUpdatedTimestamp\": 1685622616000,\n      \"headersStr\": \"char* 和 char[] 的初始化：\",\n      \"content\": \"提示\\n\\n关于 char*、char [] 与 string 的初始化及转换\\n参考文章\\n\\n\\n# char* 和 char [] 的初始化：\\n\\nchar* 是指向字符的指针，可以通过指针赋值或使用字符串字面值来初始化。\\nchar [] 是字符数组，可以通过字符串字面值或逐个字符赋值来初始化。\\n示例：\\n\\ncpp\\nCopy code\\nchar* ptr = \\\"Hello\\\"; // 使用字符串字面值初始化 char*\\nchar arr [] = \\\"World\\\"; // 使用字符串字面值初始化 char []\\nstring 和 char* 或 char [] 的转换：\\n\\nstring 可以通过构造函数或赋值运算符将 char* 或 char [] 转换为 string。\\nchar* 或 char [] 可以使用 c_str () 方法将其转换为 const char*，以便与接受 C 风格字符串的函数兼容。\\n示例：\\n\\ncpp\\nCopy code\\nstring str = \\\"Hello\\\"; // 使用字符串字面值初始化 string\\nconst char* cstr = str.c_str (); // 转换为 const char*\\n\\nstring newStr = \\\"World\\\";\\nconst char* newCstr = newStr.c_str (); // 转换为 const char*\\n\\nchar arr[] = \\\"Hello\\\";\\nstring arrStr (arr); // 将字符数组转换为 string\\n\\nchar* ptr = new char[10];\\nstrcpy(ptr, \\\"World\\\");\\nstring ptrStr (ptr); // 将字符指针转换为 string\\n\\ndelete [] ptr; // 释放内存\\n注意字符串的结束符：\\n\\nchar [] 必须包含字符串结束符 '\\\\0'，否则会导致字符串操作函数无法正常工作。\\nstring 类型会自动处理字符串结束符，不需要手动添加。\\n示例：\\n\\ncpp\\nCopy code\\nchar arr [] = \\\"Hello\\\"; // 包含 '\\\\0'\\nchar arr2 [] = {'H', 'e', 'l', 'l', 'o'}; // 不包含 '\\\\0'\\n\\nstring str = \\\"World\\\"; // 自动添加 '\\\\0'\\n需要注意的是，在使用 char* 和 char [] 时，要确保正确处理内存分配和释放，以避免出现内存泄漏或访问非法内存的问题。另外，当转换为 string 时，要确保原始字符数组或指针所指向的内容是有效的，否则可能导致未定义行为。\",\n      \"normalizedContent\": \"提示\\n\\n关于 char*、char [] 与 string 的初始化及转换\\n参考文章\\n\\n\\n# char* 和 char [] 的初始化：\\n\\nchar* 是指向字符的指针，可以通过指针赋值或使用字符串字面值来初始化。\\nchar [] 是字符数组，可以通过字符串字面值或逐个字符赋值来初始化。\\n示例：\\n\\ncpp\\ncopy code\\nchar* ptr = \\\"hello\\\"; // 使用字符串字面值初始化 char*\\nchar arr [] = \\\"world\\\"; // 使用字符串字面值初始化 char []\\nstring 和 char* 或 char [] 的转换：\\n\\nstring 可以通过构造函数或赋值运算符将 char* 或 char [] 转换为 string。\\nchar* 或 char [] 可以使用 c_str () 方法将其转换为 const char*，以便与接受 c 风格字符串的函数兼容。\\n示例：\\n\\ncpp\\ncopy code\\nstring str = \\\"hello\\\"; // 使用字符串字面值初始化 string\\nconst char* cstr = str.c_str (); // 转换为 const char*\\n\\nstring newstr = \\\"world\\\";\\nconst char* newcstr = newstr.c_str (); // 转换为 const char*\\n\\nchar arr[] = \\\"hello\\\";\\nstring arrstr (arr); // 将字符数组转换为 string\\n\\nchar* ptr = new char[10];\\nstrcpy(ptr, \\\"world\\\");\\nstring ptrstr (ptr); // 将字符指针转换为 string\\n\\ndelete [] ptr; // 释放内存\\n注意字符串的结束符：\\n\\nchar [] 必须包含字符串结束符 '\\\\0'，否则会导致字符串操作函数无法正常工作。\\nstring 类型会自动处理字符串结束符，不需要手动添加。\\n示例：\\n\\ncpp\\ncopy code\\nchar arr [] = \\\"hello\\\"; // 包含 '\\\\0'\\nchar arr2 [] = {'h', 'e', 'l', 'l', 'o'}; // 不包含 '\\\\0'\\n\\nstring str = \\\"world\\\"; // 自动添加 '\\\\0'\\n需要注意的是，在使用 char* 和 char [] 时，要确保正确处理内存分配和释放，以避免出现内存泄漏或访问非法内存的问题。另外，当转换为 string 时，要确保原始字符数组或指针所指向的内容是有效的，否则可能导致未定义行为。\",\n      \"charsets\": {\n        \"cjk\": true\n      }\n    },\n    {\n      \"title\": \"归档\",\n      \"frontmatter\": {\n        \"archivesPage\": true,\n        \"title\": \"归档\",\n        \"permalink\": \"/archives/\",\n        \"article\": false\n      },\n      \"regularPath\": \"/@pages/archivesPage.html\",\n      \"relativePath\": \"@pages/archivesPage.md\",\n      \"key\": \"v-7cbb7956\",\n      \"path\": \"/archives/\",\n      \"lastUpdated\": \"1/12/2023, 12:10:26 PM\",\n      \"lastUpdatedTimestamp\": 1673496626000,\n      \"headersStr\": null,\n      \"content\": \"\",\n      \"normalizedContent\": \"\",\n      \"charsets\": {}\n    },\n    {\n      \"title\": \"分类\",\n      \"frontmatter\": {\n        \"categoriesPage\": true,\n        \"title\": \"分类\",\n        \"permalink\": \"/categories/\",\n        \"article\": false\n      },\n      \"regularPath\": \"/@pages/categoriesPage.html\",\n      \"relativePath\": \"@pages/categoriesPage.md\",\n      \"key\": \"v-7cdbb794\",\n      \"path\": \"/categories/\",\n      \"lastUpdated\": \"1/12/2023, 12:10:26 PM\",\n      \"lastUpdatedTimestamp\": 1673496626000,\n      \"headersStr\": null,\n      \"content\": \"\",\n      \"normalizedContent\": \"\",\n      \"charsets\": {}\n    },\n    {\n      \"title\": \"Home\",\n      \"frontmatter\": {\n        \"home\": true,\n        \"heroText\": \"Lido's Blog\",\n        \"tagline\": \"记录、分享\",\n        \"bannerBg\": \"none\",\n        \"postList\": \"detailed\"\n      },\n      \"regularPath\": \"/\",\n      \"relativePath\": \"index.md\",\n      \"key\": \"v-ed56897c\",\n      \"path\": \"/\",\n      \"lastUpdated\": \"2/2/2023, 11:41:36 PM\",\n      \"lastUpdatedTimestamp\": 1675352496000,\n      \"headersStr\": null,\n      \"content\": \"\",\n      \"normalizedContent\": \"\",\n      \"charsets\": {}\n    },\n    {\n      \"title\": \"标签\",\n      \"frontmatter\": {\n        \"tagsPage\": true,\n        \"title\": \"标签\",\n        \"permalink\": \"/tags/\",\n        \"article\": false\n      },\n      \"regularPath\": \"/@pages/tagsPage.html\",\n      \"relativePath\": \"@pages/tagsPage.md\",\n      \"key\": \"v-bd1f8054\",\n      \"path\": \"/tags/\",\n      \"lastUpdated\": \"1/12/2023, 12:10:26 PM\",\n      \"lastUpdatedTimestamp\": 1673496626000,\n      \"headersStr\": null,\n      \"content\": \"\",\n      \"normalizedContent\": \"\",\n      \"charsets\": {}\n    }\n  ],\n  \"themeConfig\": {\n    \"nav\": [\n      {\n        \"text\": \"Home\",\n        \"link\": \"/\"\n      },\n      {\n        \"text\": \"Golang\",\n        \"link\": \"/go/\",\n        \"items\": [\n          {\n            \"text\": \"框架\",\n            \"items\": [\n              {\n                \"text\": \"Gin\",\n                \"link\": \"/pages/3e14ca/\"\n              }\n            ]\n          },\n          {\n            \"text\": \"小工具\",\n            \"items\": [\n              {\n                \"text\": \"文件传输（局域网）\",\n                \"link\": \"/pages/27351f/\"\n              },\n              {\n                \"text\": \"自动提交Github\",\n                \"link\": \"/pages/27352f/\"\n              }\n            ]\n          },\n          {\n            \"text\": \"深入Go\",\n            \"items\": [\n              {\n                \"text\": \"01.string类型\",\n                \"link\": \"/pages/b6ba67/\"\n              },\n              {\n                \"text\": \"02.slice类型\",\n                \"link\": \"/pages/5b42f7/\"\n              },\n              {\n                \"text\": \"03.结构体和内存对齐\",\n                \"link\": \"/pages/20d234/\"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        \"text\": \"CPP\",\n        \"link\": \"/cpp/\",\n        \"items\": [\n          {\n            \"text\": \"误区总结\",\n            \"items\": [\n              {\n                \"text\": \"字符串与字符初始化及转换\",\n                \"link\": \"/pages/cf07c3/\"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        \"text\": \"算法\",\n        \"link\": \"/algorithm/\",\n        \"items\": [\n          {\n            \"text\": \"算法打卡\",\n            \"items\": [\n              {\n                \"text\": \"Day09-栈与队列\",\n                \"link\": \"/pages/5b91fa/\"\n              },\n              {\n                \"text\": \"Day10-栈与队列\",\n                \"link\": \"/pages/51e036/\"\n              },\n              {\n                \"text\": \"Day11-栈与队列\",\n                \"link\": \"/pages/9f1ed7/\"\n              }\n            ]\n          },\n          {\n            \"text\": \"经典算法\",\n            \"items\": [\n              {\n                \"text\": \"字符\",\n                \"link\": \"/pages/d1dc4a/\"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        \"text\": \"归档\",\n        \"link\": \"/archives/\"\n      }\n    ],\n    \"sidebarDepth\": 2,\n    \"logo\": \"/assets/img/logo.png\",\n    \"repo\": \"ZhuHR-57\",\n    \"searchMaxSuggestions\": 7,\n    \"lastUpdated\": \"上次更新\",\n    \"docsDir\": \"docs\",\n    \"editLinks\": false,\n    \"editLinkText\": \"编辑\",\n    \"category\": true,\n    \"tag\": true,\n    \"archive\": true,\n    \"sidebarOpen\": true,\n    \"sidebar\": {\n      \"/01.Go/\": [\n        {\n          \"title\": \"框架\",\n          \"collapsable\": true,\n          \"children\": [\n            {\n              \"title\": \"Gin\",\n              \"collapsable\": true,\n              \"children\": [\n                [\n                  \"01.框架/01.Gin/01.脚手架.md\",\n                  \"脚手架\",\n                  \"/pages/3e14ca/\"\n                ]\n              ]\n            }\n          ]\n        },\n        {\n          \"title\": \"tools\",\n          \"collapsable\": true,\n          \"children\": [\n            [\n              \"02.tools/01.文件传输（局域网）.md\",\n              \"文件传输（局域网）\",\n              \"/pages/27351f/\"\n            ],\n            [\n              \"02.tools/02.自动提交Github.md\",\n              \"自动提交Github\",\n              \"/pages/27352f/\"\n            ]\n          ]\n        },\n        {\n          \"title\": \"深入Go\",\n          \"collapsable\": true,\n          \"children\": [\n            [\n              \"03.深入Go/01.string类型.md\",\n              \"string类型\",\n              \"/pages/b6ba67/\"\n            ],\n            [\n              \"03.深入Go/02.slice类型.md\",\n              \"slice类型\",\n              \"/pages/5b42f7/\"\n            ],\n            [\n              \"03.深入Go/03.结构体和内存对齐.md\",\n              \"结构体和内存对齐\",\n              \"/pages/20d234/\"\n            ]\n          ]\n        }\n      ],\n      \"catalogue\": {},\n      \"/02.算法/\": [\n        {\n          \"title\": \"算法打卡\",\n          \"collapsable\": true,\n          \"children\": [\n            [\n              \"01.算法打卡/00.Day00-准备.md\",\n              \"Day00-准备\",\n              \"/pages/fc80dd/\"\n            ],\n            [\n              \"01.算法打卡/01.Day01-数组.md\",\n              \"Day01-数组\",\n              \"/pages/8aab7b/\"\n            ],\n            [\n              \"01.算法打卡/02.Day02-数组.md\",\n              \"Day02-数组\",\n              \"/pages/f2d3aa/\"\n            ],\n            [\n              \"01.算法打卡/03.Day03-链表.md\",\n              \"Day03-链表\",\n              \"/pages/2c5009/\"\n            ],\n            [\n              \"01.算法打卡/04.Day04-链表.md\",\n              \"Day04-链表\",\n              \"/pages/115af7/\"\n            ],\n            [\n              \"01.算法打卡/05.Day05-哈希.md\",\n              \"Day05-哈希\",\n              \"/pages/311b6b/\"\n            ],\n            [\n              \"01.算法打卡/06.Day06-哈希.md\",\n              \"Day06-哈希\",\n              \"/pages/5d4a2f/\"\n            ],\n            [\n              \"01.算法打卡/07.Day07-字符串.md\",\n              \"Day07-字符串\",\n              \"/pages/26eaf0/\"\n            ],\n            [\n              \"01.算法打卡/08.Day08-字符串.md\",\n              \"Day08-字符串\",\n              \"/pages/8ef17c/\"\n            ],\n            [\n              \"01.算法打卡/09.Day09-栈与队列.md\",\n              \"Day09-栈与队列\",\n              \"/pages/5b91fa/\"\n            ],\n            [\n              \"01.算法打卡/10.Day10-栈与队列.md\",\n              \"Day10-栈与队列\",\n              \"/pages/51e036/\"\n            ],\n            [\n              \"01.算法打卡/11.Day11-栈与队列.md\",\n              \"Day11-栈与队列\",\n              \"/pages/9f1ed7/\"\n            ]\n          ]\n        },\n        {\n          \"title\": \"经典算法\",\n          \"collapsable\": true,\n          \"children\": [\n            [\n              \"02.经典算法/01.字符串.md\",\n              \"字符串\",\n              \"/pages/d1dc4a/\"\n            ]\n          ]\n        }\n      ],\n      \"/03.CPP/\": [\n        {\n          \"title\": \"误区总结\",\n          \"collapsable\": true,\n          \"children\": [\n            [\n              \"01.误区总结/01.字符串与字符初始化及转换.md\",\n              \"字符串与字符初始化及转换\",\n              \"/pages/cf07c3/\"\n            ]\n          ]\n        }\n      ]\n    },\n    \"updateBar\": {\n      \"showToArticle\": false,\n      \"moreArticle\": \"/archives\"\n    },\n    \"author\": {\n      \"name\": \"Lido\",\n      \"link\": \"https://zhuhr-57.github.io/blog/\"\n    },\n    \"blogger\": {\n      \"avatar\": \"https://s3.bmp.ovh/imgs/2023/02/04/fce81e73038738f0.jpg\",\n      \"name\": \"Lido\",\n      \"slogan\": \"慢慢一点一点做的更好\"\n    },\n    \"social\": {\n      \"icons\": [\n        {\n          \"iconClass\": \"icon-github\",\n          \"title\": \"GitHub\",\n          \"link\": \"https://github.com/ZhuHR-57\"\n        }\n      ]\n    },\n    \"footer\": {\n      \"createYear\": 2022,\n      \"copyrightInfo\": \"\\n      <a href='https://github.com/ZhuHR-57' target='_blank'>Lido</a>\\n    \"\n    }\n  }\n}"]}]}