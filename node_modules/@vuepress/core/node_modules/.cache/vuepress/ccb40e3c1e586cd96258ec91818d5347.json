{"remainingRequest":"F:\\Blog\\Blog_Home_New\\node_modules\\babel-loader\\lib\\index.js??ref--3-1!F:\\Blog\\Blog_Home_New\\node_modules\\vuepress-theme-vdoing\\util\\index.js","dependencies":[{"path":"F:\\Blog\\Blog_Home_New\\node_modules\\vuepress-theme-vdoing\\util\\index.js","mtime":1673497944876},{"path":"F:\\Blog\\Blog_Home_New\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1673497485656},{"path":"F:\\Blog\\Blog_Home_New\\node_modules\\babel-loader\\lib\\index.js","mtime":1673497485408}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}