{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{508:function(t,a,s){\"use strict\";s.r(a);var r=s(41),e=Object(r.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":t.$parent.slotKey}},[s(\"blockquote\",[s(\"p\",[t._v(\"理论基础、232. 用栈实现队列、225. 用队列实现栈\")])]),t._v(\" \"),s(\"h2\",{attrs:{id:\"理论基础\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#理论基础\"}},[t._v(\"#\")]),t._v(\" 理论基础\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"三个常见stl版本\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#三个常见stl版本\"}},[t._v(\"#\")]),t._v(\" 三个常见 STL 版本\")]),t._v(\" \"),s(\"ol\",[s(\"li\",[s(\"p\",[t._v(\"HP STL 其他版本的 C++ STL，一般是以 HP STL 为蓝本实现出来的，HP STL 是 C++ STL 的第一个实现版本，而且开放源代码。\")])]),t._v(\" \"),s(\"li\",[s(\"p\",[t._v(\"P.J.Plauger STL 由 P.J.Plauger 参照 HP STL 实现出来的，被 Visual C++ 编译器所采用，不是开源的。\")])]),t._v(\" \"),s(\"li\",[s(\"p\",[t._v(\"SGI STL 由 Silicon Graphics Computer Systems 公司参照 HP STL 实现，被 Linux 的 C++ 编译器 GCC 所采用，SGI STL 是开源软件，源码可读性甚高。\"),s(\"strong\",[t._v(\"(主要)\")])])])]),t._v(\" \"),s(\"h3\",{attrs:{id:\"四个问题\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#四个问题\"}},[t._v(\"#\")]),t._v(\" 四个问题\")]),t._v(\" \"),s(\"blockquote\",[s(\"ol\",[s(\"li\",[t._v(\"C++ 中 stack 是容器么？\")]),t._v(\" \"),s(\"li\",[t._v(\"我们使用的 stack 是属于哪个版本的 STL？\")]),t._v(\" \"),s(\"li\",[t._v(\"我们使用的 STL 中 stack 是如何实现的？\")]),t._v(\" \"),s(\"li\",[t._v(\"stack 提供迭代器来遍历 stack 空间么？\")])])]),t._v(\" \"),s(\"ol\",[s(\"li\",[s(\"p\",[t._v(\"C++ 中 stack 是容器么？\")]),t._v(\" \"),s(\"p\",[t._v(\"不属于容器，栈是以底层容器完成其所有的工作，对外提供统一的接口，\"),s(\"strong\",[t._v(\"底层容器是可插拔的\")]),t._v(\"（也就是说我们可以控制使用哪种容器来实现栈的功能）。\")])])]),t._v(\" \"),s(\"p\",[t._v(\"所以 STL 中栈往往不被归类为容器，而被归类为\"),s(\"strong\",[t._v(\" container adapter（容器适配器）\")]),t._v(\"。\")]),t._v(\" \"),s(\"ol\",{attrs:{start:\"2\"}},[s(\"li\",[t._v(\"我们使用的 stack 是属于哪个版本的 STL？\")])]),t._v(\" \"),s(\"ul\",[s(\"li\",[s(\"p\",[t._v(\"Visual C++ 编译器所采用 P.J.Plauger STL\")])]),t._v(\" \"),s(\"li\",[s(\"p\",[t._v(\"Linux 的 C++ 编译器 GCC 所采用 SGI STL\")])])]),t._v(\" \"),s(\"ol\",{attrs:{start:\"3\"}},[s(\"li\",[t._v(\"我们使用的 STL 中 stack 是如何实现的？\")])]),t._v(\" \"),s(\"p\",[t._v(\"栈的底层实现可以是 vector，deque，list 都是可以的， 主要就是\"),s(\"strong\",[t._v(\"数组和链表\")]),t._v(\"的底层实现。\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://sjc04pap001files.storage.live.com/y4mSKoNruqOBt3DlmwJhxJdzOb5iO_vFTyKHtfSFyJVgMfvQMPDnpZFFTuMzTUdajdMTb3mlted5XXJlPNw0o0EtycsTQXvw7rCAjDLgR4BmB5LvJoHzIzTMg8ikXrcCOw0y3bru0xUA_9ClUZmfgoKyj_BMRRhinPMLBwU7aA5YGl0Shnd_I0Bn0UMHOqRCCVJ?width=934&height=656&cropmode=none\",alt:\"\"}})]),t._v(\" \"),s(\"p\",[t._v(\"我们常用的 SGI STL，默认是以\"),s(\"strong\",[t._v(\" deque\")]),t._v(\" 为缺省情况下\"),s(\"strong\",[t._v(\"栈和队列\")]),t._v(\"的底层结构。\")]),t._v(\" \"),s(\"p\",[t._v(\"deque 是一个双向队列，只要封住一段，只开通另一端就可以实现栈的逻辑了。\")]),t._v(\" \"),s(\"hr\"),t._v(\" \"),s(\"p\",[t._v(\"我们也可以指定 vector 为栈的底层实现，初始化语句如下：\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-cpp line-numbers-mode\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-cpp\"}},[s(\"code\",[t._v(\"std\"),s(\"span\",{pre:!0,attrs:{class:\"token double-colon punctuation\"}},[t._v(\"::\")]),t._v(\"stack\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"<\")]),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" std\"),s(\"span\",{pre:!0,attrs:{class:\"token double-colon punctuation\"}},[t._v(\"::\")]),t._v(\"vector\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"<\")]),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\">\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\">\")]),t._v(\" third\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"  \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 使用vector为底层容器的栈\")]),t._v(\"\\n\")])]),t._v(\" \"),s(\"div\",{staticClass:\"line-numbers-wrapper\"},[s(\"span\",{staticClass:\"line-number\"},[t._v(\"1\")]),s(\"br\")])]),s(\"p\",[t._v(\"也可以指定 list 为起底层实现，初始化 queue 的语句如下：\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-cpp line-numbers-mode\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-cpp\"}},[s(\"code\",[t._v(\"std\"),s(\"span\",{pre:!0,attrs:{class:\"token double-colon punctuation\"}},[t._v(\"::\")]),t._v(\"queue\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"<\")]),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" std\"),s(\"span\",{pre:!0,attrs:{class:\"token double-colon punctuation\"}},[t._v(\"::\")]),t._v(\"list\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"<\")]),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\">>\")]),t._v(\" third\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 定义以list为底层容器的队列\")]),t._v(\"\\n\")])]),t._v(\" \"),s(\"div\",{staticClass:\"line-numbers-wrapper\"},[s(\"span\",{staticClass:\"line-number\"},[t._v(\"1\")]),s(\"br\")])]),s(\"ol\",{attrs:{start:\"4\"}},[s(\"li\",[t._v(\"stack 提供迭代器来遍历 stack 空间么？\")])]),t._v(\" \"),s(\"p\",[t._v(\"NO，栈提供 push 和 pop 等等接口，所有元素必须符合先进后出规则，所以栈不提供走访功能，也不提供迭代器 (iterator)。 不像是 set 或者 map 提供迭代器 iterator 来遍历所有元素。\")]),t._v(\" \"),s(\"h2\",{attrs:{id:\"_232-用栈实现队列\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_232-用栈实现队列\"}},[t._v(\"#\")]),t._v(\" 232. 用栈实现队列\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[s(\"p\",[t._v(\"题目：\"),s(\"a\",{attrs:{href:\"https://leetcode.cn/problems/implement-queue-using-stacks/\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"232. 用栈实现队列\"),s(\"OutboundLink\")],1)])]),t._v(\" \"),s(\"li\",[s(\"p\",[t._v(\"讲解：\"),s(\"a\",{attrs:{href:\"https://programmercarl.com/0232.%E7%94%A8%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97.html\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"文章讲解\"),s(\"OutboundLink\")],1),t._v(\"、\"),s(\"a\",{attrs:{href:\"https://www.bilibili.com/video/BV1nY4y1w7VC\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"视频讲解\"),s(\"OutboundLink\")],1)])]),t._v(\" \"),s(\"li\",[s(\"p\",[t._v(\"要求：模拟过程\")])])]),t._v(\" \"),s(\"h3\",{attrs:{id:\"录前想法\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#录前想法\"}},[t._v(\"#\")]),t._v(\" 录前想法\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"录后想法\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#录后想法\"}},[t._v(\"#\")]),t._v(\" 录后想法\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"总结\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#总结\"}},[t._v(\"#\")]),t._v(\" 总结\")]),t._v(\" \"),s(\"h2\",{attrs:{id:\"_225-用队列实现栈\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_225-用队列实现栈\"}},[t._v(\"#\")]),t._v(\" 225. 用队列实现栈\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[s(\"p\",[t._v(\"题目：\"),s(\"a\",{attrs:{href:\"https://leetcode.cn/problems/implement-stack-using-queues/\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"225. 用队列实现栈\"),s(\"OutboundLink\")],1)])]),t._v(\" \"),s(\"li\",[s(\"p\",[t._v(\"讲解：\"),s(\"a\",{attrs:{href:\"https://programmercarl.com/0225.%E7%94%A8%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0%E6%A0%88.html\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"文章讲解\"),s(\"OutboundLink\")],1),t._v(\"、\"),s(\"a\",{attrs:{href:\"https://www.bilibili.com/video/BV1Fd4y1K7sm\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"视频讲解\"),s(\"OutboundLink\")],1)])]),t._v(\" \"),s(\"li\",[s(\"p\",[t._v(\"要求：用一个队列模拟栈\")])])]),t._v(\" \"),s(\"h3\",{attrs:{id:\"录前想法-2\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#录前想法-2\"}},[t._v(\"#\")]),t._v(\" 录前想法\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"录后想法-2\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#录后想法-2\"}},[t._v(\"#\")]),t._v(\" 录后想法\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"总结-2\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#总结-2\"}},[t._v(\"#\")]),t._v(\" 总结\")])])}),[],!1,null,null,null);a.default=e.exports}}]);","extractedComments":[]}